-- @nsURI UMLOUT=http://www.eclipse.org/uml2/5.0.0/UML
-- @nsURI UMLIN=http://www.eclipse.org/uml2/5.0.0/UML
-- @nsURI ECORE=http://www.eclipse.org/emf/2002/Ecore
-- @path XMI=/ModelTransformation/metamodels/soSSecProfileEcoreRepresentation.ecore

module XMITransfromation;
create OUT: UMLOUT from IN: XMI, IN2: UMLIN, IN3: ECORE;

-- Helpers

-- End Helpers

-- Rules

---rule for UML to UML(cascading attack)
rule Model {
	from 
		x: XMI!ActivityDiagram,
		s: UMLIN!Model
	to 
		u: UMLOUT!Model(
			name <- 'RootElement',
			profileApplication <- UMLOUT!ProfileApplication.allInstances(),
			packagedElement <- activity			
		),
		activity: UMLOUT!Activity(
			name <- x.name,
			edge <- Sequence{UMLOUT!ControlFlow.allInstances()},
			node <- Sequence{UMLOUT!OpaqueAction.allInstances()},
			ownedNode <- Sequence{UMLOUT!OpaqueAction.allInstances(), UMLOUT!DataStoreNode.allInstances()},
			ownedRule <- Sequence{UMLOUT!Constraint.allInstances()}
		)
	do {
		
	}
}

rule ObjectFlow {
	from
		x: XMI!ObjectFlow
	to
		vulner: UMLOUT!ControlFlow(
			target <- x.target,
			source <- x.source
		)
}


rule Action {
	from
		x: XMI!Action
	to
		action: UMLOUT!OpaqueAction(
			name <- x.name
		)
}
--rule for Vulnerability
rule Vulnerability {
	from
		x: XMI!Vulnerability
	to
		vulner: UMLOUT!DataStoreNode(
			name <- x.name,
			upperBound <- vulUpperBound
		),
		vulUpperBound: UMLOUT!LiteralInteger(
			value <- 1
		)
}

rule PreCondition {
	from
		x: XMI!PreCondition
	to
		vulner: UMLOUT!Constraint(
			name <- x.name,
			specification <- spec,
			constrainedElement <- x.activates
		),
		spec: UMLOUT!LiteralString(
			name <- 'constraintSpec'
		)
}

rule PostCondition {
	from
		x: XMI!PostCondition
	to
		vulner: UMLOUT!Constraint(
			name <- x.name,
			specification <- spec,
			constrainedElement <- x.vulnerability
		),
		spec: UMLOUT!LiteralString(
			name <- 'constraintSpec'
		)
}

rule ProfileApplication {
	from 
		s: UMLIN!ProfileApplication
	to 
		profileApp: UMLOUT!ProfileApplication(
			eAnnotations <- s.eAnnotations,
			appliedProfile <- s.appliedProfile
		)
}

rule EAnnotation {
	from 
		s: UMLIN!EAnnotation
	to 
		u: UMLOUT!EAnnotation(
			references <- s.references,
			details <- s.details,
			source <- s.source			
		)
}

rule EPackage {
	from 
		s: UMLIN!EPackage
	to 
		u: UMLOUT!EPackage(
			
		)
}

rule EStringToStringMapEntry {
	from 
		s: UMLIN!EStringToStringMapEntry
	to 
		u: UMLOUT!EStringToStringMapEntry(
			key <- s.key,
			value <- s.value			
		)
}

rule Profile {
	from 
		s: UMLIN!Profile
	to 
		u: UMLOUT!Profile(
			
		)
}
-- End Rules