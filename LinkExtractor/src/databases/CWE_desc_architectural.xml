<?xml version="1.0" encoding="UTF-8"?>
<Weakness_Catalog xmlns:cwe="http://cwe.mitre.org/cwe-6">
   <Weaknesses>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="114"
                Name="Process Control"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.</Description>
         <Extended_Description>Process control vulnerabilities take two forms: 1. An attacker can change the command that the program executes: the attacker explicitly controls what the command is. 2. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="117"
                Name="Improper Output Neutralization for Logs"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not neutralize or incorrectly neutralizes output that is written to logs.</Description>
         <Extended_Description>
            This can allow an attacker to forge log entries or inject malicious content into logs.
            Log forging vulnerabilities occur when:
            
               
                  Data enters an application from an untrusted source.
                  The data is written to an application or system log file.
               
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="138"
                Name="Improper Neutralization of Special Elements"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.</Description>
         <Extended_Description>Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If software does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol &lt; ("less than") as meaning "read input from a file".</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="15"
                Name="External Control of System or Configuration Setting"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>One or more system settings or configuration elements can be externally controlled by a user.</Description>
         <Extended_Description>Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="150"
                Name="Improper Neutralization of Escape, Meta, or Control Sequences"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.</Description>
         <Extended_Description>As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="20"
                Name="Improper Input Validation"
                Abstraction="Class"
                Structure="Simple"
                Status="Usable">
         <Description>The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program.</Description>
         <Extended_Description>When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="201"
                Name="Information Exposure Through Sent Data"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The accidental exposure of sensitive information through sent data refers to the transmission of data which are either sensitive in and of itself or useful in the further exploitation of the system through standard data channels.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="208"
                Name="Information Exposure Through Timing Discrepancy"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="209"
                Name="Information Exposure Through an Error Message"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software generates an error message that includes sensitive information about its environment, users, or associated data.</Description>
         <Extended_Description>The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="210"
                Name="Information Exposure Through Self-generated Error Message"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="211"
                Name="Information Exposure Through Externally-Generated Error Message"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software performs an operation that triggers an external diagnostic or error message that is not directly generated by the software, such as an error generated by the programming language interpreter that the software uses. The error can contain sensitive system information.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="212"
                Name="Improper Cross-boundary Removal of Sensitive Data"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses a resource that contains sensitive data, but it does not properly remove that data before it stores, transfers, or shares the resource with actors in another control sphere.</Description>
         <Extended_Description>
            Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing.
            For example, software that is used for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="214"
                Name="Information Exposure Through Process Environment"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>A process is invoked with sensitive arguments, environment variables, or other elements that can be seen by other processes on the operating system.</Description>
         <Extended_Description>Many operating systems allow a user to list information about processes that are owned by other users. This information could include command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the software or related resources.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="219"
                Name="Sensitive Data Under Web Root"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The application stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="220"
                Name="Sensitive Data Under FTP Root"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The application stores sensitive data under the FTP document root with insufficient access control, which might make it accessible to untrusted parties.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="223"
                Name="Omission of Security-relevant Information"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The application does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="224"
                Name="Obscured Security-relevant Information by Alternate Name"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="243"
                Name="Creation of chroot Jail Without Changing Working Directory"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The program uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.</Description>
         <Extended_Description>Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="250"
                Name="Execution with Unnecessary Privileges"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.</Description>
         <Extended_Description>
            New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges.
            Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="256"
                Name="Unprotected Storage of Credentials"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>Storing a password in plaintext may result in a system compromise.</Description>
         <Extended_Description>Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="257"
                Name="Storing Passwords in a Recoverable Format"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="258"
                Name="Empty Password in Configuration File"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>Using an empty string as a password is insecure.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="259"
                Name="Use of Hard-coded Password"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.</Description>
         <Extended_Description>
            A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:
            
               Inbound: the software contains an authentication mechanism that checks for a hard-coded password.
               Outbound: the software connects to another system or component, and it contains hard-coded password for connecting to that component.
            
            In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place.
            The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="260"
                Name="Password in Configuration File"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software stores a password in a configuration file that might be accessible to actors who do not know the password.</Description>
         <Extended_Description>This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="261"
                Name="Weak Cryptography for Passwords"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>Obscuring a password with a trivial encoding does not protect the password.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="262"
                Name="Not Using Password Aging"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="263"
                Name="Password Aging with Long Expiration"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>Allowing password aging to occur unchecked can result in the possibility of diminished password integrity.</Description>
         <Extended_Description>Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="266"
                Name="Incorrect Privilege Assignment"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="267"
                Name="Privilege Defined With Unsafe Actions"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="268"
                Name="Privilege Chaining"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="269"
                Name="Improper Privilege Management"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="270"
                Name="Privilege Context Switching Error"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="271"
                Name="Privilege Dropping / Lowering Errors"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not drop privileges before passing control of a resource to an actor that does not have those privileges.</Description>
         <Extended_Description>In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="272"
                Name="Least Privilege Violation"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="273"
                Name="Improper Check for Dropped Privileges"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.</Description>
         <Extended_Description>If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="274"
                Name="Improper Handling of Insufficient Privileges"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="276"
                Name="Incorrect Default Permissions"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="277"
                Name="Insecure Inherited Permissions"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>A product defines a set of insecure permissions that are inherited by objects that are created by the program.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="279"
                Name="Incorrect Execution-Assigned Permissions"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>While it is executing, the software sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="280"
                Name="Improper Handling of Insufficient Permissions or Privileges "
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The application does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the application in an invalid state.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="281"
                Name="Improper Preservation of Permissions"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="282"
                Name="Improper Ownership Management"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="283"
                Name="Unverified Ownership"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not properly verify that a critical resource is owned by the proper entity.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="284"
                Name="Improper Access Control"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</Description>
         <Extended_Description>
            Access control involves the use of several protection mechanisms such as:
            
               Authentication (proving the identity of an actor)
               Authorization (ensuring that a given actor can access a resource), and
               Accountability (tracking of activities that were performed)
            
            When any mechanism is not applied or otherwise fails, attackers can compromise the security of the software by gaining privileges, reading sensitive information, executing commands, evading detection, etc.
            There are two distinct behaviors that can introduce access control weaknesses:
            
               
                  Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.
                  Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.
               
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="285"
                Name="Improper Authorization"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.</Description>
         <Extended_Description>
            Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.
            When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="286"
                Name="Incorrect User Management"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not properly manage a user within its environment.</Description>
         <Extended_Description>Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="287"
                Name="Improper Authentication"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="288"
                Name="Authentication Bypass Using an Alternate Path or Channel"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>A product requires authentication, but the product has an alternate path or channel that does not require authentication.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="289"
                Name="Authentication Bypass by Alternate Name"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="290"
                Name="Authentication Bypass by Spoofing"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="291"
                Name="Reliance on IP Address for Authentication"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses an IP address for authentication.</Description>
         <Extended_Description>IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="293"
                Name="Using Referer Field for Authentication"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="294"
                Name="Authentication Bypass by Capture-replay"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).</Description>
         <Extended_Description>Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="295"
                Name="Improper Certificate Validation"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not validate, or incorrectly validates, a certificate.</Description>
         <Extended_Description>When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by using a man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="296"
                Name="Improper Following of a Certificate's Chain of Trust"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.</Description>
         <Extended_Description>
            If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate.
            In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate.
            There are several ways in which the chain of trust might be broken, including but not limited to:
            
               
                  Any certificate in the chain is self-signed, unless it the root.
                  Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate.
                  An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions.
                  The root certificate has been compromised or authorized to the wrong party.
               
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="297"
                Name="Improper Validation of Certificate with Host Mismatch"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software communicates with a host that provides a certificate, but the software does not properly ensure that the certificate is actually associated with that host.</Description>
         <Extended_Description>
            Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the software is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed.
            Even if the software attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name.
            This weakness can occur even when the software uses Certificate Pinning, if the software does not verify the hostname at the time a certificate is pinned.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="298"
                Name="Improper Validation of Certificate Expiration"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.</Description>
         <Extended_Description>When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="299"
                Name="Improper Check for Certificate Revocation"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.</Description>
         <Extended_Description>An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="300"
                Name="Channel Accessible by Non-Endpoint ('Man-in-the-Middle')"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.</Description>
         <Extended_Description>In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="301"
                Name="Reflection Attack in an Authentication Protocol"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.</Description>
         <Extended_Description>A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="302"
                Name="Authentication Bypass by Assumed-Immutable Data"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="303"
                Name="Incorrect Implementation of Authentication Algorithm"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.</Description>
         <Extended_Description>This incorrect implementation may allow authentication to be bypassed.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="304"
                Name="Missing Critical Step in Authentication"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software implements an authentication technique, but it skips a step that weakens the technique.</Description>
         <Extended_Description>Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="305"
                Name="Authentication Bypass by Primary Weakness"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="306"
                Name="Missing Authentication for Critical Function"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="307"
                Name="Improper Restriction of Excessive Authentication Attempts"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="308"
                Name="Use of Single-factor Authentication"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.</Description>
         <Extended_Description>While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="311"
                Name="Missing Encryption of Sensitive Data"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not encrypt sensitive or critical information before storage or transmission.</Description>
         <Extended_Description>The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="312"
                Name="Cleartext Storage of Sensitive Information"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere.</Description>
         <Extended_Description>Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="313"
                Name="Cleartext Storage in a File or on Disk"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The application stores sensitive information in cleartext in a file, or on disk.</Description>
         <Extended_Description>The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="314"
                Name="Cleartext Storage in the Registry"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The application stores sensitive information in cleartext in the registry.</Description>
         <Extended_Description>Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="315"
                Name="Cleartext Storage of Sensitive Information in a Cookie"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The application stores sensitive information in cleartext in a cookie.</Description>
         <Extended_Description>Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="316"
                Name="Cleartext Storage of Sensitive Information in Memory"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The application stores sensitive information in cleartext in memory.</Description>
         <Extended_Description>
            The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the application crashes, or if the programmer does not properly clear the memory before freeing it.
            It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="317"
                Name="Cleartext Storage of Sensitive Information in GUI"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The application stores sensitive information in cleartext within the GUI.</Description>
         <Extended_Description>An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="318"
                Name="Cleartext Storage of Sensitive Information in Executable"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The application stores sensitive information in cleartext in an executable.</Description>
         <Extended_Description>Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="319"
                Name="Cleartext Transmission of Sensitive Information"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.</Description>
         <Extended_Description>Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="321"
                Name="Use of Hard-coded Cryptographic Key"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="322"
                Name="Key Exchange without Entity Authentication"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software performs a key exchange with an actor without verifying the identity of that actor.</Description>
         <Extended_Description>Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable a set of "man-in-the-middle" attacks. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="323"
                Name="Reusing a Nonce, Key Pair in Encryption"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>Nonces should be used for the present occasion and only once.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="324"
                Name="Use of a Key Past its Expiration Date"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.</Description>
         <Extended_Description>While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="325"
                Name="Missing Required Cryptographic Step"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by that algorithm.</Description>
         <Extended_Description>Cryptographic implementations should follow the algorithms that define them exactly, otherwise encryption can be weaker than expected.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="326"
                Name="Inadequate Encryption Strength"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.</Description>
         <Extended_Description>A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="327"
                Name="Use of a Broken or Risky Cryptographic Algorithm"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information.</Description>
         <Extended_Description>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="328"
                Name="Reversible One-Way Hash"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques.</Description>
         <Extended_Description>This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="330"
                Name="Use of Insufficiently Random Values"
                Abstraction="Class"
                Structure="Simple"
                Status="Usable">
         <Description>The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers.</Description>
         <Extended_Description>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="331"
                Name="Insufficient Entropy"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="332"
                Name="Insufficient Entropy in PRNG"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="333"
                Name="Improper Handling of Insufficient Entropy in TRNG"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.</Description>
         <Extended_Description>The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="334"
                Name="Small Space of Random Values"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="335"
                Name="Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software uses a Pseudo-Random Number Generator (PRNG) that does not correctly manage seeds.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="336"
                Name="Same Seed in Pseudo-Random Number Generator (PRNG)"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.</Description>
         <Extended_Description>If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="337"
                Name="Predictable Seed in Pseudo-Random Number Generator (PRNG)"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.</Description>
         <Extended_Description>The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numnbers will be generated by the PRNG.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="338"
                Name="Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.</Description>
         <Extended_Description>
            When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks.
            Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="339"
                Name="Small Seed Space in PRNG"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>A PRNG uses a relatively small space of seeds.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="341"
                Name="Predictable from Observable State"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="345"
                Name="Insufficient Verification of Data Authenticity"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="346"
                Name="Origin Validation Error"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not properly verify that the source of data or communication is valid.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="347"
                Name="Improper Verification of Cryptographic Signature"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not verify, or incorrectly verifies, the cryptographic signature for data.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="349"
                Name="Acceptance of Extraneous Untrusted Data With Trusted Data"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="352"
                Name="Cross-Site Request Forgery (CSRF)"
                Abstraction="Compound"
                Structure="Composite"
                Status="Draft">
         <Description>The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.</Description>
         <Extended_Description>When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="353"
                Name="Missing Support for Integrity Check"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.</Description>
         <Extended_Description>If integrity check values or "checksums" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="354"
                Name="Improper Validation of Integrity Check Value"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not validate or incorrectly validates the integrity check values or "checksums" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.</Description>
         <Extended_Description>Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="359"
                Name="Exposure of Private Information ('Privacy Violation')"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not properly prevent private data (such as credit card numbers) from being accessed by actors who either (1) are not explicitly authorized to access the data or (2) do not have the implicit consent of the people to which the data is related.</Description>
         <Extended_Description>
            Mishandling private information, such as customer passwords or Social Security numbers, can compromise user privacy and is often illegal. An exposure of private information does not necessarily prevent the software from working properly, and in fact it might be intended by the developer, but it can still be undesirable (or explicitly prohibited by law) for the people who are associated with this private information.
            Privacy violations may occur when:
            
               
                  Private user information enters the program.
                  The data is written to an external location, such as the console, file system, or network.
               
            
            Private data can enter a program in a variety of ways:
            
               
                  Directly from the user in the form of a password or personal information
                  Accessed from a database or other data store by the application
                  Indirectly from a partner or other third party
               
            
            Some types of private information include:
            
               
                  Government identifiers, such as Social Security Numbers
                  Contact information, such as home addresses and telephone numbers
                  Geographic location - where the user is (or was)
                  Employment history
                  Financial data - such as credit card numbers, salary, bank accounts, and debts
                  Pictures, video, or audio
                  Behavioral patterns - such as web surfing history, when certain activities are performed, etc.
                  Relationships (and types of relationships) with others - family, friends, contacts, etc.
                  Communications - e-mail addresses, private e-mail messages, SMS text messages, chat logs, etc.
                  Health - medical conditions, insurance status, prescription records
                  Credentials, such as passwords, which can be used to access other information.
               
            
            Some of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry.
            Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations: - Safe Harbor Privacy Framework [REF-340] - Gramm-Leach Bliley Act (GLBA) [REF-341] - Health Insurance Portability and Accountability Act (HIPAA) [REF-342] - California SB-1386 [REF-343].
            Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.
            Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="370"
                Name="Missing Check for Certificate Revocation after Initial Check"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not check the revocation status of a certificate after its initial revocation check, which can cause the software to perform privileged actions even after the certificate is revoked at a later time.</Description>
         <Extended_Description>If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="384"
                Name="Session Fixation"
                Abstraction="Compound"
                Structure="Composite"
                Status="Incomplete">
         <Description>Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.</Description>
         <Extended_Description>
            Such a scenario is commonly observed when:
            
               1. A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.
               2. An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.
               3. The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="390"
                Name="Detection of Error Condition Without Action"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software detects a specific error, but takes no actions to handle the error.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="391"
                Name="Unchecked Error Condition"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="392"
                Name="Missing Report of Error Condition"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software encounters an error but does not provide a status code or return value to indicate that an error has occurred.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="403"
                Name="Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.</Description>
         <Extended_Description>When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="419"
                Name="Unprotected Primary Channel"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="420"
                Name="Unprotected Alternate Channel"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software protects a primary channel, but it does not use the same level of protection for an alternate channel.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="425"
                Name="Direct Request ('Forced Browsing')"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.</Description>
         <Extended_Description>Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="426"
                Name="Untrusted Search Path"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control.</Description>
         <Extended_Description>
            This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the application uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted application would then execute. The problem extends to any type of critical resource that the application trusts.
            Some of the most common variants of untrusted search path are:
            
               
                  In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library.
                  In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order.
               
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="434"
                Name="Unrestricted Upload of File with Dangerous Type"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="441"
                Name="Unintended Proxy or Intermediary ('Confused Deputy')"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software receives a request, message, or directive from an upstream component, but the software does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the software's control sphere. This causes the software to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.</Description>
         <Extended_Description>
            If an attacker cannot directly contact a target, but the software has access to the target, then the attacker can send a request to the software and have it be forwarded from the target. The request would appear to be coming from the software's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker.
            Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when:
            
               
                  The software runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component;
                  The attacker is prevented from making the request directly to the target; and
                  The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources.
               
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="460"
                Name="Improper Cleanup on Thrown Exception"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.</Description>
         <Extended_Description>Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="472"
                Name="External Control of Assumed-Immutable Web Parameter"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.</Description>
         <Extended_Description>
            If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.
            For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="473"
                Name="PHP External Variable Modification"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="488"
                Name="Exposure of Data Element to Wrong Session"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.</Description>
         <Extended_Description>
            Data can "bleed" from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool.
            In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="494"
                Name="Download of Code Without Integrity Check"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.</Description>
         <Extended_Description>An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="502"
                Name="Deserialization of Untrusted Data"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.</Description>
         <Extended_Description>
            It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.
            Data that is untrusted can not be trusted to be well-formed.
            When developers place no restrictions on "gadget chains," or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="521"
                Name="Weak Password Requirements"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.</Description>
         <Extended_Description>An authentication mechanism is only as strong as its credentials. For this reason, it is important to require users to have strong passwords. Lack of password complexity significantly reduces the search space when trying to guess user's passwords, making brute-force attacks easier.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="522"
                Name="Insufficiently Protected Credentials"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>This weakness occurs when the application transmits or stores authentication credentials and uses an insecure method that is susceptible to unauthorized interception and/or retrieval.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="523"
                Name="Unprotected Transport of Credentials"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>Login pages not using adequate measures to protect the user name and password while they are in transit from the client to the server.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="527"
                Name="Exposure of CVS Repository to an Unauthorized Control Sphere"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The product stores a CVS repository in a directory or other container that is accessible to actors outside of the intended control sphere.</Description>
         <Extended_Description>Information contained within a CVS subdirectory on a web server or other server could be recovered by an attacker and used for malicious purposes. This information may include usernames, filenames, path root, and IP addresses.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="528"
                Name="Exposure of Core Dump File to an Unauthorized Control Sphere"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The product generates a core dump file in a directory that is accessible to actors outside of the intended control sphere.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="529"
                Name="Exposure of Access Control List Files to an Unauthorized Control Sphere"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.</Description>
         <Extended_Description>Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="530"
                Name="Exposure of Backup File to an Unauthorized Control Sphere"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>A backup file is stored in a directory that is accessible to actors outside of the intended control sphere.</Description>
         <Extended_Description>Often, old files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="532"
                Name="Inclusion of Sensitive Information in Log Files"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.</Description>
         <Extended_Description>
            While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers.
            Different log files may be produced and stored for:
            
               Server log files (e.g. server.log).  This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords.
               log files that are used for debugging
               
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="538"
                Name="File and Directory Information Exposure"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The product stores sensitive information in files or directories that are accessible to actors outside of the intended control sphere.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="544"
                Name="Missing Standardized Error Handling Mechanism"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.</Description>
         <Extended_Description>If the application handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="550"
                Name="Information Exposure Through Server Error Message"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>Certain conditions, such as network failure, will cause a server error message to be displayed.</Description>
         <Extended_Description>While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="551"
                Name="Incorrect Behavior Order: Authorization Before Parsing and Canonicalization"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.</Description>
         <Extended_Description>For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="552"
                Name="Files or Directories Accessible to External Parties"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>Files or directories are accessible in the environment that should not be.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="565"
                Name="Reliance on Cookies without Validation and Integrity Checking"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.</Description>
         <Extended_Description>Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="566"
                Name="Authorization Bypass Through User-Controlled SQL Primary Key"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.</Description>
         <Extended_Description>
            When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records.
            Database access control errors occur when:
            
               
                  Data enters a program from an untrusted source.
                  The data is used to specify the value of a primary key in a SQL query.
                  The untrusted source does not have the permissions to be able to access all rows in the associated table.
               
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="579"
                Name="J2EE Bad Practices: Non-serializable Object Stored in Session"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The application stores a non-serializable object as an HttpSession attribute, which can hurt reliability.</Description>
         <Extended_Description>A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="59"
                Name="Improper Link Resolution Before File Access ('Link Following')"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="593"
                Name="Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The software modifies the SSL context after connection creation has begun.</Description>
         <Extended_Description>If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="599"
                Name="Missing Validation of OpenSSL Certificate"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.</Description>
         <Extended_Description>This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="6"
                Name="J2EE Misconfiguration: Insufficient Session-ID Length"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The J2EE application is configured to use an insufficient session ID length.</Description>
         <Extended_Description>If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="601"
                Name="URL Redirection to Untrusted Site ('Open Redirect')"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.</Description>
         <Extended_Description>An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="602"
                Name="Client-Side Enforcement of Server-Side Security"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.</Description>
         <Extended_Description>When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="603"
                Name="Use of Client-Side Authentication"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.</Description>
         <Extended_Description>Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="610"
                Name="Externally Controlled Reference to a Resource in Another Sphere"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="611"
                Name="Improper Restriction of XML External Entity Reference"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.</Description>
         <Extended_Description>
            XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing.
            By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as "file:///c:/winnt/win.ini" designates (in Windows) the file C:\Winnt\win.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning.
            Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="613"
                Name="Insufficient Session Expiration"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>According to WASC, "Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization."</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="620"
                Name="Unverified Password Change"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.</Description>
         <Extended_Description>This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="639"
                Name="Authorization Bypass Through User-Controlled Key"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.</Description>
         <Extended_Description>
            Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.
            For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.
            One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="640"
                Name="Weak Password Recovery Mechanism for Forgotten Password"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.</Description>
         <Extended_Description>
            It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme.
            This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="641"
                Name="Improper Restriction of Names for Files and Other Resources"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The application constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.</Description>
         <Extended_Description>This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="642"
                Name="External Control of Critical State Data"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software stores security-critical state information about its users, or the software itself, in a location that is accessible to unauthorized actors.</Description>
         <Extended_Description>
            If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed.
            State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an "authenticated=true" cookie. An attacker may simply create this cookie in order to bypass the authentication.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="643"
                Name="Improper Neutralization of Data within XPath Expressions ('XPath Injection')"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.</Description>
         <Extended_Description>The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="645"
                Name="Overly Restrictive Account Lockout Mechanism"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.</Description>
         <Extended_Description>Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="647"
                Name="Use of Non-Canonical URL Paths for Authorization Decisions"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.</Description>
         <Extended_Description>
            If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as:
            
               
                  http://WWW.EXAMPLE.COM/mypage
                  http://www.example.com/%6Dypage (alternate encoding)
                  http://192.168.1.1/mypage (IP address)
                  http://www.example.com/mypage/ (trailing /)
                  http://www.example.com:80/mypage
               
            
            Therefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule).
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="649"
                Name="Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the software does not use integrity checks to detect if those inputs have been modified.</Description>
         <Extended_Description>When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary blindly traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="652"
                Name="Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.</Description>
         <Extended_Description>The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="653"
                Name="Insufficient Compartmentalization"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The product does not sufficiently compartmentalize functionality or processes that require different privilege levels, rights, or permissions.</Description>
         <Extended_Description>When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="656"
                Name="Reliance on Security Through Obscurity"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.</Description>
         <Extended_Description>This reliance on "security through obscurity" can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="668"
                Name="Exposure of Resource to Wrong Sphere"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.</Description>
         <Extended_Description>
            Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.
            A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.
            In either case, the end result is that a resource has been exposed to the wrong party.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="669"
                Name="Incorrect Resource Transfer Between Spheres"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="671"
                Name="Lack of Administrator Control over Security"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.</Description>
         <Extended_Description>If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="673"
                Name="External Influence of Sphere Definition"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The product does not prevent the definition of control spheres from external actors.</Description>
         <Extended_Description>Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="703"
                Name="Improper Check or Handling of Exceptional Conditions"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="707"
                Name="Improper Enforcement of Message or Data Structure"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not enforce or incorrectly enforces that structured messages or data are well-formed before being read from an upstream component or sent to a downstream component.</Description>
         <Extended_Description>
            If a message is malformed it may cause the message to be incorrectly interpreted.
            This weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="708"
                Name="Incorrect Ownership Assignment"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software assigns an owner to a resource, but the owner is outside of the intended control sphere.</Description>
         <Extended_Description>This may allow the resource to be manipulated by actors outside of the intended control sphere.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="73"
                Name="External Control of File Name or Path"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software allows user input to control or influence paths or file names that are used in filesystem operations.</Description>
         <Extended_Description>
            This could allow an attacker to access or modify system files or other files that are critical to the application.
            Path manipulation errors occur when the following two conditions are met:
            
               1. An attacker can specify a path used in an operation on the filesystem.
               2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.
            
            For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="732"
                Name="Incorrect Permission Assignment for Critical Resource"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.</Description>
         <Extended_Description>When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="74"
                Name="Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.</Description>
         <Extended_Description>Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="75"
                Name="Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not adequately filter user-controlled input for special elements with control implications.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="754"
                Name="Improper Check for Unusual or Exceptional Conditions"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the software.</Description>
         <Extended_Description>
            The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability.
            Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="755"
                Name="Improper Handling of Exceptional Conditions"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not handle or incorrectly handles an exceptional condition.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="757"
                Name="Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.</Description>
         <Extended_Description>When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the software by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="759"
                Name="Use of a One-Way Hash without a Salt"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software does not also use a salt as part of the input.</Description>
         <Extended_Description>
            This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables.
            It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="76"
                Name="Improper Neutralization of Equivalent Special Elements"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software properly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.</Description>
         <Extended_Description>The software may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the software may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the software might filter a dangerous "-e" command-line switch when calling an external program, but it might not account for "--exec" or other switches that have the same semantics.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="760"
                Name="Use of a One-Way Hash with a Predictable Salt"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software uses a predictable salt as part of the input.</Description>
         <Extended_Description>
            This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide.
            It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="77"
                Name="Improper Neutralization of Special Elements used in a Command ('Command Injection')"
                Abstraction="Class"
                Structure="Simple"
                Status="Draft">
         <Description>The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.</Description>
         <Extended_Description>
            Command injection vulnerabilities typically occur when:
            
               1. Data enters the application from an untrusted source.
               2. The data is part of a string that is executed as a command by the application.
               3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.
            
            Command injection is a common problem with wrapper programs.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="770"
                Name="Allocation of Resources Without Limits or Throttling"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="778"
                Name="Insufficient Logging"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it.</Description>
         <Extended_Description>When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="779"
                Name="Logging of Excessive Data"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.</Description>
         <Extended_Description>While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="78"
                Name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.</Description>
         <Extended_Description>
            This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.
            There are at least two subtypes of OS command injection:
            
               
                  The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system("nslookup [HOSTNAME]") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.
                  The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use "exec([COMMAND])" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.
               
            
            From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="780"
                Name="Use of RSA Algorithm without OAEP"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.</Description>
         <Extended_Description>Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="782"
                Name="Exposed IOCTL with Insufficient Access Control"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The software implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.</Description>
         <Extended_Description>
            When an IOCTL contains privileged functionality and is exposed unnecessarily, attackers may be able to access this functionality by invoking the IOCTL. Even if the functionality is benign, if the programmer has assumed that the IOCTL would only be accessed by a trusted process, there may be little or no validation of the incoming data, exposing weaknesses that would never be reachable if the attacker cannot call the IOCTL directly.
            The implementations of IOCTLs will differ between operating system types and versions, so the methods of attack and prevention may vary widely.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="784"
                Name="Reliance on Cookies without Validation and Integrity Checking in a Security Decision"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The application uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.</Description>
         <Extended_Description>Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="79"
                Name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
                Abstraction="Base"
                Structure="Simple"
                Status="Usable">
         <Description>The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.</Description>
         <Extended_Description>
            Cross-site scripting (XSS) vulnerabilities occur when:
            
               1. Untrusted data enters a web application, typically from a web request.
               2. The web application dynamically generates a web page that contains this untrusted data.
               3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.
               4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.
               5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.
               6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.
            
            There are three main kinds of XSS:
            
               
                  Type 1: Reflected XSS (or Non-Persistent) - 
         			The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.
               
                  Type 2: Stored XSS (or Persistent) - 
               The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.
            
               
                  Type 0: DOM-Based XSS - 
               In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.
            
            
            Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as "drive-by hacking."
            In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="790"
                Name="Improper Filtering of Special Elements"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="791"
                Name="Incomplete Filtering of Special Elements"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="792"
                Name="Incomplete Filtering of One or More Instances of Special Elements"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.</Description>
         <Extended_Description>
            Incomplete filtering of this nature involves either:
            
               
                  only filtering a single instance of a special element when more exist, or
                  not filtering all instances or all elements where multiple special elements exist.
               
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="793"
                Name="Only Filtering One Instance of a Special Element"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.</Description>
         <Extended_Description>Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="794"
                Name="Incomplete Filtering of Multiple Instances of Special Elements"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.</Description>
         <Extended_Description>
            Incomplete filtering of this nature may be applied to:
            
               
                  sequential elements (special elements that appear next to each other) or
                  non-sequential elements (special elements that appear multiple times in different locations).
               
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="795"
                Name="Only Filtering Special Elements at a Specified Location"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.</Description>
         <Extended_Description>
            A filter might only account for instances of special elements when they occur:
            
               
                  relative to a marker (e.g. "at the beginning/end of string; the second argument"), or
                  at an absolute position (e.g. "byte number 10").
               
            
            This may leave special elements in the data that did not match the filter position, but still may be dangerous.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="796"
                Name="Only Filtering Special Elements Relative to a Marker"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. "at the beginning/end of a string; the second argument"), thereby missing remaining special elements that may exist before sending it to a downstream component.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="797"
                Name="Only Filtering Special Elements at an Absolute Position"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. "byte number 10"), thereby missing remaining special elements that may exist before sending it to a downstream component.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="798"
                Name="Use of Hard-coded Credentials"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.</Description>
         <Extended_Description>
            Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the software administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:
            
               Inbound: the software contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials.
               Outbound: the software connects to another system or component, and it contains hard-coded credentials for connecting to that component.
            
            In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place.
            The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="807"
                Name="Reliance on Untrusted Inputs in a Security Decision"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The application uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.</Description>
         <Extended_Description>
            Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software.
            Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="827"
                Name="Improper Control of Document Type Definition"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the software to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.</Description>
         <Extended_Description>
            As DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content.
            For example, the SOAP specification prohibits SOAP messages from containing DTDs.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="829"
                Name="Inclusion of Functionality from Untrusted Control Sphere"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.</Description>
         <Extended_Description>
            When including third-party functionality, such as a web widget, library, or other source of functionality, the software must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.
            This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="830"
                Name="Inclusion of Web Functionality from an Untrusted Source"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the software, potentially granting total access and control of the software to the untrusted source.</Description>
         <Extended_Description>
            Including third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted.
            Even if the third party is a trusted source, the software may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the software.
            This weakness is common in "mashup" development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '&lt;SCRIPT SRC="http://other.domain.here"&gt;' tags, which causes the code to run in the domain of the software, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access.
            Such dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="836"
                Name="Use of Password Hash Instead of Password for Authentication"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.</Description>
         <Extended_Description>
            Some authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password.
            As a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="841"
                Name="Improper Enforcement of Behavioral Workflow"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.</Description>
         <Extended_Description>
            By performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the software or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses.
            For example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the software might still perform the transfer.
            Note that this is different than CWE-696, which focuses on when the software performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence.
            Workflow-related behaviors include:
            
               
                  Steps are performed in the expected order.
                  Required steps are not omitted.
                  Steps are not interrupted.
                  Steps are performed in a timely fashion.
               
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="862"
                Name="Missing Authorization"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software does not perform an authorization check when an actor attempts to access a resource or perform an action.</Description>
         <Extended_Description>
            Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.
            When access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="863"
                Name="Incorrect Authorization"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.</Description>
         <Extended_Description>
            Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.
            When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="88"
                Name="Argument Injection or Modification"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not sufficiently delimit the arguments being passed to a component in another control sphere, allowing alternate arguments to be provided, leading to potentially security-relevant changes.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="89"
                Name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.</Description>
         <Extended_Description>
            Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands.
            SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="90"
                Name="Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="91"
                Name="XML Injection (aka Blind XPath Injection)"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.</Description>
         <Extended_Description>Within XML, special elements could include reserved words or characters such as "&lt;", "&gt;", """, and "&amp;", which could then be used to add new data or modify XML syntax.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="916"
                Name="Use of Password Hash With Insufficient Computational Effort"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.</Description>
         <Extended_Description>
            Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash.
            Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker.
            There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack:
            
               
                  The amount of CPU time required to compute the hash ("stretching")
                  The amount of memory required to compute the hash ("memory-hard" operations)
                  Including a random value, along with the password, as input to the hash computation ("salting")
                  Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs ("one-way" hashing)
                  Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs ("collision resistance")
               
            
            Note that the security requirements for the software may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="921"
                Name="Storage of Sensitive Data in a Mechanism without Access Control"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software stores sensitive information in a file system or device that does not have built-in access control.</Description>
         <Extended_Description>
            While many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data.
            On Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="922"
                Name="Insecure Storage of Sensitive Information"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software stores sensitive information without properly limiting read or write access by unauthorized actors.</Description>
         <Extended_Description>If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="923"
                Name="Improper Restriction of Communication Channel to Intended Endpoints"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.</Description>
         <Extended_Description>
            Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint.
            While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="924"
                Name="Improper Enforcement of Message Integrity During Transmission in a Communication Channel"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.</Description>
         <Extended_Description>A man-in-the-middle (MITM) attacker might be able to modify the message and spoof the endpoint.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="93"
                Name="Improper Neutralization of CRLF Sequences ('CRLF Injection')"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="939"
                Name="Improper Authorization in Handler for Custom URL Scheme"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.</Description>
         <Extended_Description>Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="94"
                Name="Improper Control of Generation of Code ('Code Injection')"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.</Description>
         <Extended_Description>
            When software allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution.
            Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="940"
                Name="Improper Verification of Source of a Communication Channel"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.</Description>
         <Extended_Description>When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="941"
                Name="Incorrectly Specified Destination in a Communication Channel"
                Abstraction="Base"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.</Description>
         <Extended_Description>
            Attackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service.
            There are at least two distinct weaknesses that can cause the software to communicate with an unintended destination:
            
               
                  If the software allows an attacker to control which destination is specified, then the attacker can cause it to connect to an untrusted or malicious destination. For example, because UDP is a connectionless protocol, UDP packets can be spoofed by specifying a false source address in the packet; when the server receives the packet and sends a reply, it will specify a destination by using the source of the incoming packet - i.e., the false source. The server can then be tricked into sending traffic to the wrong host, which is effective for hiding the real source of an attack and for conducting a distributed denial of service (DDoS). As another example, server-side request forgery (SSRF) and XML External Entity (XXE) can be used to trick a server into making outgoing requests to hosts that cannot be directly accessed by the attacker due to firewall restrictions.
                  If the software incorrectly specifies the destination, then an attacker who can control this destination might be able to spoof trusted servers. While the most common occurrence is likely due to misconfiguration by an administrator, this can be resultant from other weaknesses. For example, the software might incorrectly parse an e-mail or IP address and send sensitive data to an unintended destination. As another example, an Android application may use a "sticky broadcast" to communicate with a receiver for a particular application, but since sticky broadcasts can be processed by *any* receiver, this can allow a malicious application to access restricted data that was only intended for a different application.
               
            
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="942"
                Name="Overly Permissive Cross-domain Whitelist"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software uses a cross-domain policy file that includes domains that should not be trusted.</Description>
         <Extended_Description>
            A cross-domain policy file ("crossdomain.xml" in Flash and "clientaccesspolicy.xml" in Silverlight) defines a whitelist of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.
            Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.
            An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.
            In many cases, the attack can be launched without the victim even being aware of it.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="943"
                Name="Improper Neutralization of Special Elements in Data Query Logic"
                Abstraction="Class"
                Structure="Simple"
                Status="Incomplete">
         <Description>The application generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.</Description>
         <Extended_Description>
            Depending on the capabilities of the query language, an attacker could inject additional logic into the query to:
            
               
                  Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated
                  Append additional commands to the query
                  Return more entities than intended
                  Return fewer entities than intended
                  Cause entities to be sorted in an unexpected way
               
            
            The ability to execute additional commands or change which entities are returned has obvious risks. But when the application logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the application query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.
            While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and "NoSQL" languages.
         </Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="95"
                Name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')"
                Abstraction="Variant"
                Structure="Simple"
                Status="Incomplete">
         <Description>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. "eval").</Description>
         <Extended_Description>This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="96"
                Name="Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="97"
                Name="Improper Neutralization of Server-Side Includes (SSI) Within a Web Page"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The software generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.</Description>
         <Extended_Description/>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="98"
                Name="Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')"
                Abstraction="Variant"
                Structure="Simple"
                Status="Draft">
         <Description>The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in "require," "include," or similar functions.</Description>
         <Extended_Description>In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.</Extended_Description>
      </Weakness>
      <Weakness seq="1999-0001"
                type="CAN"
                ID="99"
                Name="Improper Control of Resource Identifiers ('Resource Injection')"
                Abstraction="Base"
                Structure="Simple"
                Status="Draft">
         <Description>The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.</Description>
         <Extended_Description>
            A resource injection issue occurs when the following two conditions are met:
            
               
                  An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.
                  By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.
               
            
            This may enable an attacker to access or modify otherwise protected system resources.
         </Extended_Description>
      </Weakness>
   </Weaknesses>
</Weakness_Catalog>
