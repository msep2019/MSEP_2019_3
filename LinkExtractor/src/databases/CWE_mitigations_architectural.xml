<?xml version="1.0" encoding="utf-8"?>
<Weakness_Catalog xmlns:cwe="http://cwe.mitre.org/cwe-6">
   <Weaknesses>
      <Weakness seq="1999-0001" type="CAN" ID="114" Name="Process Control" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="117" Name="Improper Output Neutralization for Logs" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="138" Name="Improper Neutralization of Special Elements" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their software system. One defense is to create a whitelist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the whitelist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="15" Name="External Control of System or Configuration Setting" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.</Description>
            </Mitigation>
            <Mitigation>
               <Description>In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="150" Name="Improper Neutralization of Escape, Meta, or Control Sequences" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="20" Name="Improper Input Validation" Abstraction="Class" Structure="Simple" Status="Usable">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
                  Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.
                  Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="201" Name="Information Exposure Through Sent Data" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Setup default error messages so that unexpected errors do not disclose sensitive information.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="208" Name="Information Exposure Through Timing Discrepancy" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="209" Name="Information Exposure Through an Error Message" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Handle exceptions internally and do not display errors containing potentially sensitive information to a user.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Create default error pages or messages that do not leak any information.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="210" Name="Information Exposure Through Self-generated Error Message" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="211" Name="Information Exposure Through Externally-Generated Error Message" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Handle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary.</Description>
            </Mitigation>
            <Mitigation>
               <Description>The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="212" Name="Improper Cross-boundary Removal of Sensitive Data" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="214" Name="Information Exposure Through Process Environment" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="219" Name="Sensitive Data Under Web Root" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing information under the web root directory.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="220" Name="Sensitive Data Under FTP Root" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing information under the FTP root directory.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="223" Name="Omission of Security-relevant Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="224" Name="Obscured Security-relevant Information by Alternate Name" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="243" Name="Creation of chroot Jail Without Changing Working Directory" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="250" Name="Execution with Unnecessary Privileges" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="256" Name="Unprotected Storage of Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.</Description>
            </Mitigation>
            <Mitigation>
               <Description>A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="257" Name="Storing Passwords in a Recoverable Format" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use strong, non-reversible encryption to protect stored passwords.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="258" Name="Empty Password in Configuration File" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use "similar-looking" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="259" Name="Use of Hard-coded Password" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a "first login" mode that requires the user to enter a unique strong password.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.
                  Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For front-end to back-end connections: Three solutions are possible, although none are complete.
                  
                     The first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.
                     Next, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.
                     Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks.
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="260" Name="Password in Configuration File" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="261" Name="Weak Cryptography for Passwords" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="262" Name="Not Using Password Aging" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>The recommendation that users change their passwords regularly and do not reuse passwords is universal among security experts. In order to enforce this, it is useful to have a password aging mechanism that notifies users when passwords are considered old and that requests that they replace them with new, strong passwords. In order for this functionality to be useful, however, it must be accompanied with documentation which stresses how important this practice is and which makes the entire process as simple as possible for the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="263" Name="Password Aging with Long Expiration" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that password aging is limited so that there is a defined maximum age for passwords and so that the user is notified several times leading up to the password expiration.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="266" Name="Incorrect Privilege Assignment" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="267" Name="Privilege Defined With Unsafe Actions" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="268" Name="Privilege Chaining" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="269" Name="Improper Privilege Management" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Follow the principle of least privilege when assigning access rights to entities in a software system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="270" Name="Privilege Context Switching Error" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="271" Name="Privilege Dropping / Lowering Errors" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="272" Name="Least Privilege Violation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Follow the principle of least privilege when assigning access rights to entities in a software system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="273" Name="Improper Check for Dropped Privileges" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Check the results of all functions that return a value and verify that the value is expected.</Description>
            </Mitigation>
            <Mitigation>
               <Description>In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="274" Name="Improper Handling of Insufficient Privileges" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="276" Name="Incorrect Default Permissions" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="277" Name="Insecure Inherited Permissions" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="279" Name="Incorrect Execution-Assigned Permissions" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="280" Name="Improper Handling of Insufficient Permissions or Privileges " Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="281" Name="Improper Preservation of Permissions" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="282" Name="Improper Ownership Management" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="283" Name="Unverified Ownership" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="284" Name="Improper Access Control" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="285" Name="Improper Authorization" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.
                  One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="286" Name="Incorrect User Management" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="287" Name="Improper Authentication" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an authentication framework or library such as the OWASP ESAPI Authentication feature.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="288" Name="Authentication Bypass Using an Alternate Path or Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="289" Name="Authentication Bypass by Alternate Name" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="290" Name="Authentication Bypass by Spoofing" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="291" Name="Reliance on IP Address for Authentication" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="293" Name="Using Referer Field for Authentication" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="294" Name="Authentication Bypass by Capture-replay" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="295" Name="Improper Certificate Validation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="296" Name="Improper Following of a Certificate's Chain of Trust" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper certificate checking is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="297" Name="Improper Validation of Certificate with Host Mismatch" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="298" Name="Improper Validation of Certificate Expiration" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="299" Name="Improper Check for Certificate Revocation" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that certificates are checked for revoked status.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="300" Name="Channel Accessible by Non-Endpoint ('Man-in-the-Middle')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always fully authenticate both ends of any communications channel.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Adhere to the principle of complete mediation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>A certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="301" Name="Reflection Attack in an Authentication Protocol" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Let the initiator prove its identity before proceeding.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="302" Name="Authentication Bypass by Assumed-Immutable Data" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="303" Name="Incorrect Implementation of Authentication Algorithm" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="304" Name="Missing Critical Step in Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="305" Name="Authentication Bypass by Primary Weakness" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="306" Name="Missing Authentication for Critical Function" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.
                  Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.
                  In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Where possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These may make it easier to provide a clear separation between authentication tasks and authorization tasks.
                  In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="307" Name="Improper Restriction of Excessive Authentication Attempts" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Common protection mechanisms include:
                  
                     
                        Disconnecting the user after a small number of failed attempts
                        Implementing a timeout
                        Locking out a targeted account
                        Requiring a computational task on the user's part.
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45]
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="308" Name="Use of Single-factor Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="311" Name="Missing Encryption of Sensitive Data" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:
                  
                     
                        Encryption that is needed to store or transmit private data of the users of the system
                        Encryption that is needed to protect the system itself from unauthorized disclosure or tampering
                     
                  
                  Identify the separate needs and contexts for encryption:
                  
                     
                        One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the software) does not need to have access to a private key.
                        Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.
                     
                  
                  Using threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.
                  For example, US government systems require FIPS 140-2 certification.
                  Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.
                  Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="312" Name="Cleartext Storage of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="313" Name="Cleartext Storage in a File or on Disk" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="314" Name="Cleartext Storage in the Registry" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="315" Name="Cleartext Storage of Sensitive Information in a Cookie" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="316" Name="Cleartext Storage of Sensitive Information in Memory" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="317" Name="Cleartext Storage of Sensitive Information in GUI" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="318" Name="Cleartext Storage of Sensitive Information in Executable" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="319" Name="Cleartext Transmission of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Encrypt the data with a reliable encryption scheme before transmitting.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="321" Name="Use of Hard-coded Cryptographic Key" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Prevention schemes mirror that of hard-coded password storage.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="322" Name="Key Exchange without Entity Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper authentication is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="323" Name="Reusing a Nonce, Key Pair in Encryption" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refuse to reuse nonce values.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="324" Name="Use of a Key Past its Expiration Date" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="325" Name="Missing Required Cryptographic Step" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="326" Name="Inadequate Encryption Strength" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a cryptographic algorithm that is currently considered to be strong by experts in the field.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="327" Name="Use of a Broken or Risky Cryptographic Algorithm" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.
                  For example, US government systems require FIPS 140-2 certification.
                  Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.
                  Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Design the software so that one cryptographic algorithm can be replaced with another. This will make it easier to upgrade to stronger algorithms.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Industry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="328" Name="Reversible One-Way Hash" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="330" Name="Use of Insufficiently Random Values" Abstraction="Class" Structure="Simple" Status="Usable">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.
                  In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.
                  Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="331" Name="Insufficient Entropy" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="332" Name="Insufficient Entropy in PRNG" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider a PRNG that re-seeds itself as needed from high-quality pseudo-random output, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When deciding which PRNG to use, look at its sources of entropy. Depending on what your security needs are, you may need to use a random number generator that always uses strong random data -- i.e., a random number generator that attempts to be strong but will fail in a weak way or will always provide some middle ground of protection through techniques like re-seeding. Generally, something that always provides a predictable amount of strength is preferable.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="333" Name="Improper Handling of Insufficient Entropy in TRNG" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="334" Name="Small Space of Random Values" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="335" Name="Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="336" Name="Same Seed in Pseudo-Random Number Generator (PRNG)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="337" Name="Predictable Seed in Pseudo-Random Number Generator (PRNG)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use non-predictable inputs for seed generation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="338" Name="Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="339" Name="Small Seed Space in PRNG" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="341" Name="Predictable from Observable State" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Increase the entropy used to seed a PRNG.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="345" Name="Insufficient Verification of Data Authenticity" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="346" Name="Origin Validation Error" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="347" Name="Improper Verification of Cryptographic Signature" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="349" Name="Acceptance of Extraneous Untrusted Data With Trusted Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="352" Name="Cross-Site Request Forgery (CSRF)" Abstraction="Compound" Structure="Composite" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]
                  Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]</Description>
            </Mitigation>
            <Mitigation>
               <Description>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use the "double-submitted cookie" method as described by Felten and Zeller:
                  When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.
                  Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.
                  This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use the GET method for any request that triggers a state change.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="353" Name="Missing Support for Integrity Check" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="354" Name="Improper Validation of Integrity Check Value" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="359" Name="Exposure of Private Information ('Privacy Violation')" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="370" Name="Missing Check for Certificate Revocation after Initial Check" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="384" Name="Session Fixation" Abstraction="Compound" Structure="Composite" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Invalidate any existing session identifiers prior to authorizing a new user session.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="390" Name="Detection of Error Condition Without Action" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Subject the software to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="391" Name="Unchecked Error Condition" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.</Description>
            </Mitigation>
            <Mitigation>
               <Description>A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="392" Name="Missing Report of Error Condition" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="403" Name="Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="419" Name="Unprotected Primary Channel" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not expose administrative functionnality on the user UI.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Protect the administrative/restricted functionality with a strong authentication mechanism.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="420" Name="Unprotected Alternate Channel" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="425" Name="Direct Request ('Forced Browsing')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider using MVC based frameworks such as Struts.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="426" Name="Untrusted Search Path" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="434" Name="Unrestricted Upload of File with Dangerous Type" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that "filename.php.gif" is fed to the PHP interpreter.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation>
               <Description>When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="441" Name="Unintended Proxy or Intermediary ('Confused Deputy')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Enforce the use of strong mutual authentication mechanism between the two parties.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="460" Name="Improper Cleanup on Thrown Exception" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="472" Name="External Control of Assumed-Immutable Web Parameter" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="473" Name="PHP External Variable Modification" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="488" Name="Exposure of Data Element to Wrong Session" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).</Description>
            </Mitigation>
            <Mitigation>
               <Description>In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="494" Name="Download of Code Without Integrity Check" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform proper forward and reverse DNS lookups to detect DNS spoofing.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Encrypt the code with a reliable encryption scheme before transmitting.
                  This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code.
                  
                     
                        When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.
                        Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="502" Name="Deserialization of Untrusted Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Explicitly define a final object() to prevent deserialization.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Make fields transient to protect them from deserialization.
                  An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Whitelist acceptable classes. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="521" Name="Weak Password Requirements" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Enforce usage of strong passwords. A password strength policy should contain the following attributes:
                  
                     
                        Minimum and maximum length;
                        Require mixed character sets (alpha, numeric, special, mixed case);
                        Do not contain user name;
                        Expiration;
                        No password reuse.
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Authentication mechanisms should always require sufficiently complex passwords and require that they be periodically changed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="522" Name="Insufficiently Protected Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an appropriate security mechanism to protect the credentials.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make appropriate use of cryptography to protect the credentials.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="523" Name="Unprotected Transport of Credentials" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="527" Name="Exposure of CVS Repository to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="528" Name="Exposure of Core Dump File to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect the core dump files from unauthorized access.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="529" Name="Exposure of Access Control List Files to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect access control list files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="530" Name="Exposure of Backup File to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="532" Name="Inclusion of Sensitive Information in Log Files" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Remove debug log files before deploying the application into production.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Protect log files against unauthorized read/write.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Adjust configurations appropriately when software is transitioned from a debug state to production.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="538" Name="File and Directory Information Exposure" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not expose file and directory information to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="544" Name="Missing Standardized Error Handling Mechanism" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="550" Name="Information Exposure Through Server Error Message" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="551" Name="Incorrect Behavior Order: Authorization Before Parsing and Canonicalization" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="552" Name="Files or Directories Accessible to External Parties" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="565" Name="Reliance on Cookies without Validation and Integrity Checking" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Add integrity checks to detect tampering.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="566" Name="Authorization Bypass Through User-Controlled SQL Primary Key" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an "accept known good" validation strategy.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="579" Name="J2EE Bad Practices: Non-serializable Object Stored in Session" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>In order for session replication to work, the values the application stores as attributes in the session must implement the Serializable interface.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="59" Name="Improper Link Resolution Before File Access ('Link Following')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Follow the principle of least privilege when assigning access rights to entities in a software system.
                  Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="593" Name="Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language or a library that provides a cryptography framework at a higher level of abstraction.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Most SSL_CTX functions have SSL counterparts that act on SSL-type objects.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Applications should set up an SSL_CTX completely, before creating SSL objects from it.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="599" Name="Missing Validation of OpenSSL Certificate" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper authentication is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="6" Name="J2EE Misconfiguration: Insufficient Session-ID Length" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.</Description>
            </Mitigation>
            <Mitigation>
               <Description>A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="601" Name="URL Redirection to Untrusted Site ('Open Redirect')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  Use a whitelist of approved URLs or domains to be used for redirection.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
                  For example, ID 1 could map to "/login.asp" and ID 2 could map to "http://www.example.com/". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
                  Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="602" Name="Client-Side Enforcement of Server-Side Security" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
                  Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="603" Name="Use of Client-Side Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not rely on client side data. Always perform server side authentication.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="610" Name="Externally Controlled Reference to a Resource in Another Sphere" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="611" Name="Improper Restriction of XML External Entity Reference" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many XML parsers and validators can be configured to disable external entity expansion.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="613" Name="Insufficient Session Expiration" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Set sessions/credentials expiration date.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="620" Name="Unverified Password Change" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When prompting for a password change, force the user to provide the original password in addition to the new password.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use "forgotten password" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="639" Name="Authorization Bypass Through User-Controlled Key" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="640" Name="Weak Password Recovery Mechanism for Forgotten Password" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use standard weak security questions and use several security questions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Assign a new temporary password rather than revealing the original password.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="641" Name="Improper Restriction of Names for Files and Other Resources" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not allow users to control names of resources used on the server side.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform whitelist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="642" Name="External Control of Critical State Data" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Store state information and sensitive data on the server side only.
                  Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.
                  If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  With a stateless protocol such as HTTP, use some frameworks can maintain the state for you.
                  Examples include ASP.NET View State and the OWASP ESAPI Session Management feature.
                  Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="643" Name="Improper Neutralization of Data within XPath Expressions ('XPath Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="645" Name="Overly Restrictive Account Lockout Mechanism" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="647" Name="Use of Non-Canonical URL Paths for Authorization Decisions" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Reject all alternate path encodings that are not in the expected canonical form.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="649" Name="Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="652" Name="Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use parameterized queries. This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="653" Name="Insufficient Compartmentalization" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Break up privileges between different modules, objects or entities. Minimize the interfaces between modules and require strong access control between them.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="656" Name="Reliance on Security Through Obscurity" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="668" Name="Exposure of Resource to Wrong Sphere" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="669" Name="Incorrect Resource Transfer Between Spheres" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="671" Name="Lack of Administrator Control over Security" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="673" Name="External Influence of Sphere Definition" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="703" Name="Improper Check or Handling of Exceptional Conditions" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="707" Name="Improper Enforcement of Message or Data Structure" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="708" Name="Incorrect Ownership Assignment" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Periodically review the privileges and their owners.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated tools to check for privilege settings.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="73" Name="External Control of File Name or Path" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap provide this capability.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.
                  Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="732" Name="Incorrect Permission Assignment for Critical Resource" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="74" Name="Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter control-plane syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="75" Name="Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter special element syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="754" Name="Improper Check for Unusual or Exceptional Conditions" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Check the results of all functions that return a value and verify that the value is expected.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
                  Exposing additional information to a potential attacker in the context of an exceptional condition can help the attacker determine what attack vectors are most likely to succeed beyond DoS.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use system limits, which should help to prevent resource exhaustion. However, the software should still handle low resource conditions since they may still occur.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="755" Name="Improper Handling of Exceptional Conditions" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="757" Name="Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="759" Name="Use of a One-Way Hash without a Salt" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="76" Name="Improper Neutralization of Equivalent Special Elements" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter equivalent special element syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="760" Name="Use of a One-Way Hash with a Predictable Salt" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="77" Name="Improper Neutralization of Special Elements used in a Command ('Command Injection')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If possible, ensure that all external commands called from the program are statically created.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Run time: Run time policy enforcement may be used in a whitelist fashion to prevent use of any non-sanctioned commands.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Assign permissions to the software system that prevents the user from accessing/opening privileged files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="770" Name="Allocation of Resources Without Limits or Throttling" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Mitigation of resource exhaustion attacks requires that the target system either:
                  
                     
                        recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays
                        uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.
                     
                  
                  The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.
                  The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that protocols have specific limits of scale placed on them.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.
                  Ensure that all failures in resource allocation place the system into a safe posture.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
                  When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
                  Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="778" Name="Insufficient Logging" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a centralized logging mechanism that supports multiple levels of detail. Ensure that all security-related successes and failures can be logged.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="779" Name="Logging of Excessive Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states "last message repeated X times" when recording repeated events.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the software. This may result in a denial-of-service to legitimate software users, but it will prevent the software from adversely impacting the entire system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Adjust configurations appropriately when software is transitioned from a debug state to production.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="78" Name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
                  Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When constructing OS command strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.
                  Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ";" and "&gt;" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.
                  Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
                  In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use runtime policy enforcement to create a whitelist of allowable commands, then prevent use of any command that does not appear in the whitelist. Technologies such as AppArmor are available to do this.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="780" Name="Use of RSA Algorithm without OAEP" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="782" Name="Exposed IOCTL with Insufficient Access Control" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>In Windows environments, use proper access control for the associated device or device namespace. See References.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="784" Name="Reliance on Cookies without Validation and Integrity Checking in a Security Decision" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Add integrity checks to detect tampering.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="79" Name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" Abstraction="Base" Structure="Simple" Status="Usable">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
                  For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
                  Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:
                  
                     
                        HTML body
                        Element attributes (such as src="XYZ")
                        URIs
                        JavaScript sections
                        Cascading Style Sheets and style property
                     
                  
                  etc. Note that HTML Entity Encoding is only appropriate for the HTML body.
                  Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.
                  Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon ("&lt;3") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the "&lt;" character, which would need to be escaped or otherwise handled. In this case, stripping the "&lt;" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.
                  Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.
                  Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="790" Name="Improper Filtering of Special Elements" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="791" Name="Incomplete Filtering of Special Elements" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="792" Name="Incomplete Filtering of One or More Instances of Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="793" Name="Only Filtering One Instance of a Special Element" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="794" Name="Incomplete Filtering of Multiple Instances of Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="795" Name="Only Filtering Special Elements at a Specified Location" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="796" Name="Only Filtering Special Elements Relative to a Marker" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="797" Name="Only Filtering Special Elements at an Absolute Position" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="798" Name="Use of Hard-coded Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].
                  In Windows environments, the Encrypted File System (EFS) may provide some protection.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a "first login" mode that requires the user to enter a unique strong password or key.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.
                  Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For front-end to back-end connections: Three solutions are possible, although none are complete.
                  
                     
                        The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.
                        Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.
                        Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.
                     
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="807" Name="Reliance on Untrusted Inputs in a Security Decision" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Store state information and sensitive data on the server side only.
                  Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.
                  If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  With a stateless protocol such as HTTP, use a framework that maintains the state for you.
                  Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].
                  Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
                  Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="827" Name="Improper Control of Document Type Definition" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="829" Name="Inclusion of Functionality from Untrusted Control Sphere" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
                  For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.
                  This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
                  Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="830" Name="Inclusion of Web Functionality from an Untrusted Source" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="836" Name="Use of Password Hash Instead of Password for Authentication" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="841" Name="Improper Enforcement of Behavioral Workflow" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="862" Name="Missing Authorization" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.
                  One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="863" Name="Incorrect Authorization" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.
                  One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="88" Name="Argument Injection or Modification" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.
                  Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="89" Name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
                  Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using "exec" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
                  Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
                  Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When constructing SQL query strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.
                  Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name "O'Reilly" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the "'" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.
                  When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
                  In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="90" Name="Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="91" Name="XML Injection (aka Blind XPath Injection)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="916" Name="Use of Password Hash With Insufficient Computational Effort" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="921" Name="Storage of Sensitive Data in a Mechanism without Access Control" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="922" Name="Insecure Storage of Sensitive Information" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="923" Name="Improper Restriction of Communication Channel to Intended Endpoints" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="924" Name="Improper Enforcement of Message Integrity During Transmission in a Communication Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="93" Name="Improper Neutralization of CRLF Sequences ('CRLF Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using CRLF as a special sequence.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Appropriately filter or quote CRLF sequences in user-controlled input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="939" Name="Improper Authorization in Handler for Custom URL Scheme" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.
                  When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="94" Name="Improper Control of Generation of Code ('Code Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refactor your program so that you do not have to dynamically generate code.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your software.
                  Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  To reduce the likelihood of code injection, use stringent whitelists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="940" Name="Improper Verification of Source of a Communication Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using a man-in-the-middle attack.
                  When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="941" Name="Incorrectly Specified Destination in a Communication Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="942" Name="Overly Permissive Cross-domain Whitelist" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="943" Name="Improper Neutralization of Special Elements in Data Query Logic" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="95" Name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If possible, refactor your code so that it does not need to use eval() at all.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.
                  Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="96" Name="Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform proper output validation and escaping to neutralize all code syntax from data written to code files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="97" Name="Improper Neutralization of Server-Side Includes (SSI) Within a Web Page" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter server-side include syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="98" Name="Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
                  For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.
                  This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
                  Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
                  Often, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Set allow_url_fopen to false, which limits the ability to include files from remote locations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="99" Name="Improper Control of Resource Identifiers ('Resource Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
   </Weaknesses>
</Weakness_Catalog>