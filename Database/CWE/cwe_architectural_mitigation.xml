<?xml version="1.0" encoding="UTF-8"?>
<Weakness_Catalog xmlns:cwe="http://cwe.mitre.org/cwe-6">
   <Weaknesses>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="116" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="116" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="707" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their software system. One defense is to create a whitelist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the whitelist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="209" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="202" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="203" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="203" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="327" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="216" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="216" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing information under the web root directory.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="216" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing information under the FTP root directory.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="319" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="319" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="259" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use strong, non-reversible encryption to protect stored passwords.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="260" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="260" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="521" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use "similar-looking" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="798" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="798" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="321" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="257" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="326" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="326" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="309" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="263" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="324" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>The recommendation that users change their passwords regularly and do not reuse passwords is universal among security experts. In order to enforce this, it is useful to have a password aging mechanism that notifies users when passwords are considered old and that requests that they replace them with new, strong passwords. In order for this functionality to be useful, however, it must be accompanied with documentation which stresses how important this practice is and which makes the entire process as simple as possible for the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that password aging is limited so that there is a defined maximum age for passwords and so that the user is notified several times leading up to the password expiration.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="286" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="271" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="271" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="271" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="271" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="252" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="271" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="280" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="282" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="282" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an authentication framework or library such as the OWASP ESAPI Authentication feature.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="420" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="425" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="290" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="290" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="290" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="290" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="322" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper certificate checking is included in the system design.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that certificates are checked for revoked status.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always fully authenticate both ends of any communications channel.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="327" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="807" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.
                  Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.
                  In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="799" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Common protection mechanisms include:
                  
                     
                        Disconnecting the user after a small number of failed attempts
                        Implementing a timeout
                        Locking out a targeted account
                        Requiring a computational task on the user's part.
                     
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="654" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="309" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="922" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="922" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Encrypt the data with a reliable encryption scheme before transmitting.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="798" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="798" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Prevention schemes mirror that of hard-coded password storage.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="295" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper authentication is included in the system design.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="344" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refuse to reuse nonce values.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="298" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="358" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a cryptographic algorithm that is currently considered to be strong by experts in the field.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="311" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.
                  For example, US government systems require FIPS 140-2 certification.
                  Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.
                  Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="326" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="327" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses/>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.
                  In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.
                  Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="331" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="331" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="331" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="331" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use non-predictable inputs for seed generation.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="341" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Increase the entropy used to seed a PRNG.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="441" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="613" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]
                  Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="354" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="353" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="299" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="299" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="296" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="297" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="298" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="699"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="472" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="441" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Invalidate any existing session identifiers prior to authorizing a new user session.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="401" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="684" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="402" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="402" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not expose administrative functionnality on the user UI.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="862" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="862" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="862" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="288" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="288" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="424" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="424" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="471" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="673" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="427" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="428" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1003"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="351" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="436" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="430" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Enforce the use of strong mutual authentication mechanism between the two parties.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="459" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1003"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="79" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform proper forward and reverse DNS lookups to detect DNS spoofing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="915" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Enforce usage of strong passwords. A password strength policy should contain the following attributes:
                  
                     
                        Minimum and maximum length;
                        Require mixed character sets (alpha, numeric, special, mixed case);
                        Do not contain user name;
                        Expiration;
                        No password reuse.
                     
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an appropriate security mechanism to protect the credentials.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="312" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect the core dump files from unauthorized access.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect access control list files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not expose file and directory information to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="696" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="602" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="639" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="639" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an "accept known good" validation strategy.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>In order for session replication to work, the values the application stores as attributes in the session must implement the Serializable interface.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Follow the principle of least privilege when assigning access rights to entities in a software system.
                  Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="666" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language or a library that provides a cryptography framework at a higher level of abstraction.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper authentication is included in the system design.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="334" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  Use a whitelist of approved URLs or domains to be used for redirection.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="471" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="290" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="300" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
                  Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="602" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="300" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not rely on client side data. Always perform server side authentication.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1003"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="441" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many XML parsers and validators can be configured to disable external entity expansion.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1003"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Set sessions/credentials expiration date.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When prompting for a password change, force the user to provide the original password in addition to the new password.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="99" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="99" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not allow users to control names of resources used on the server side.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="91" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="91" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="91" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="91" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use parameterized queries. This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Break up privileges between different modules, objects or entities. Minimize the interfaces between modules and require strong access control between them.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="259" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="321" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="472" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses/>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses/>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="282" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="282" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="345" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Periodically review the privileges and their owners.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="434" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="59" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap provide this capability.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="707" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="116" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="916" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="916" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="75" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="75" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="916" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="916" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="223" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="223" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a centralized logging mechanism that supports multiple levels of detail. Ensure that all security-related successes and failures can be logged.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states "last message repeated X times" when recording repeated events.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="88" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="327" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="749" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="749" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="781" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>In Windows environments, use proper access control for the associated device or device namespace. See References.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="807" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="565" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="565" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="494" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="352" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="790" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="790" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="791" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="791" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="792" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="792" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="792" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="792" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="791" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="791" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="795" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="795" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="795" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="795" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="344" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="671" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="257" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].
                  In Windows environments, the Encrypted File System (EFS) may provide some protection.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Store state information and sensitive data on the server side only.
                  Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.
                  If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="829" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="776" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="829" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="829" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="602" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="327" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="327" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="327" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="922" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="922" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="117" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using CRLF as a special sequence.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="862" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="862" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.
                  When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refactor your program so that you do not have to dynamically generate code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using a man-in-the-middle attack.
                  When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="406" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="183" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="94" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="94" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If possible, refactor your code so that it does not need to use eval() at all.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="94" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="94" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="96" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="96" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter server-side include syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="829" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="829" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="94" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="94" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="426" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="216" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="73" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
   </Weaknesses>
</Weakness_Catalog>
