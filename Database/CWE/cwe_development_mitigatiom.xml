<?xml version="1.0" encoding="UTF-8"?>
<Weakness_Catalog xmlns:cwe="http://cwe.mitre.org/cwe-6">
   <Weaknesses>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Leverage the HttpOnly flag when setting a sensitive cookie in a response.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="451" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="451" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a browser that displays Punycode for IDNs in the URL and status bars, or which color code various scripts in URLs.
                  Due to the prominence of homoglyph attacks, several browsers now help safeguard against this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will display IDNs as Punycode if top-level domains do not restrict which characters can be used in domain names or if labels mix scripts for different languages.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="694" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="441" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="451" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="451" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content.
                  The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for whitelisting and allowing frames from multiple domains.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="266" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="266" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Specify in the design that any linked external document must not be granted access to the location object of the calling page.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="697" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="697" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="697" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="697" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="697" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="697" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement the validate() method and call super.validate() within that method.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1038" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1038" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="435" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="758" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="697" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that all forms extend one of the Validation Classes.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1176" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1176" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1093" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1093" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1176" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1176" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1176" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1176" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that you validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1059" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1059" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1093" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1093" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="662" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="662" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an input validation framework such as Struts.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1176" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1176" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1176" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1176" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1071" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1071" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove the unused Validation Form from the validation.xml file.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1164" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1164" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1093" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1093" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="697" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Map every Action Form to a corresponding validation form.
                  An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1093" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1093" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="821" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="821" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that an action form mapping enables validation. Set the validate field to true.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="772" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="820" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="820" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="215" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="758" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="758" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="1105" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="758" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="758" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement error handling around the JNI call.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1059" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1059" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1059" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1059" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1059" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1059" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1059" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1059" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Always validate XML input against a known XML Schema or DTD.
                  It is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1120" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="93" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="79" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Construct HTTP headers very carefully, avoiding the use of non-validated input data.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="436" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="436" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="707" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="74" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.
                  Alternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="116" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="116" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Properly use provided input validation frameworks.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="118" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.
                  Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="756" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="123" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.
                  Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="788" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="788" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="787" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="787" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.
                  For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="788" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="788" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="787" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="787" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Pre-design: Use a language or compiler that performs automatic bounds checking.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="134" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language that provides appropriate memory abstractions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="786" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="786" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="787" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="787" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Requirements specification: The choice could be made to use a language that is not susceptible to these issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="125" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="125" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="788" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="788" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="125" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="125" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="786" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="786" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="190" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Requirements specification: The choice could be made to use a language that is not susceptible to these issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="823" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="789" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="260" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="240" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="805" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="119" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts "&amp;" characters to "&amp;amp;" for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="123" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Choose a language that is not subject to this flaw.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always verify the length of the string unit character.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="707" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their software system. One defense is to create a whitelist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the whitelist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="733" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="733" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Store the sensitive data in a "volatile" memory location if available.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="93" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="93" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="140" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that inter-expression and inter-command delimiters will be injected/removed/manipulated in the input vectors of their software system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that leading characters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that comments will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that variable name delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that wildcard or matching elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that grouping elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that leading special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="160" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="160" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that trailing special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="162" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="162" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="164" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="164" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="159" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="159" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that special elements will be removed in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="159" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="159" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that extra special elements will be injected in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="159" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="159" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="707" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="120" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="126" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="147" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="464" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="463" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="707" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="172" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="172" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="289" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="172" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="172" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="675" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="172" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="172" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="172" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="172" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="172" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="172" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1003"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="433" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="289" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="696" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="179" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="179" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being filtered.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="33" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="34" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="35" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="697" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="434" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1023" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="79" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="78" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="434" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Combine use of blacklist with appropriate use of whitelists.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="697" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="187" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="182" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="185" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="185" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="184" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="183" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject your regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor your regular expression.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1023" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1105" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="435" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>In flat address space situations, never allow computing memory addresses as offsets from another memory address.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="681" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>A language which throws exceptions on ambiguous data casts might be chosen.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="617" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="170" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf().</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="681" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="681" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform sanity checks after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="681" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="681" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="681" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="681" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="124" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="120" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Choose a language which is not subject to these casting flaws.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="681" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="681" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="195" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="196" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="192" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="194" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="188" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="209" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="202" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="359" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>This is a complex topic. See the book Translucent Databases for a good discussion of best practices.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="203" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="203" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="203" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="203" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="205" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="205" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Setup generic response pages for error condition. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="205" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="205" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="203" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="203" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="327" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not leave debug statements that could be executed in the source code. Assure that all debug information is eradicated before releasing the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="216" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="216" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing information under the web root directory.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="216" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing information under the FTP root directory.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="459" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="212" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="707" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="228" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="228" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="22" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="22" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="229" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="229" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="229" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="229" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="120" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="229" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="229" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="228" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="228" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="233" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="233" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>This issue can be simply combated with the use of proper build process.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="233" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="233" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="233" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="233" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="228" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="228" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="237" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="237" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="237" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="237" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="404" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="237" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="237" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="707" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="228" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="228" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="226" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="226" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="669" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use framework method calls instead of using sockets directly.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="705" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1003"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="476" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Check the results of all functions that return a value and verify that the value is expected.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language or compiler that uses exceptions and requires the catching of those exceptions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="319" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="319" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="259" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use strong, non-reversible encryption to protect stored passwords.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="260" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="260" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="521" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use "similar-looking" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="798" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="798" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="321" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="257" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="326" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="326" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="309" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="263" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="324" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>The recommendation that users change their passwords regularly and do not reuse passwords is universal among security experts. In order to enforce this, it is useful to have a password aging mechanism that notifies users when passwords are considered old and that requests that they replace them with new, strong passwords. In order for this functionality to be useful, however, it must be accompanied with documentation which stresses how important this practice is and which makes the entire process as simple as possible for the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that password aging is limited so that there is a defined maximum age for passwords and so that the user is notified several times leading up to the password expiration.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="286" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="271" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="271" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="271" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="271" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="252" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="271" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="280" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="732" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="282" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="282" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an authentication framework or library such as the OWASP ESAPI Authentication feature.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="420" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="425" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="290" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="290" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="290" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="290" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="322" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper certificate checking is included in the system design.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that certificates are checked for revoked status.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always fully authenticate both ends of any communications channel.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="327" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="807" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.
                  Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.
                  In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="799" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Common protection mechanisms include:
                  
                     
                        Disconnecting the user after a small number of failed attempts
                        Implementing a timeout
                        Locking out a targeted account
                        Requiring a computational task on the user's part.
                     
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="654" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="309" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="654" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="308" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  In order to protect password systems from compromise, the following should be noted:
                  
                     
                        Passwords should be stored safely to prevent insider attack and to ensure that -- if a system is compromised -- the passwords are not retrievable. Due to password reuse, this information may be useful in the compromise of other systems these users work with. In order to protect these passwords, they should be stored encrypted, in a non-reversible state, such that the original text password cannot be extracted from the stored value.
                        Password aging should be strictly enforced to ensure that passwords do not remain unchanged for long periods of time. The longer a password remains in use, the higher the probability that it has been compromised. For this reason, passwords should require refreshing periodically, and users should be informed of the risk of passwords which remain in use for too long.
                        Password strength should be enforced intelligently. Rather than restrict passwords to specific content, or specific length, users should be encouraged to use upper and lower case letters, numbers, and symbols in their passwords. The system should also ensure that no passwords are derived from dictionary words.
                     
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="922" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="922" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="312" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Encrypt the data with a reliable encryption scheme before transmitting.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="798" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="798" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Prevention schemes mirror that of hard-coded password storage.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="295" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper authentication is included in the system design.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="344" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refuse to reuse nonce values.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="298" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="358" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a cryptographic algorithm that is currently considered to be strong by experts in the field.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="311" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.
                  For example, US government systems require FIPS 140-2 certification.
                  Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.
                  Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="326" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="327" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>It is important to properly initialize CBC operating block ciphers or their utility is lost.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses/>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.
                  In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.
                  Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="331" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="331" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="331" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="331" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use non-predictable inputs for seed generation.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="335" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="341" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Increase the entropy used to seed a PRNG.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Increase the entropy used to seed a PRNG.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Increase the entropy used to seed a PRNG.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="23" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="290" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="290" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="807" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="923" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="436" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="441" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="613" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]
                  Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="354" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="353" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="290" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="22" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="22" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Never trust or rely any of the information in an Event for security.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="367" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="367" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="59" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="362" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="362" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="415" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="416" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="123" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="367" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="367" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="364" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="366" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Variables that may be subject to race conditions should be locked before the switch statement starts and only unlocked after the statement ends.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="362" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="362" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="362" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="362" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="362" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="362" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="362" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="364" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="36" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="36" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="160" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="299" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="299" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="296" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="297" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="298" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Pass in data which should not be altered as constant or immutable.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Declare returned data which should not be altered as constant or immutable.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="377" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="377" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="36" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="36" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="705" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>The shutdown function should be a privileged function available only to a properly authorized administrative user</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>For EJB, use framework approaches for parallel execution, instead of using threads.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="699"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="472" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="441" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Invalidate any existing session identifiers prior to authorizing a new user session.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="514" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="514" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Whenever possible, specify implementation strategies that do not introduce time variances in operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="367" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="486" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="36" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="36" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="401" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="684" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="684" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="705" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="705" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="705" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="36" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="36" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="772" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="772" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.
                  For example, glibc in Linux provides protection against free of invalid pointers.
                  When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].
                  To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="402" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="402" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="619" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="619" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>An application must make resources available to a client commensurate with the client's access level.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>An application must make network resources available to a client commensurate with the client's access level.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="696" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="405" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="400" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="400" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not perform resource-intensive transactions for unauthenticated users and/or invalid requests.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="410" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use any access control that is offered by the functionality that is offering the lock.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a non-conflicting privilege scheme.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement a reliable lock mechanism.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="825" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="666" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="675" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="416" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="416" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="123" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Choose a language that provides automatic memory management.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="825" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1003"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="120" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="123" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Choose a language that provides automatic memory management.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not expose administrative functionnality on the user UI.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="162" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="420" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="420" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="362" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="362" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="420" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="420" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="360" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always verify and authenticate the source of the message.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="638" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Deploy different layers of protection to implement security in depth.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="862" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="862" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="862" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="288" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="288" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="424" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="424" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="471" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="673" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="427" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="428" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Properly quote the full search path before executing a program on the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="42" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="42" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="163" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="433" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="434" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform a type check before interpreting an object.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="433" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Handle all possible situations (e.g. error condition).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="364" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="364" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Turn off dangerous handlers when performing sensitive operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="219" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform a type check before interpreting files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1003"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="351" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="436" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="430" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="435" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="436" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="436" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="435" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="684" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Enforce the use of strong mutual authentication mechanism between the two parties.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="436" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="436" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="684" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="446" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="446" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="671" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform functionality testing before deploying the application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="446" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="446" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="446" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="446" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform extensive functionality testing of the UI. The UI should behave as specified.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="44" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="44" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="165" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="357" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="684" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="221" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="346" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform data validation (e.g. syntax, length, etc.) before interpreting the data.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1188" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1188" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Disable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="456" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="705" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="636" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="909" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="909" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="89" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="120" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="457" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="457" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Check that critical variables are initialized.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1187" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1187" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Assign all variables to an initial value.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="162" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="289" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="459" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="694" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a hash table instead of an alist.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="707" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="464" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="131" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use expressions such as "sizeof(*pointer)" instead of "sizeof(pointer)", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a platform with high-level memory abstractions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="682" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to "walk" from one pointer to the other and calculate the difference. Always sanity check this number.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refactor your code to avoid using reflection.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="758" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="758" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="754" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1023" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that there are no unaccounted for cases, when adjusting flow or values based on the value of a given variable. In switch statements, this can be accomplished through the use of the default label.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="828" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="828" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="663" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="663" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="123" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="670" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="480" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="480" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="697" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many IDEs and static analysis products will detect this problem.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="480" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="480" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many IDEs and static analysis products will detect this problem.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="670" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always use explicit block delimitation and use static-analysis technologies to enforce this practice.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="670" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1025" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove debug code before deploying the application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="162" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make the cloneable() method final.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="216" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1003"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="79" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform proper forward and reverse DNS lookups to detect DNS spoofing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Declare the method private.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not allow objects to modify private members of a class.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If you do make your classes clonable, ensure that your clone method is final and throw super.clone().</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="319" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>The application configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="161" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="493" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="493" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly identify the scope for all critical data elements, including whether they should be regarded as static.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="915" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="912" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="506" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="506" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Most antivirus software scans for Trojan Horses.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="507" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="507" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Antivirus software can help mitigate known malicious code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="507" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="507" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Antivirus software scans for viruses or worms.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="506" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="506" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always verify the integrity of the software that is being installed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="506" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="506" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always verify the integrity of the software that is being installed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="506" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="506" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use spyware detection and removal software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="912" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="514" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="514" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="163" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="289" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="266" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Run the application with limited privilege to the underlying operating and file system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Enforce usage of strong passwords. A password strength policy should contain the following attributes:
                  
                     
                        Minimum and maximum length;
                        Require mixed character sets (alpha, numeric, special, mixed case);
                        Do not contain user name;
                        Expiration;
                        No password reuse.
                     
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an appropriate security mechanism to protect the credentials.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="312" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect information stored in cache.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="524" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="524" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect information stored in cache.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect information stored in environment variable from being exposed to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect the core dump files from unauthorized access.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect access control list files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="165" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="540" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="540" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove test code before deploying the application into production.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="210" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="210" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="210" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="210" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="210" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="210" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not expose sensitive error information to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not expose file and directory information to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not store sensitive information in persistent cookies.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="162" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="540" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="540" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not store sensitive information in include files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="820" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="820" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use the Thread-Specific Storage Pattern. See References.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove comments that suggest the presence of bugs, incomplete functionality, or weaknesses, before deploying the application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1078" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using hard-coded constants. Configuration files offer a more flexible solution.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="209" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="696" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove any Shells accessible under the web root folder and children directories.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1173" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that:
                  
                     
                        Phone number fields contain only valid characters in phone numbers
                        Boolean values are only "T" or "F"
                        Free-form strings are of a reasonable length and composition
                     
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="522" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not hardwire passwords into your software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="266" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use the least privilege principle.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="663" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Using names for security purposes is not advised. Names are easy to forge and can have overlapping user IDs, potentially causing confusion or impersonation.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="155" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="687" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use umask() with the correct argument.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1164" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1164" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove dead code before deploying the application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="758" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="758" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="672" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="825" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use static analysis tools to spot return of the address of a stack variable.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1164" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1164" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove unused variables from the code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="89" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="89" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="89" View_ID="928"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>A non-SQL style database which is not subject to this flaw may be chosen.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="602" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="639" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="639" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an "accept known good" validation strategy.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="820" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="488" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="459" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Call the super.finalize() method.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="561" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="561" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use Static Analysis tools to spot such conditions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="561" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="561" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use Static Analysis tools to spot such conditions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="821" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="821" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use the start() method instead of the run() method.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="821" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="821" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use Synchronization Primitives when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use AWT/Swing when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="695" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use Java I/O when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use Sockets when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use the Class Loader when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>In order for session replication to work, the values the application stores as attributes in the session must implement the Serializable interface.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="41" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Disable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Call super.clone() within your clone() method, when obtaining a new object.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="697" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Both Equals() and Hashcode() should be defined.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>In most situations the array should be made private.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="705" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use a return statement inside the finally block. The finally block should have "cleanup" code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1071" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1071" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1076" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="344" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="758" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Never set a pointer to a fixed address.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="704" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="758" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>The choice could be made to use a language that is not susceptible to these issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="474" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="474" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always test your code on any platform on which it is targeted to run on.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Follow the principle of least privilege when assigning access rights to entities in a software system.
                  Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="762" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="123" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="413" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="413" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="666" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language or a library that provides a cryptography framework at a higher level of abstraction.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1025" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="595" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="595" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="480" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="480" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use equals() to compare strings.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When sensitive information is sent, use of the POST method is recommended (e.g. registration form).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="295" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper authentication is included in the system design.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="334" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="248" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="209" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="390" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement Exception blocks to handle all types of Exceptions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  Use a whitelist of approved URLs or domains to be used for redirection.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="471" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="290" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="300" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
                  Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="602" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="300" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not rely on client side data. Always perform server side authentication.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="675" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="666" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Restrict server socket address to known local addresses.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="834" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use user-controlled data for loop conditions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="471" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect mutable objects by making them private. Restrict access to the getter and setter as well.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="367" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the "volatile" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="59" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="59" View_ID="699"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="362" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="340" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="216" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="386" View_ID="1000"/>
            <Related_Weaknesses Nature="Requires" CWE_ID="732" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1003"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="441" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many XML parsers and validators can be configured to disable external entity expansion.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="200" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1003"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Set sessions/credentials expiration date.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="311" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always set the secure attribute when the cookie should sent via HTTPS only.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="540" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="540" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="473" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use PHP 4 or later.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="670" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="670" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="749" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="402" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="402" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Close cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="59" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="59" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Follow the principle of least privilege when assigning access rights to entities in a software system.
                  Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When prompting for a password change, force the user to provide the original password in addition to the new password.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="914" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="914" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="471" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use whitelists of variable names that can be extracted.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that all arguments are verified, as defined by the API you are protecting.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="267" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="267" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="618" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>During development, do not mark it as safe for scripting.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \Q and \E in Perl.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="185" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="185" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="187" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="184" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="183" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When applicable, ensure that the regular expression marks beginning and ending string patterns, such as "/^string$/" for Perl.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="436" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="436" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove null bytes from all incoming strings.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="914" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="914" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="183" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refactor the code to avoid dynamic variable evaluation whenever possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="280" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Subdivide and allocate resources and components so that a failure in one part does not affect the entire product.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid complex security mechanisms when simpler ones would meet requirements. Avoid complex data models, and unnecessarily complex operations. Adopt architectures that provide guarantees, simplify understanding through elegance and abstraction, and that can be implemented similarly. Modularize, isolate and do not trust complex code, and apply other secure programming principles on these modules (e.g., least privilege) to mitigate vulnerabilities.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="862" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="59" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="59" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Follow the principle of least privilege when assigning access rights to entities in a software system.
                  Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="99" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="99" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not allow users to control names of resources used on the server side.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="91" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="91" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="116" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="116" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make decisions on the server side based on file content and not on file name or extension.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="59" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="59" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Follow the principle of least privilege when assigning access rights to entities in a software system.
                  Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="436" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="436" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Configure ACLs on the server side to ensure that proper level of access control is defined for each accessible resource representation.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="538" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="91" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="91" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use parameterized queries. This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Break up privileges between different modules, objects or entities. Minimize the interfaces between modules and require strong access control between them.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Where possible, perform human factors and usability studies to identify where your product's security mechanisms are difficult to use, and why.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="259" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="321" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="472" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="362" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="362" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use industry standard APIs to synchronize your code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="662" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use reentrant functions if available.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses/>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use Static analysis tools to check for unreleased resources.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, in Java, if the programmer does not explicitly initialize a variable, then the code could produce a compile-time error (if the variable is local) or automatically initialize the variable to the default value for the variable's type. In Perl, if explicit initialization is not performed, then a default value of undef is assigned, which is interpreted as 0, false, or an equivalent value depending on the context in which the variable is accessed.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Follow the resource's lifecycle from creation to release.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="662" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="662" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use industry standard APIs to implement locking mechanism.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="66" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="66" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Be familiar with the device names in the operating system where your system is deployed. Check input for these device names.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="657" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="666" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Limit the number of recursive calls to a reasonable number.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="586" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="102" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1177" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1177" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the "banned.h" include file from Microsoft's SDL. [REF-554] [REF-7]</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="704" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="704" View_ID="1003"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="682" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making conversion between numeric types. Always check for the allowed ranges.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="170" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, "not-a-number" calculations, and how your language handles numbers that are too large or too small for its underlying representation.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="628" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="628" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use the function, procedure, or routine as specified.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that your code strictly conforms to specifications.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="628" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="628" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the software. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="628" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="628" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the software. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="628" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="628" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="628" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="628" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the software. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="66" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="66" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Software tools are capable of finding ADSs on your system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses/>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="99" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="99" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Where possible, use unique identifiers. If non-unique identifiers are detected, then do not operate any resource with a non-unique identifier and report the error appropriately.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="573" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses/>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="705" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="670" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="756" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="756" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Handle exceptions appropriately in source code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses/>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="99" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses/>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="282" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="282" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="345" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Periodically review the privileges and their owners.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="66" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="66" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="642" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="434" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="59" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap provide this capability.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1038" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1038" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="707" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="116" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="209" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="916" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="916" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="75" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="75" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="916" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="916" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="763" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="763" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="675" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="675" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1061" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Minimizing the number of statements in a conditional that produce side effects will help to prevent the likelihood of short circuit evaluation to alter control flow in an unexpected way.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
                  When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
                  Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="404" View_ID="1003"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="771" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="771" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
                  When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
                  Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="770" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="770" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
                  When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
                  Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="772" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="772" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
                  When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
                  Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="674" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="674" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="674" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="409" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="409" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="625" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="625" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Be sure to understand both what will be matched and what will not be matched by a regular expression. Anchoring the ends of the expression will allow the programmer to define a whitelist strictly limited to what is matched by the text in the regular expression. If you are using a package that only matches one line by default, ensure that you can match multi-line inputs if necessary.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="223" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="223" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a centralized logging mechanism that supports multiple levels of detail. Ensure that all security-related successes and failures can be logged.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states "last message repeated X times" when recording repeated events.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="88" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="327" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="822" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If METHOD_NEITHER is required for the IOCTL, then ensure that all user-space addresses are properly validated before they are first accessed. The ProbeForRead and ProbeForWrite routines are available for this task. Also properly protect and manage the user-supplied buffers, since the I/O Manager does not do this when METHOD_NEITHER is being used. See References.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="749" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="749" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="781" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>In Windows environments, use proper access control for the associated device or device namespace. See References.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="670" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Regularly wrap sub-expressions in parentheses, especially in security-critical code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="807" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="565" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="565" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="676" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="120" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="120" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="700"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="20" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="770" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="770" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="476" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform adequate input validation against any value that influences the amount of memory that is allocated. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="494" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="352" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="138" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="790" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="790" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="791" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="791" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="792" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="792" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="792" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="792" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="791" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="791" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="795" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="795" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="795" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="795" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="344" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="671" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="257" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].
                  In Windows environments, the Encrypted File System (EFS) may provide some protection.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Declare Java beans "local" when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="863" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="330" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.
                  Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="805" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="805" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an abstraction library to abstract away risky APIs. Examples include the Safe C String Library (SafeStr) by Viega, and the Strsafe.h library from Microsoft. This is not a complete solution, since many buffer overflows are not related to strings.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Store state information and sensitive data on the server side only.
                  Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.
                  If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="209" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="390" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not write user-controlled input to error pages.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="83" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="83" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="662" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="662" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="662" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="662" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="125" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="787" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="125" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="787" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="125" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="787" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="119" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="125" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="787" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Choose a language that provides automatic memory management.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="666" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="666" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="672" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="829" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="776" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="364" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="364" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls.
                  Note: This will not always be possible and may require large portions of the software to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="669" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="829" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="829" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="364" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="364" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="667" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="834" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="834" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="834" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="287" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="602" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="799" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="799" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="116" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="116" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="116" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="1023" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="195" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="682" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="124" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If the number to be used is always expected to be positive, change the variable type from signed to unsigned or size_t.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Resolve all URIs to absolute or canonical representations before processing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="286" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="286" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="704" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="704" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="704" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="675" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Resolve all filtered input to absolute or canonical representations before processing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="184" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="436" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="79" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Resolve all input to absolute or canonical representations before processing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="266" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="943" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="665" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="908" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="672" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="672" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="772" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="710" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always verify the integrity of the software that is being installed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>For any externally-influenced input, check the input against a white list of acceptable values.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="99" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="99" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>For any externally-influenced input, check the input against a white list of internal program variables that are allowed to be modified.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="502" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  If available, use features of the language or framework that allow specification of whitelists of attributes or fields that are allowed to be modified. If possible, prefer whitelists over black lists.
                  For applications written with Ruby on Rails, use the attr_accessible (whitelist) or attr_protected (blacklist) macros in each class that may be used in mass assignment.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="327" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="327" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="327" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="77" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="441" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="610" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="441" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="400" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="922" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="922" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="664" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If they do not need to be shared by other applications, explicitly mark components with android:exported="false" in the application manifest.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="285" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="117" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using CRLF as a special sequence.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="862" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="862" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.
                  When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1003"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="913" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refactor your program so that you do not have to dynamically generate code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using a man-in-the-middle attack.
                  When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="923" View_ID="699"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="406" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="284" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="183" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description/>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="94" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="94" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>If possible, refactor your code so that it does not need to use eval() at all.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="94" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="94" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="96" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="96" View_ID="699"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter server-side include syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="829" View_ID="699"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="829" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="94" View_ID="1000"/>
            <Related_Weaknesses Nature="CanPrecede" CWE_ID="94" View_ID="699"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="426" View_ID="1000"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="216" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness>
         <Related_Weaknesses>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="1000"/>
            <Related_Weaknesses Nature="ChildOf" CWE_ID="74" View_ID="699"/>
            <Related_Weaknesses Nature="PeerOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weaknesses Nature="CanAlsoBe" CWE_ID="73" View_ID="1000"/>
         </Related_Weaknesses>
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
   </Weaknesses>
</Weakness_Catalog>
