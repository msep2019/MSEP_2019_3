<?xml version="1.0" encoding="utf-8"?>
<Weakness_Catalog xmlns:cwe="http://cwe.mitre.org/cwe-6">
   <Weaknesses>
      <Weakness seq="1999-0001" type="CAN" ID="1004" Name="Sensitive Cookie Without 'HttpOnly' Flag" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Leverage the HttpOnly flag when setting a sensitive cookie in a response.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1007" Name="Insufficient Visual Distinction of Homoglyphs Presented to User" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a browser that displays Punycode for IDNs in the URL and status bars, or which color code various scripts in URLs.
                  Due to the prominence of homoglyph attacks, several browsers now help safeguard against this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will display IDNs as Punycode if top-level domains do not restrict which characters can be used in domain names or if labels mix scripts for different languages.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use an email client that has strict filters and prevents messages that mix character sets to end up in a user's inbox.
                  Certain email clients such as Google's GMail prevent the use of non-Latin characters in email addresses or in links contained within emails. This helps prevent homoglyph attacks by flagging these emails and redirecting them to a user's spam folder.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="102" Name="Struts: Duplicate Validation Forms" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1021" Name="Improper Restriction of Rendered UI Layers or Frames" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content.
                  The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for whitelisting and allowing frames from multiple domains.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  A developer can use a "frame-breaker" script in each page that should not be framed. This is very helpful for legacy browsers that do not support X-Frame-Options security feature previously mentioned.
                  It is also important to note that this tactic has been circumvented or bypassed. Improper usage of frames can persist in the web application through nested frames. The "frame-breaking" script does not intuitively account for multiple nested frames that can be presented to the user.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the "frame-ancestors" directive or the "frame-src" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1022" Name="Use of Web Link to Untrusted Target with window.opener Access" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Specify in the design that any linked external document must not be granted access to the location object of the calling page.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When creating a link to an external document using the &lt;a&gt; tag with a defined target, for example "_blank" or a named frame, provide the rel attribute with a value "noopener noreferrer".
                  If opening the external document in a new window via javascript, then reset the opener by setting it equal to null.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Do not use "_blank" targets. However, this can affect the usability of your application.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1023" Name="Incomplete Comparison with Missing Factors" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1024" Name="Comparison of Incompatible Types" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1025" Name="Comparison Using Wrong Factors" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="103" Name="Struts: Incomplete validate() Method Definition" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement the validate() method and call super.validate() within that method.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1037" Name="Processor Optimization Removal or Modification of Security-critical Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1038" Name="Insecure Automated Optimizations" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1039" Name="Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="104" Name="Struts: Form Bean Does Not Extend Validation Class" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that all forms extend one of the Validation Classes.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1041" Name="Use of Redundant Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1042" Name="Static Member Data Element outside of a Singleton Class Element" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1043" Name="Data Element Aggregating an Excessively Large Number of Non-Primitive Elements" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1044" Name="Architecture with Number of Horizontal Layers Outside of Expected Range" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1045" Name="Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1046" Name="Creation of Immutable Text Using String Concatenation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1047" Name="Modules with Circular Dependencies" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1048" Name="Invokable Control Element with Large Number of Outward Calls" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1049" Name="Excessive Data Query Operations in a Large Data Table" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="105" Name="Struts: Form Field Without Validator" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that you validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1050" Name="Excessive Platform Resource Consumption within a Loop" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1051" Name="Initialization with Hard-Coded Network Resource Configuration Data" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1052" Name="Excessive Use of Hard-Coded Literals in Initialization" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1053" Name="Missing Documentation for Design" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1054" Name="Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1055" Name="Multiple Inheritance from Concrete Classes" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1056" Name="Invokable Control Element with Variadic Parameters" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1057" Name="Data Access Operations Outside of Expected Data Manager Component" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1058" Name="Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1059" Name="Incomplete Documentation" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="106" Name="Struts: Plug-in Framework not in Use" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an input validation framework such as Struts.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an input validation framework such as Struts.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in your configuration of the Struts Validator. Example uses of the validator include checking to ensure that:
                  
                     
                        Phone number fields contain only valid characters in phone numbers
                        Boolean values are only "T" or "F"
                        Free-form strings are of a reasonable length and composition
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in your configuration of the Struts Validator. Example uses of the validator include checking to ensure that:
                  
                     
                        Phone number fields contain only valid characters in phone numbers
                        Boolean values are only "T" or "F"
                        Free-form strings are of a reasonable length and composition
                     
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1060" Name="Excessive Number of Inefficient Server-Side Data Accesses" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1061" Name="Insufficient Encapsulation" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1062" Name="Parent Class with References to Child Class" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1063" Name="Creation of Class Instance within a Static Code Block" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1064" Name="Invokable Control Element with Signature Containing an Excessive Number of Parameters" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1065" Name="Runtime Resource Management Control Element in a Component Built to Run on Application Servers" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1066" Name="Missing Serialization Control Element" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1067" Name="Excessive Execution of Sequential Searches of Data Resource" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1068" Name="Inconsistency Between Implementation and Documented Design" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1069" Name="Empty Exception Block" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="107" Name="Struts: Unused Validation Form" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove the unused Validation Form from the validation.xml file.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1070" Name="Serializable Data Element Containing non-Serializable Item Elements" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1071" Name="Empty Code Block" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1072" Name="Data Resource Access without Use of Connection Pooling" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1073" Name="Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1074" Name="Class with Excessively Deep Inheritance" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1075" Name="Unconditional Control Flow Transfer outside of Switch Block" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1076" Name="Insufficient Adherence to Expected Conventions" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1077" Name="Floating Point Comparison with Incorrect Operator" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1078" Name="Inappropriate Source Code Style or Formatting" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1079" Name="Parent Class without Virtual Destructor Method" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="108" Name="Struts: Unvalidated Action Form" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Map every Action Form to a corresponding validation form.
                  An action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1080" Name="Source Code File with Excessive Number of Lines of Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1082" Name="Class Instance Self Destruction Control Element" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1083" Name="Data Access from Outside Expected Data Manager Component" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1084" Name="Invokable Control Element with Excessive File or Data Access Operations" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1085" Name="Invokable Control Element with Excessive Volume of Commented-out Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1086" Name="Class with Excessive Number of Child Classes" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1087" Name="Class with Virtual Method without a Virtual Destructor" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1088" Name="Synchronous Access of Remote Resource without Timeout" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1089" Name="Large Data Table with Excessive Number of Indices" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="109" Name="Struts: Validator Turned Off" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that an action form mapping enables validation. Set the validate field to true.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1090" Name="Method Containing Access of a Member Element from Another Class" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1091" Name="Use of Object without Invoking Destructor Method" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1092" Name="Use of Same Invokable Control Element in Multiple Architectural Layers" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1093" Name="Excessively Complex Data Representation" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1094" Name="Excessive Index Range Scan for a Data Resource" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1095" Name="Loop Condition Value Update within the Loop" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1096" Name="Singleton Class Instance Creation without Proper Locking or Synchronization" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1097" Name="Persistent Storable Data Element without Associated Comparison Control Element" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1098" Name="Data Element containing Pointer Item without Proper Copy Control Element" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1099" Name="Inconsistent Naming Conventions for Identifiers" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="11" Name="ASP.NET Misconfiguration: Creating Debug Binary" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="110" Name="Struts: Validator Without Form Field" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1100" Name="Insufficient Isolation of System-Dependent Functions" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1101" Name="Reliance on Runtime Component in Generated Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1102" Name="Reliance on Machine-Dependent Data Representation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1103" Name="Use of Platform-Dependent Third Party Components" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1104" Name="Use of Unmaintained Third Party Components" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1105" Name="Insufficient Encapsulation of Machine-Dependent Functionality" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1106" Name="Insufficient Use of Symbolic Constants" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1107" Name="Insufficient Isolation of Symbolic Constant Definitions" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1108" Name="Excessive Reliance on Global Variables" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1109" Name="Use of Same Variable for Multiple Purposes" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="111" Name="Direct Use of Unsafe JNI" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement error handling around the JNI call.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use JNI calls if you don't trust the native library.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Be reluctant to use JNI calls. A Java API equivalent may exist.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1110" Name="Incomplete Design Documentation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1111" Name="Incomplete I/O Documentation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1112" Name="Incomplete Documentation of Program Execution" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1113" Name="Inappropriate Comment Style" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1114" Name="Inappropriate Whitespace Style" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1115" Name="Source Code Element without Standard Prologue" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1116" Name="Inaccurate Comments" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1117" Name="Callable with Insufficient Behavioral Summary" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1118" Name="Insufficient Documentation of Error Handling Techniques" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1119" Name="Excessive Use of Unconditional Branching" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="112" Name="Missing XML Validation" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Always validate XML input against a known XML Schema or DTD.
                  It is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1120" Name="Excessive Code Complexity" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1121" Name="Excessive McCabe Cyclomatic Complexity" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1122" Name="Excessive Halstead Complexity" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1123" Name="Excessive Use of Self-Modifying Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1124" Name="Excessively Deep Nesting" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1125" Name="Excessive Attack Surface" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1126" Name="Declaration of Variable with Unnecessarily Wide Scope" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1127" Name="Compilation with Insufficient Warnings or Errors" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="113" Name="Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Construct HTTP headers very carefully, avoiding the use of non-validated input data.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="114" Name="Process Control" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="115" Name="Misinterpretation of Input" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="116" Name="Improper Encoding or Escaping of Output" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.
                  Alternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
                  For example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.</Description>
            </Mitigation>
            <Mitigation>
               <Description>In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict whitelist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Fully specify which encodings are required by components that will be communicating with each other.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1164" Name="Irrelevant Code" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="117" Name="Improper Output Neutralization for Logs" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1173" Name="Improper Use of Validation Framework" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Properly use provided input validation frameworks.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1174" Name="ASP.NET Misconfiguration: Improper Model Validation" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1176" Name="Inefficient CPU Computation" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1177" Name="Use of Prohibited Code" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1187" Name="Use of Uninitialized Resource" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="1188" Name="Insecure Default Initialization of Resource" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="119" Name="Improper Restriction of Operations within the Bounds of a Memory Buffer" Abstraction="Class" Structure="Simple" Status="Usable">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.
                  Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.
                  For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Consider adhering to the following rules when allocating and managing an application's memory:
                  
                     
                        Double check that your buffer is as large as you specify.
                        When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.
                        Check buffer boundaries if accessing the buffer in a loop and make sure you are not in danger of writing past the allocated space.
                        If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.
                  Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].</Description>
            </Mitigation>
            <Mitigation>
               <Description>Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="12" Name="ASP.NET Misconfiguration: Missing Custom Error Page" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not attempt to process an error or attempt to mask it.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Verify return values are correct and do not supply sensitive information about the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="120" Name="Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.
                  Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.
                  For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Consider adhering to the following rules when allocating and managing an application's memory:
                  
                     
                        Double check that your buffer is as large as you specify.
                        When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.
                        Check buffer boundaries if accessing the buffer in a loop and make sure you are not in danger of writing past the allocated space.
                        If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.
                  Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].</Description>
            </Mitigation>
            <Mitigation>
               <Description>Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="121" Name="Stack-based Buffer Overflow" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.
                  For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Implement and perform bounds checking on input.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use OS-level preventative functionality, such as ASLR. This is not a complete solution.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="122" Name="Heap-based Buffer Overflow" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Pre-design: Use a language or compiler that performs automatic bounds checking.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Pre-design through Build: Canary style bounds checking, library changes which ensure the validity of chunk data, and other such fixes are possible, but should not be relied upon.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Implement and perform bounds checking on input.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use dangerous functions such as gets. Look for their safe equivalent, which checks for the boundary.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use OS-level preventative functionality. This is not a complete solution, but it provides some defense in depth.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="123" Name="Write-what-where Condition" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language that provides appropriate memory abstractions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use OS-level preventative functionality integrated after the fact. Not a complete solution.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="124" Name="Buffer Underwrite ('Buffer Underflow')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Requirements specification: The choice could be made to use a language that is not susceptible to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Sanity checks should be performed on all calculated values used as index or for pointer arithmetic.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="125" Name="Out-of-bounds Read" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="126" Name="Buffer Over-read" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="127" Name="Buffer Under-read" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="128" Name="Wrap-around Error" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Requirements specification: The choice could be made to use a language that is not susceptible to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Provide clear upper and lower bounds on the scale of any protocols designed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Place sanity checks on all incremented variables to ensure that they remain within reasonable bounds.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="129" Name="Improper Validation of Array Index" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
                  Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, Ada allows the programmer to constrain the values of a variable and languages such as Java and Ruby will allow the programmer to handle exceptions when an out-of-bounds index is accessed.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.
                  Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When accessing a user-controlled array index, use a stringent range of values that are within the target array. Make sure that you do not allow negative values to be used. That is, verify the minimum as well as the maximum of the range of acceptable values.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="13" Name="ASP.NET Misconfiguration: Password in Configuration File" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="130" Name="Improper Handling of Length Parameter Inconsistency " Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not let the user control the size of the buffer.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Validate that the length of the user-supplied data is consistent with the buffer size.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="131" Name="Incorrect Calculation of Buffer Size" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts "&amp;" characters to "&amp;amp;" for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, "not-a-number" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]
                  Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).</Description>
            </Mitigation>
            <Mitigation>
               <Description>When allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of memory that must be allocated.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use sizeof() on the appropriate data type to avoid CWE-467.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will simplify sanity checks and will reduce surprises related to unexpected casting.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Use libraries or frameworks that make it easier to handle numbers without unexpected consequences, or buffer allocation routines that automatically track buffer size.
                  Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.
                  For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.
                  Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-61] [REF-60].</Description>
            </Mitigation>
            <Mitigation>
               <Description>Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="134" Name="Use of Externally-Controlled Format String" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Choose a language that is not subject to this flaw.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117]</Description>
            </Mitigation>
            <Mitigation>
               <Description>Heed the warnings of compilers and linkers, since they may alert you to improper usage.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="135" Name="Incorrect Calculation of Multi-Byte String Length" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always verify the length of the string unit character.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use length computing functions (e.g. strlen, wcslen, etc.) appropriately with their equivalent type (e.g.: byte, wchar_t, etc.)</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="138" Name="Improper Neutralization of Special Elements" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their software system. One defense is to create a whitelist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the whitelist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="14" Name="Compiler Removal of Code to Clear Buffers" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Store the sensitive data in a "volatile" memory location if available.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If possible, configure your compiler so that it does not remove dead stores.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Where possible, encrypt sensitive data that are used by a software system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="140" Name="Improper Neutralization of Delimiters" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="141" Name="Improper Neutralization of Parameter/Argument Delimiters" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="142" Name="Improper Neutralization of Value Delimiters" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="143" Name="Improper Neutralization of Record Delimiters" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="144" Name="Improper Neutralization of Line Delimiters" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="145" Name="Improper Neutralization of Section Delimiters" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="146" Name="Improper Neutralization of Expression/Command Delimiters" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that inter-expression and inter-command delimiters will be injected/removed/manipulated in the input vectors of their software system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="147" Name="Improper Neutralization of Input Terminators" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="148" Name="Improper Neutralization of Input Leaders" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that leading characters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="149" Name="Improper Neutralization of Quoting Syntax" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="15" Name="External Control of System or Configuration Setting" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.</Description>
            </Mitigation>
            <Mitigation>
               <Description>In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="150" Name="Improper Neutralization of Escape, Meta, or Control Sequences" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="151" Name="Improper Neutralization of Comment Delimiters" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that comments will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="152" Name="Improper Neutralization of Macro Symbols" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="153" Name="Improper Neutralization of Substitution Characters" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="154" Name="Improper Neutralization of Variable Name Delimiters" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that variable name delimiters will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="155" Name="Improper Neutralization of Wildcards or Matching Symbols" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that wildcard or matching elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="156" Name="Improper Neutralization of Whitespace" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="157" Name="Failure to Sanitize Paired Delimiters" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that grouping elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="158" Name="Improper Neutralization of Null Byte or NUL Character" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="159" Name="Failure to Sanitize Special Element" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="160" Name="Improper Neutralization of Leading Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that leading special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="161" Name="Improper Neutralization of Multiple Leading Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="162" Name="Improper Neutralization of Trailing Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that trailing special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="163" Name="Improper Neutralization of Multiple Trailing Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="164" Name="Improper Neutralization of Internal Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="165" Name="Improper Neutralization of Multiple Internal Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="166" Name="Improper Handling of Missing Special Element" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that special elements will be removed in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="167" Name="Improper Handling of Additional Special Element" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that extra special elements will be injected in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="168" Name="Improper Handling of Inconsistent Special Elements" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="170" Name="Improper Null Termination" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Switch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="172" Name="Encoding Error" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="173" Name="Improper Handling of Alternate Encoding" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="174" Name="Double Decoding of the Same Data" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="175" Name="Improper Handling of Mixed Encoding" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="176" Name="Improper Handling of Unicode Encoding" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="177" Name="Improper Handling of URL Encoding (Hex Encoding)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="178" Name="Improper Handling of Case Sensitivity" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="179" Name="Incorrect Behavior Order: Early Validation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="180" Name="Incorrect Behavior Order: Validate Before Canonicalize" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="181" Name="Incorrect Behavior Order: Validate Before Filter" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being filtered.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="182" Name="Collapse of Data into Unsafe Value" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="183" Name="Permissive Whitelist" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="184" Name="Incomplete Blacklist" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Combine use of blacklist with appropriate use of whitelists.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not rely exclusively on blacklist validation to detect malicious input or to encode output. There are too many variants to encode a character; you're likely to miss some variants.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="185" Name="Incorrect Regular Expression" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="186" Name="Overly Restrictive Regular Expression" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject your regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor your regular expression.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="187" Name="Partial String Comparison" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="188" Name="Reliance on Data/Memory Layout" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>In flat address space situations, never allow computing memory addresses as offsets from another memory address.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Fully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Testing: Test that the implementation properly handles each case in the protocol grammar.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="190" Name="Integer Overflow or Wraparound" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  If possible, choose a language or compiler that performs automatic bounds checking.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Use libraries or frameworks that make it easier to handle numbers without unexpected consequences.
                  Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.
                  Use unsigned integers where possible. This makes it easier to perform sanity checks for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, "not-a-number" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]
                  Also be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="191" Name="Integer Underflow (Wrap or Wraparound)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="192" Name="Integer Coercion Error" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>A language which throws exceptions on ambiguous data casts might be chosen.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Design objects and program flow such that multiple or complex casts are unnecessary</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="193" Name="Off-by-one Error" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf().</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="194" Name="Unexpected Sign Extension" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform sanity checks after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="195" Name="Signed to Unsigned Conversion Error" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="196" Name="Unsigned to Signed Conversion Error" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Choose a language which is not subject to these casting flaws.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Design object accessor functions to implicitly check values for valid sizes. Ensure that all functions which will be used as a size are checked previous to use as a size. If the language permits, throw exceptions rather than using in-band errors.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Error check the return values of all functions. Be aware of implicit casts made, and use unsigned variables for sizes if at all possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="197" Name="Numeric Truncation Error" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="198" Name="Use of Incorrect Byte Ordering" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="20" Name="Improper Input Validation" Abstraction="Class" Structure="Simple" Status="Usable">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
                  Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.
                  Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="200" Name="Information Exposure" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="201" Name="Information Exposure Through Sent Data" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Setup default error messages so that unexpected errors do not disclose sensitive information.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="202" Name="Exposure of Sensitive Data Through Data Queries" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>This is a complex topic. See the book Translucent Databases for a good discussion of best practices.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="203" Name="Information Exposure Through Discrepancy" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="204" Name="Response Discrepancy Information Exposure" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="205" Name="Information Exposure Through Behavioral Discrepancy" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="206" Name="Information Exposure of Internal State Through Behavioral Inconsistency" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Setup generic response pages for error condition. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="207" Name="Information Exposure Through an External Behavioral Inconsistency" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="208" Name="Information Exposure Through Timing Discrepancy" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="209" Name="Information Exposure Through an Error Message" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Handle exceptions internally and do not display errors containing potentially sensitive information to a user.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Create default error pages or messages that do not leak any information.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="210" Name="Information Exposure Through Self-generated Error Message" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="211" Name="Information Exposure Through Externally-Generated Error Message" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Handle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary.</Description>
            </Mitigation>
            <Mitigation>
               <Description>The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="212" Name="Improper Cross-boundary Removal of Sensitive Data" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="213" Name="Intentional Information Exposure" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="214" Name="Information Exposure Through Process Environment" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="215" Name="Information Exposure Through Debug Information" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not leave debug statements that could be executed in the source code. Assure that all debug information is eradicated before releasing the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="216" Name="Containment Errors (Container Errors)" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="219" Name="Sensitive Data Under Web Root" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing information under the web root directory.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="22" Name="Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
                  Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59). This includes:
                  
                     
                        realpath() in C
                        getCanonicalPath() in Java
                        GetFullPath() in ASP.NET
                        realpath() or abs_path() in Perl
                        realpath() in PHP
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
                  For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.
                  This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
                  In the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="220" Name="Sensitive Data Under FTP Root" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing information under the FTP root directory.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="221" Name="Information Loss or Omission" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="222" Name="Truncation of Security-relevant Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="223" Name="Omission of Security-relevant Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="224" Name="Obscured Security-relevant Information by Alternate Name" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="226" Name="Sensitive Information Uncleared Before Release" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="228" Name="Improper Handling of Syntactically Invalid Structure" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="229" Name="Improper Handling of Values" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="23" Name="Relative Path Traversal" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.
                  Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59). This includes:
                  
                     
                        realpath() in C
                        getCanonicalPath() in Java
                        GetFullPath() in ASP.NET
                        realpath() or abs_path() in Perl
                        realpath() in PHP
                     
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="230" Name="Improper Handling of Missing Values" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="231" Name="Improper Handling of Extra Values" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="232" Name="Improper Handling of Undefined Values" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="233" Name="Improper Handling of Parameters" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="234" Name="Failure to Handle Missing Parameter" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>This issue can be simply combated with the use of proper build process.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="235" Name="Improper Handling of Extra Parameters" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="236" Name="Improper Handling of Undefined Parameters" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="237" Name="Improper Handling of Structural Elements" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="238" Name="Improper Handling of Incomplete Structural Elements" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="239" Name="Failure to Handle Incomplete Element" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="24" Name="Path Traversal: '../filedir'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="240" Name="Improper Handling of Inconsistent Structural Elements" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="241" Name="Improper Handling of Unexpected Data Type" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="243" Name="Creation of chroot Jail Without Changing Working Directory" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="244" Name="Improper Clearing of Heap Memory Before Release ('Heap Inspection')" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="245" Name="J2EE Bad Practices: Direct Management of Connections" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="246" Name="J2EE Bad Practices: Direct Use of Sockets" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use framework method calls instead of using sockets directly.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="248" Name="Uncaught Exception" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="25" Name="Path Traversal: '/../filedir'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="250" Name="Execution with Unnecessary Privileges" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="252" Name="Unchecked Return Value" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Check the results of all functions that return a value and verify that the value is expected.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that you account for all possible return values from the function.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When designing a function, make sure you return a value or throw an exception in case of an error.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="253" Name="Incorrect Check of Function Return Value" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language or compiler that uses exceptions and requires the catching of those exceptions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Properly check all functions which return a value.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When designing any function make sure you return a value or throw an exception in case of an error.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="256" Name="Unprotected Storage of Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.</Description>
            </Mitigation>
            <Mitigation>
               <Description>A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="257" Name="Storing Passwords in a Recoverable Format" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use strong, non-reversible encryption to protect stored passwords.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="258" Name="Empty Password in Configuration File" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use "similar-looking" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="259" Name="Use of Hard-coded Password" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a "first login" mode that requires the user to enter a unique strong password.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.
                  Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For front-end to back-end connections: Three solutions are possible, although none are complete.
                  
                     The first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.
                     Next, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.
                     Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks.
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="26" Name="Path Traversal: '/dir/../filename'" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="260" Name="Password in Configuration File" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="261" Name="Weak Cryptography for Passwords" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="262" Name="Not Using Password Aging" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>The recommendation that users change their passwords regularly and do not reuse passwords is universal among security experts. In order to enforce this, it is useful to have a password aging mechanism that notifies users when passwords are considered old and that requests that they replace them with new, strong passwords. In order for this functionality to be useful, however, it must be accompanied with documentation which stresses how important this practice is and which makes the entire process as simple as possible for the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="263" Name="Password Aging with Long Expiration" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that password aging is limited so that there is a defined maximum age for passwords and so that the user is notified several times leading up to the password expiration.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="266" Name="Incorrect Privilege Assignment" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="267" Name="Privilege Defined With Unsafe Actions" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="268" Name="Privilege Chaining" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="269" Name="Improper Privilege Management" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Follow the principle of least privilege when assigning access rights to entities in a software system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="27" Name="Path Traversal: 'dir/../../filename'" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="270" Name="Privilege Context Switching Error" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="271" Name="Privilege Dropping / Lowering Errors" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="272" Name="Least Privilege Violation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Follow the principle of least privilege when assigning access rights to entities in a software system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="273" Name="Improper Check for Dropped Privileges" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Check the results of all functions that return a value and verify that the value is expected.</Description>
            </Mitigation>
            <Mitigation>
               <Description>In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="274" Name="Improper Handling of Insufficient Privileges" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="276" Name="Incorrect Default Permissions" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="277" Name="Insecure Inherited Permissions" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="278" Name="Insecure Preserved Inherited Permissions" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="279" Name="Incorrect Execution-Assigned Permissions" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="28" Name="Path Traversal: '..\filedir'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="280" Name="Improper Handling of Insufficient Permissions or Privileges " Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="281" Name="Improper Preservation of Permissions" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="282" Name="Improper Ownership Management" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="283" Name="Unverified Ownership" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="284" Name="Improper Access Control" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="285" Name="Improper Authorization" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.
                  One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="286" Name="Incorrect User Management" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="287" Name="Improper Authentication" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an authentication framework or library such as the OWASP ESAPI Authentication feature.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="288" Name="Authentication Bypass Using an Alternate Path or Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="289" Name="Authentication Bypass by Alternate Name" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="29" Name="Path Traversal: '\..\filename'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="290" Name="Authentication Bypass by Spoofing" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="291" Name="Reliance on IP Address for Authentication" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="293" Name="Using Referer Field for Authentication" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="294" Name="Authentication Bypass by Capture-replay" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="295" Name="Improper Certificate Validation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="296" Name="Improper Following of a Certificate's Chain of Trust" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper certificate checking is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="297" Name="Improper Validation of Certificate with Host Mismatch" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="298" Name="Improper Validation of Certificate Expiration" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="299" Name="Improper Check for Certificate Revocation" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that certificates are checked for revoked status.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="30" Name="Path Traversal: '\dir\..\filename'" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="300" Name="Channel Accessible by Non-Endpoint ('Man-in-the-Middle')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always fully authenticate both ends of any communications channel.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Adhere to the principle of complete mediation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>A certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="301" Name="Reflection Attack in an Authentication Protocol" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Let the initiator prove its identity before proceeding.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="302" Name="Authentication Bypass by Assumed-Immutable Data" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="303" Name="Incorrect Implementation of Authentication Algorithm" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="304" Name="Missing Critical Step in Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="305" Name="Authentication Bypass by Primary Weakness" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="306" Name="Missing Authentication for Critical Function" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.
                  Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.
                  In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Where possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These may make it easier to provide a clear separation between authentication tasks and authorization tasks.
                  In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="307" Name="Improper Restriction of Excessive Authentication Attempts" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Common protection mechanisms include:
                  
                     
                        Disconnecting the user after a small number of failed attempts
                        Implementing a timeout
                        Locking out a targeted account
                        Requiring a computational task on the user's part.
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45]
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="308" Name="Use of Single-factor Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="309" Name="Use of Password System for Primary Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  In order to protect password systems from compromise, the following should be noted:
                  
                     
                        Passwords should be stored safely to prevent insider attack and to ensure that -- if a system is compromised -- the passwords are not retrievable. Due to password reuse, this information may be useful in the compromise of other systems these users work with. In order to protect these passwords, they should be stored encrypted, in a non-reversible state, such that the original text password cannot be extracted from the stored value.
                        Password aging should be strictly enforced to ensure that passwords do not remain unchanged for long periods of time. The longer a password remains in use, the higher the probability that it has been compromised. For this reason, passwords should require refreshing periodically, and users should be informed of the risk of passwords which remain in use for too long.
                        Password strength should be enforced intelligently. Rather than restrict passwords to specific content, or specific length, users should be encouraged to use upper and lower case letters, numbers, and symbols in their passwords. The system should also ensure that no passwords are derived from dictionary words.
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a zero-knowledge password protocol, such as SRP.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that passwords are stored safely and are not reversible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Implement password aging functionality that requires passwords be changed after a certain point.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a mechanism for determining the strength of a password and notify the user of weak password use.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="31" Name="Path Traversal: 'dir\..\..\filename'" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="311" Name="Missing Encryption of Sensitive Data" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:
                  
                     
                        Encryption that is needed to store or transmit private data of the users of the system
                        Encryption that is needed to protect the system itself from unauthorized disclosure or tampering
                     
                  
                  Identify the separate needs and contexts for encryption:
                  
                     
                        One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the software) does not need to have access to a private key.
                        Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.
                     
                  
                  Using threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.
                  For example, US government systems require FIPS 140-2 certification.
                  Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.
                  Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.
                  Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="312" Name="Cleartext Storage of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="313" Name="Cleartext Storage in a File or on Disk" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="314" Name="Cleartext Storage in the Registry" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="315" Name="Cleartext Storage of Sensitive Information in a Cookie" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="316" Name="Cleartext Storage of Sensitive Information in Memory" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="317" Name="Cleartext Storage of Sensitive Information in GUI" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="318" Name="Cleartext Storage of Sensitive Information in Executable" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="319" Name="Cleartext Transmission of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Encrypt the data with a reliable encryption scheme before transmitting.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="32" Name="Path Traversal: '...' (Triple Dot)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="321" Name="Use of Hard-coded Cryptographic Key" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Prevention schemes mirror that of hard-coded password storage.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="322" Name="Key Exchange without Entity Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper authentication is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="323" Name="Reusing a Nonce, Key Pair in Encryption" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refuse to reuse nonce values.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="324" Name="Use of a Key Past its Expiration Date" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="325" Name="Missing Required Cryptographic Step" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="326" Name="Inadequate Encryption Strength" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a cryptographic algorithm that is currently considered to be strong by experts in the field.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="327" Name="Use of a Broken or Risky Cryptographic Algorithm" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.
                  For example, US government systems require FIPS 140-2 certification.
                  Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.
                  Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Design the software so that one cryptographic algorithm can be replaced with another. This will make it easier to upgrade to stronger algorithms.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Industry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="328" Name="Reversible One-Way Hash" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="329" Name="Not Using a Random IV with CBC Mode" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>It is important to properly initialize CBC operating block ciphers or their utility is lost.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="33" Name="Path Traversal: '....' (Multiple Dot)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="330" Name="Use of Insufficiently Random Values" Abstraction="Class" Structure="Simple" Status="Usable">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.
                  In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.
                  Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="331" Name="Insufficient Entropy" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="332" Name="Insufficient Entropy in PRNG" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider a PRNG that re-seeds itself as needed from high-quality pseudo-random output, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When deciding which PRNG to use, look at its sources of entropy. Depending on what your security needs are, you may need to use a random number generator that always uses strong random data -- i.e., a random number generator that attempts to be strong but will fail in a weak way or will always provide some middle ground of protection through techniques like re-seeding. Generally, something that always provides a predictable amount of strength is preferable.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="333" Name="Improper Handling of Insufficient Entropy in TRNG" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="334" Name="Small Space of Random Values" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="335" Name="Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="336" Name="Same Seed in Pseudo-Random Number Generator (PRNG)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="337" Name="Predictable Seed in Pseudo-Random Number Generator (PRNG)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use non-predictable inputs for seed generation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="338" Name="Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="339" Name="Small Seed Space in PRNG" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="34" Name="Path Traversal: '....//'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="340" Name="Predictability Problems" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="341" Name="Predictable from Observable State" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Increase the entropy used to seed a PRNG.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="342" Name="Predictable Exact Value from Previous Values" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Increase the entropy used to seed a PRNG.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="343" Name="Predictable Value Range from Previous Values" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Increase the entropy used to seed a PRNG.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="344" Name="Use of Invariant Value in Dynamically Changing Context" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="345" Name="Insufficient Verification of Data Authenticity" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="346" Name="Origin Validation Error" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="347" Name="Improper Verification of Cryptographic Signature" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="348" Name="Use of Less Trusted Source" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="349" Name="Acceptance of Extraneous Untrusted Data With Trusted Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="35" Name="Path Traversal: '.../...//'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="350" Name="Reliance on Reverse DNS Resolution for a Security-Critical Action" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform proper forward and reverse DNS lookups to detect DNS spoofing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="351" Name="Insufficient Type Distinction" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="352" Name="Cross-Site Request Forgery (CSRF)" Abstraction="Compound" Structure="Composite" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]
                  Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]</Description>
            </Mitigation>
            <Mitigation>
               <Description>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use the "double-submitted cookie" method as described by Felten and Zeller:
                  When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.
                  Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.
                  This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use the GET method for any request that triggers a state change.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="353" Name="Missing Support for Integrity Check" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="354" Name="Improper Validation of Integrity Check Value" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="356" Name="Product UI does not Warn User of Unsafe Actions" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="357" Name="Insufficient UI Warning of Dangerous Operations" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="358" Name="Improperly Implemented Security Check for Standard" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="359" Name="Exposure of Private Information ('Privacy Violation')" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="36" Name="Absolute Path Traversal" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="360" Name="Trust of System Event Data" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Never trust or rely any of the information in an Event for security.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="362" Name="Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use thread-safe capabilities such as the data access abstraction in Spring.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Minimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.
                  Additionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When using multithreading and operating on shared variables, only use thread-safe functions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use atomic operations on shared variables. Be wary of innocent-looking constructs such as "x++". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="363" Name="Race Condition Enabling Link Following" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="364" Name="Signal Handler Race Condition" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Design signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Only use reentrant functions within signal handlers. Also, use sanity checks to ensure that state is consistent while performing asynchronous actions that affect the state of execution.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="365" Name="Race Condition in Switch" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Variables that may be subject to race conditions should be locked before the switch statement starts and only unlocked after the statement ends.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="366" Name="Race Condition within a Thread" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Create resource-locking sanity checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="367" Name="Time-of-check Time-of-use (TOCTOU) Race Condition" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Limit the interleaving of operations on files from multiple processes.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Recheck the resource after the use call to verify that the action was taken appropriately.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that some environmental locking mechanism can be used to protect resources effectively.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="368" Name="Context Switching Race Condition" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="369" Name="Divide By Zero" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="37" Name="Path Traversal: '/absolute/pathname/here'" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="370" Name="Missing Check for Certificate Revocation after Initial Check" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="372" Name="Incomplete Internal State Distinction" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="374" Name="Passing Mutable Objects to an Untrusted Method" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Pass in data which should not be altered as constant or immutable.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="375" Name="Returning a Mutable Object to an Untrusted Caller" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Declare returned data which should not be altered as constant or immutable.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Clone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="377" Name="Insecure Temporary File" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="378" Name="Creation of Temporary File With Insecure Permissions" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Randomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="379" Name="Creation of Temporary File in Directory with Incorrect Permissions" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Avoid using vulnerable temp file functions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="38" Name="Path Traversal: '\absolute\pathname\here'" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="382" Name="J2EE Bad Practices: Use of System.exit()" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>The shutdown function should be a privileged function available only to a properly authorized administrative user</Description>
            </Mitigation>
            <Mitigation>
               <Description>Web applications should not call methods that cause the virtual machine to exit, such as System.exit()</Description>
            </Mitigation>
            <Mitigation>
               <Description>Web applications should also not throw any Throwables to the application server as this may adversely affect the container.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Non-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="383" Name="J2EE Bad Practices: Direct Use of Threads" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>For EJB, use framework approaches for parallel execution, instead of using threads.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="384" Name="Session Fixation" Abstraction="Compound" Structure="Composite" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Invalidate any existing session identifiers prior to authorizing a new user session.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="385" Name="Covert Timing Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Whenever possible, specify implementation strategies that do not introduce time variances in operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Often one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker.</Description>
            </Mitigation>
            <Mitigation>
               <Description>It is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="386" Name="Symbolic Name not Mapping to Correct Object" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="39" Name="Path Traversal: 'C:dirname'" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="390" Name="Detection of Error Condition Without Action" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Subject the software to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="391" Name="Unchecked Error Condition" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.</Description>
            </Mitigation>
            <Mitigation>
               <Description>A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="392" Name="Missing Report of Error Condition" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="393" Name="Return of Wrong Status Code" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="394" Name="Unexpected Status Code or Return Value" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="395" Name="Use of NullPointerException Catch to Detect NULL Pointer Dereference" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="396" Name="Declaration of Catch for Generic Exception" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="397" Name="Declaration of Throws for Generic Exception" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="40" Name="Path Traversal: '\\UNC\share\name\' (Windows UNC Share)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="400" Name="Uncontrolled Resource Consumption" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Mitigation of resource exhaustion attacks requires that the target system either:
                  
                     
                        recognizes the attack and denies that user further access for a given amount of time, or
                        uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.
                     
                  
                  The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.
                  The second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that protocols have specific limits of scale placed on them.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that all failures in resource allocation place the system into a safe posture.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="401" Name="Missing Release of Memory after Effective Lifetime" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.
                  For example, glibc in Linux provides protection against free of invalid pointers.
                  When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].
                  To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Description>
            </Mitigation>
            <Mitigation>
               <Description>The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="402" Name="Transmission of Private Resources into a New Sphere ('Resource Leak')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="403" Name="Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="404" Name="Improper Resource Shutdown or Release" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function. If you allocate memory that you intend to free upon completion of the function, you must be sure to free the memory at all exit points for that function including error conditions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].</Description>
            </Mitigation>
            <Mitigation>
               <Description>When releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="405" Name="Asymmetric Resource Consumption (Amplification)" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>An application must make resources available to a client commensurate with the client's access level.</Description>
            </Mitigation>
            <Mitigation>
               <Description>An application must, at all times, keep track of allocated resources and meter their usage appropriately.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="406" Name="Insufficient Control of Network Message Volume (Network Amplification)" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>An application must make network resources available to a client commensurate with the client's access level.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Define a clear policy for network resource allocation and consumption.</Description>
            </Mitigation>
            <Mitigation>
               <Description>An application must, at all times, keep track of network resources and meter their usage appropriately.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="407" Name="Inefficient Algorithmic Complexity" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="408" Name="Incorrect Behavior Order: Early Amplification" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="409" Name="Improper Handling of Highly Compressed Data (Data Amplification)" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="41" Name="Improper Resolution of Path Equivalence" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="410" Name="Insufficient Resource Pool" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not perform resource-intensive transactions for unauthenticated users and/or invalid requests.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider implementing a velocity check mechanism which would detect abusive behavior.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider load balancing as an option to handle heavy loads.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make sure that resource handles are properly closed when no longer needed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Identify the system's resource intensive operations and consider protecting them from abuse (e.g. malicious automated script which runs the resources out).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="412" Name="Unrestricted Externally Accessible Lock" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use any access control that is offered by the functionality that is offering the lock.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use unpredictable names or identifiers for the locks. This might not always be possible or feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider modifying your code to use non-blocking synchronization methods.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="413" Name="Improper Resource Locking" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a non-conflicting privilege scheme.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use synchronization when locking a resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="414" Name="Missing Lock Check" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement a reliable lock mechanism.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="415" Name="Double Free" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Choose a language that provides automatic memory management.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a static analysis tool to find double free instances.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="416" Name="Use After Free" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Choose a language that provides automatic memory management.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="419" Name="Unprotected Primary Channel" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not expose administrative functionnality on the user UI.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Protect the administrative/restricted functionality with a strong authentication mechanism.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="42" Name="Path Equivalence: 'filename.' (Trailing Dot)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="420" Name="Unprotected Alternate Channel" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="421" Name="Race Condition During Access to Alternate Channel" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="422" Name="Unprotected Windows Messaging Channel ('Shatter')" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always verify and authenticate the source of the message.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="424" Name="Improper Protection of Alternate Path" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Deploy different layers of protection to implement security in depth.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="425" Name="Direct Request ('Forced Browsing')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider using MVC based frameworks such as Struts.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="426" Name="Untrusted Search Path" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="427" Name="Uncontrolled Search Path Element" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a blacklist approach, it might not be a complete solution.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="428" Name="Unquoted Search Path or Element" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Properly quote the full search path before executing a program on the system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="43" Name="Path Equivalence: 'filename....' (Multiple Trailing Dot)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="430" Name="Deployment of Wrong Handler" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform a type check before interpreting an object.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Reject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="431" Name="Missing Handler" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Handle all possible situations (e.g. error condition).</Description>
            </Mitigation>
            <Mitigation>
               <Description>If an operation can throw an Exception, implement a handler for that specific exception.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="432" Name="Dangerous Signal Handler not Disabled During Sensitive Operations" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Turn off dangerous handlers when performing sensitive operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="433" Name="Unparsed Raw Web Content Delivery" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform a type check before interpreting files.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not store sensitive information in files which may be misinterpreted.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="434" Name="Unrestricted Upload of File with Dangerous Type" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that "filename.php.gif" is fed to the PHP interpreter.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation>
               <Description>When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="436" Name="Interpretation Conflict" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="437" Name="Incomplete Model of Endpoint Features" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="439" Name="Behavioral Change in New Version or Environment" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="44" Name="Path Equivalence: 'file.name' (Internal Dot)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="440" Name="Expected Behavior Violation" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="441" Name="Unintended Proxy or Intermediary ('Confused Deputy')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Enforce the use of strong mutual authentication mechanism between the two parties.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="444" Name="Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use only SSL communication.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Terminate the client session after each request.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Turn all pages to non-cacheable.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="446" Name="UI Discrepancy for Security Feature" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="447" Name="Unimplemented or Unsupported Feature in UI" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform functionality testing before deploying the application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="448" Name="Obsolete Feature in UI" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="449" Name="The UI Performs the Wrong Action" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform extensive functionality testing of the UI. The UI should behave as specified.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="45" Name="Path Equivalence: 'file...name' (Multiple Internal Dot)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="450" Name="Multiple Interpretations of UI Input" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="451" Name="User Interface (UI) Misrepresentation of Critical Information" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform data validation (e.g. syntax, length, etc.) before interpreting the data.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Create a strategy for presenting information, and plan for how to display unusual characters.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="453" Name="Insecure Default Variable Initialization" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Disable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="454" Name="External Initialization of Trusted Variables or Data Stores" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Avoid any external control of variables. If necessary, restrict the variables that can be modified using a whitelist, and use a different namespace or naming convention if possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="455" Name="Non-exit on Failed Initialization" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="456" Name="Missing Initialization of a Variable" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Check that critical variables are initialized.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a static analysis tool to spot non-initialized variables.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="457" Name="Use of Uninitialized Variable" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Assign all variables to an initial value.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Most compilers will complain about the use of uninitialized variables if warnings are turned on.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.</Description>
            </Mitigation>
            <Mitigation>
               <Description>The choice could be made to use a language that is not susceptible to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Mitigating technologies such as safe string libraries and container abstractions could be introduced.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="459" Name="Incomplete Cleanup" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="46" Name="Path Equivalence: 'filename ' (Trailing Space)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="460" Name="Improper Cleanup on Thrown Exception" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="462" Name="Duplicate Key in Associative List (Alist)" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a hash table instead of an alist.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="463" Name="Deletion of Data Structure Sentinel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.
                  For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use OS-level preventative functionality. Not a complete solution.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="464" Name="Addition of Data Structure Sentinel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Proper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an abstraction library to abstract away risky APIs. This is not a complete solution.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use OS-level preventative functionality. This is not a complete solution.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="466" Name="Return of Pointer Value Outside of Expected Range" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="467" Name="Use of sizeof() on a Pointer Type" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use expressions such as "sizeof(*pointer)" instead of "sizeof(pointer)", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="468" Name="Incorrect Pointer Scaling" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a platform with high-level memory abstractions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Always use array indexing instead of direct pointer manipulation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use technologies for preventing buffer overflows.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="469" Name="Use of Pointer Subtraction to Determine Size" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to "walk" from one pointer to the other and calculate the difference. Always sanity check this number.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="47" Name="Path Equivalence: ' filename' (Leading Space)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="470" Name="Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refactor your code to avoid using reflection.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use user-controlled inputs to select and load classes or code.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Apply strict input validation by using whitelists or indirect selection to ensure that the user is only selecting allowable classes or code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="471" Name="Modification of Assumed-Immutable Data (MAID)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="472" Name="External Control of Assumed-Immutable Web Parameter" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="473" Name="PHP External Variable Modification" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="474" Name="Use of Function with Inconsistent Implementations" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="475" Name="Undefined Behavior for Input to API" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="476" Name="NULL Pointer Dereference" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.</Description>
            </Mitigation>
            <Mitigation>
               <Description>The choice could be made to use a language that is not susceptible to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Check the results of all functions that return a value and verify that the value is non-null before acting upon it.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="477" Name="Use of Obsolete Function" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider seriously the security implications of using an obsolete function. Consider using alternate functions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="478" Name="Missing Default Case in Switch Statement" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that there are no unaccounted for cases, when adjusting flow or values based on the value of a given variable. In switch statements, this can be accomplished through the use of the default label.</Description>
            </Mitigation>
            <Mitigation>
               <Description>In the case of switch style statements, the very simple act of creating a default case can mitigate this situation, if done correctly. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="479" Name="Signal Handler Use of a Non-reentrant Function" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Design signal handlers to only set flags rather than perform complex functionality.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that non-reentrant functions are not found in signal handlers.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="48" Name="Path Equivalence: 'file name' (Internal Whitespace)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="480" Name="Use of Incorrect Operator" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="481" Name="Assigning instead of Comparing" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many IDEs and static analysis products will detect this problem.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Place constants on the left. If one attempts to assign a constant with a variable, the compiler will of course produce an error.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="482" Name="Comparing instead of Assigning" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many IDEs and static analysis products will detect this problem.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="483" Name="Incorrect Block Delimitation" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always use explicit block delimitation and use static-analysis technologies to enforce this practice.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="484" Name="Omitted Break Statement in Switch" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.</Description>
            </Mitigation>
            <Mitigation>
               <Description>The functionality of omitting a break statement could be clarified with an if statement. This method is much safer.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="486" Name="Comparison of Classes by Name" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="487" Name="Reliance on Package-level Scope" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="488" Name="Exposure of Data Element to Wrong Session" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).</Description>
            </Mitigation>
            <Mitigation>
               <Description>In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="489" Name="Leftover Debug Code" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove debug code before deploying the application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="49" Name="Path Equivalence: 'filename/' (Trailing Slash)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="491" Name="Public cloneable() Method Without Final ('Object Hijack')" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make the cloneable() method final.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="492" Name="Use of Inner Class Containing Sensitive Data" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Inner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="493" Name="Critical Public Variable Without Final Modifier" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="494" Name="Download of Code Without Integrity Check" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform proper forward and reverse DNS lookups to detect DNS spoofing.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Encrypt the code with a reliable encryption scheme before transmitting.
                  This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code.
                  
                     
                        When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.
                        Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="495" Name="Private Data Structure Returned From A Public Method" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Declare the method private.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Clone the member data and keep an unmodified version of the data private to the object.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use public setter methods that govern how a private member can be modified.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="496" Name="Public Data Assigned to Private Array-Typed Field" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not allow objects to modify private members of a class.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="497" Name="Exposure of System Data to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="498" Name="Cloneable Class Containing Sensitive Information" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If you do make your classes clonable, ensure that your clone method is final and throw super.clone().</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="499" Name="Serializable Class Containing Sensitive Data" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make sure to prevent serialization of your objects.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="5" Name="J2EE Misconfiguration: Data Transmission Without Encryption" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>The application configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="50" Name="Path Equivalence: '//multiple/leading/slash'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="500" Name="Public Static Field Not Marked Final" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly identify the scope for all critical data elements, including whether they should be regarded as static.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Make any static fields private and constant.
                  A constant field is denoted by the keyword 'const' in C/C++ and ' final' in Java
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="501" Name="Trust Boundary Violation" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="502" Name="Deserialization of Untrusted Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Explicitly define a final object() to prevent deserialization.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Make fields transient to protect them from deserialization.
                  An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Whitelist acceptable classes. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="506" Name="Embedded Malicious Code" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="507" Name="Trojan Horse" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Most antivirus software scans for Trojan Horses.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Verify the integrity of the software that is being installed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="508" Name="Non-Replicating Malicious Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Antivirus software can help mitigate known malicious code.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Verify the integrity of the software that is being installed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="509" Name="Replicating Malicious Code (Virus or Worm)" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Antivirus software scans for viruses or worms.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Always verify the integrity of the software that is being installed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="51" Name="Path Equivalence: '/multiple//internal/slash'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="510" Name="Trapdoor" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always verify the integrity of the software that is being installed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Identify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="511" Name="Logic/Time Bomb" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always verify the integrity of the software that is being installed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="512" Name="Spyware" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use spyware detection and removal software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Always verify the integrity of the software that is being installed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="514" Name="Covert Channel" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="515" Name="Covert Storage Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="52" Name="Path Equivalence: '/multiple/trailing/slash//'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="520" Name=".NET Misconfiguration: Use of Impersonation" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Run the application with limited privilege to the underlying operating and file system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="521" Name="Weak Password Requirements" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Enforce usage of strong passwords. A password strength policy should contain the following attributes:
                  
                     
                        Minimum and maximum length;
                        Require mixed character sets (alpha, numeric, special, mixed case);
                        Do not contain user name;
                        Expiration;
                        No password reuse.
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Authentication mechanisms should always require sufficiently complex passwords and require that they be periodically changed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="522" Name="Insufficiently Protected Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an appropriate security mechanism to protect the credentials.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make appropriate use of cryptography to protect the credentials.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="523" Name="Unprotected Transport of Credentials" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="524" Name="Information Exposure Through Caching" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect information stored in cache.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not store unnecessarily sensitive information in the cache.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider using encryption in the cache.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="525" Name="Information Exposure Through Browser Caching" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect information stored in cache.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a restrictive caching policy for forms and web pages that potentially contain sensitive information.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not store unnecessarily sensitive information in the cache.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider using encryption in the cache.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="526" Name="Information Exposure Through Environmental Variables" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect information stored in environment variable from being exposed to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="527" Name="Exposure of CVS Repository to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="528" Name="Exposure of Core Dump File to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect the core dump files from unauthorized access.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="529" Name="Exposure of Access Control List Files to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect access control list files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="53" Name="Path Equivalence: '\multiple\\internal\backslash'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="530" Name="Exposure of Backup File to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="531" Name="Information Exposure Through Test Code" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove test code before deploying the application into production.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="532" Name="Inclusion of Sensitive Information in Log Files" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Remove debug log files before deploying the application into production.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Protect log files against unauthorized read/write.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Adjust configurations appropriately when software is transitioned from a debug state to production.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="535" Name="Information Exposure Through Shell Error Message" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="536" Name="Information Exposure Through Servlet Runtime Error Message" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="537" Name="Information Exposure Through Java Runtime Error Message" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not expose sensitive error information to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="538" Name="File and Directory Information Exposure" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not expose file and directory information to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="539" Name="Information Exposure Through Persistent Cookies" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not store sensitive information in persistent cookies.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="54" Name="Path Equivalence: 'filedir\' (Trailing Backslash)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="540" Name="Information Exposure Through Source Code" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="541" Name="Information Exposure Through Include Source Code" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not store sensitive information in include files.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Protect include files from being exposed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="543" Name="Use of Singleton Pattern Without Synchronization in a Multithreaded Context" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use the Thread-Specific Storage Pattern. See References.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Avoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="544" Name="Missing Standardized Error Handling Mechanism" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="546" Name="Suspicious Comment" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove comments that suggest the presence of bugs, incomplete functionality, or weaknesses, before deploying the application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="547" Name="Use of Hard-coded, Security-relevant Constants" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using hard-coded constants. Configuration files offer a more flexible solution.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="548" Name="Information Exposure Through Directory Listing" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="549" Name="Missing Password Field Masking" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="55" Name="Path Equivalence: '/./' (Single Dot Directory)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="550" Name="Information Exposure Through Server Error Message" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="551" Name="Incorrect Behavior Order: Authorization Before Parsing and Canonicalization" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="552" Name="Files or Directories Accessible to External Parties" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="553" Name="Command Shell in Externally Accessible Directory" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove any Shells accessible under the web root folder and children directories.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="554" Name="ASP.NET Misconfiguration: Not Using Input Validation Framework" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use the ASP.NET validation framework to check all program input before it is processed by the application. Example uses of the validation framework include checking to ensure that:
                  
                     
                        Phone number fields contain only valid characters in phone numbers
                        Boolean values are only "T" or "F"
                        Free-form strings are of a reasonable length and composition
                     
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="555" Name="J2EE Misconfiguration: Plaintext Password in Configuration File" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not hardwire passwords into your software.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use industry standard libraries to encrypt passwords before storage in configuration files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="556" Name="ASP.NET Misconfiguration: Use of Identity Impersonation" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use the least privilege principle.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="558" Name="Use of getlogin() in Multithreaded Application" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Using names for security purposes is not advised. Names are easy to forge and can have overlapping user IDs, potentially causing confusion or impersonation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="56" Name="Path Equivalence: 'filedir*' (Wildcard)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="560" Name="Use of umask() with chmod-style Argument" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use umask() with the correct argument.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If you suspect misuse of umask(), you can use grep to spot call instances of umask().</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="561" Name="Dead Code" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove dead code before deploying the application.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a static analysis tool to spot dead code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="562" Name="Return of Stack Variable Address" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use static analysis tools to spot return of the address of a stack variable.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="563" Name="Assignment to Variable without Use" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove unused variables from the code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="564" Name="SQL Injection: Hibernate" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>A non-SQL style database which is not subject to this flaw may be chosen.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Follow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Implement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use vigorous whitelist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="565" Name="Reliance on Cookies without Validation and Integrity Checking" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Add integrity checks to detect tampering.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="566" Name="Authorization Bypass Through User-Controlled SQL Primary Key" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an "accept known good" validation strategy.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="567" Name="Unsynchronized Access to Shared Data in a Multithreaded Context" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="568" Name="finalize() Method Without super.finalize()" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Call the super.finalize() method.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use static analysis tools to spot such issues in your code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="57" Name="Path Equivalence: 'fakedir/../realdir/filename'" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="570" Name="Expression is Always False" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use Static Analysis tools to spot such conditions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="571" Name="Expression is Always True" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use Static Analysis tools to spot such conditions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="572" Name="Call to Thread run() instead of start()" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use the start() method instead of the run() method.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="573" Name="Improper Following of Specification by Caller" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="574" Name="EJB Bad Practices: Use of Synchronization Primitives" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use Synchronization Primitives when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="575" Name="EJB Bad Practices: Use of AWT Swing" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use AWT/Swing when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="576" Name="EJB Bad Practices: Use of Java I/O" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use Java I/O when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="577" Name="EJB Bad Practices: Use of Sockets" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use Sockets when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="578" Name="EJB Bad Practices: Use of Class Loader" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use the Class Loader when writing EJBs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="579" Name="J2EE Bad Practices: Non-serializable Object Stored in Session" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>In order for session replication to work, the values the application stores as attributes in the session must implement the Serializable interface.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="58" Name="Path Equivalence: Windows 8.3 Filename" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Disable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="580" Name="clone() Method Without super.clone()" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Call super.clone() within your clone() method, when obtaining a new object.</Description>
            </Mitigation>
            <Mitigation>
               <Description>In some cases, you can eliminate the clone method altogether and use copy constructors.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="581" Name="Object Model Violation: Just One of Equals and Hashcode Defined" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Both Equals() and Hashcode() should be defined.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="582" Name="Array Declared Public, Final, and Static" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>In most situations the array should be made private.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="583" Name="finalize() Method Declared Public" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="584" Name="Return Inside Finally Block" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use a return statement inside the finally block. The finally block should have "cleanup" code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="585" Name="Empty Synchronized Block" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="586" Name="Explicit Call to Finalize()" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="587" Name="Assignment of a Fixed Address to a Pointer" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Never set a pointer to a fixed address.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="588" Name="Attempt to Access Child of a Non-structure Pointer" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>The choice could be made to use a language that is not susceptible to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Review of type casting operations can identify locations where incompatible types are cast.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="589" Name="Call to Non-ubiquitous API" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always test your code on any platform on which it is targeted to run on.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Test your code on the newest and oldest platform on which it is targeted to run on.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Develop a system to test for API functions that are not portable.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="59" Name="Improper Link Resolution Before File Access ('Link Following')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Follow the principle of least privilege when assigning access rights to entities in a software system.
                  Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="590" Name="Free of Memory not on the Heap" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Before freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, glibc in Linux provides protection against free of invalid pointers.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a language that provides abstractions for memory allocation and deallocation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a tool that dynamically detects memory management problems, such as valgrind.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="591" Name="Sensitive Data Storage in Improperly Locked Memory" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Check return values to ensure locking operations are successful.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="593" Name="Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a language or a library that provides a cryptography framework at a higher level of abstraction.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Most SSL_CTX functions have SSL counterparts that act on SSL-type objects.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Applications should set up an SSL_CTX completely, before creating SSL objects from it.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="594" Name="J2EE Framework: Saving Unserializable Objects to Disk" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="595" Name="Comparison of Object References Instead of Object Contents" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="597" Name="Use of Wrong Operator in String Comparison" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use equals() to compare strings.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="598" Name="Information Exposure Through Query Strings in GET Request" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When sensitive information is sent, use of the POST method is recommended (e.g. registration form).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="599" Name="Missing Validation of OpenSSL Certificate" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that proper authentication is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="6" Name="J2EE Misconfiguration: Insufficient Session-ID Length" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.</Description>
            </Mitigation>
            <Mitigation>
               <Description>A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="600" Name="Uncaught Exception in Servlet " Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement Exception blocks to handle all types of Exceptions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="601" Name="URL Redirection to Untrusted Site ('Open Redirect')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  Use a whitelist of approved URLs or domains to be used for redirection.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
                  For example, ID 1 could map to "/login.asp" and ID 2 could map to "http://www.example.com/". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
                  Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="602" Name="Client-Side Enforcement of Server-Side Security" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.
                  Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="603" Name="Use of Client-Side Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not rely on client side data. Always perform server side authentication.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="605" Name="Multiple Binds to the Same Port" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Restrict server socket address to known local addresses.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="606" Name="Unchecked Input for Loop Condition" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not use user-controlled data for loop conditions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform input validation.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="607" Name="Public Static Final Field References Mutable Object" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect mutable objects by making them private. Restrict access to the getter and setter as well.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="608" Name="Struts: Non-private Field in ActionForm Class" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="609" Name="Double-Checked Locking" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the "volatile" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="61" Name="UNIX Symbolic Link (Symlink) Following" Abstraction="Compound" Structure="Composite" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Follow the principle of least privilege when assigning access rights to entities in a software system.
                  Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="610" Name="Externally Controlled Reference to a Resource in Another Sphere" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="611" Name="Improper Restriction of XML External Entity Reference" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Many XML parsers and validators can be configured to disable external entity expansion.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="612" Name="Information Exposure Through Indexing of Private Data" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="613" Name="Insufficient Session Expiration" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Set sessions/credentials expiration date.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="614" Name="Sensitive Cookie in HTTPS Session Without 'Secure' Attribute" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always set the secure attribute when the cookie should sent via HTTPS only.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="615" Name="Information Exposure Through Comments" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="616" Name="Incomplete Identification of Uploaded File Variables (PHP)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use PHP 4 or later.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))</Description>
            </Mitigation>
            <Mitigation>
               <Description>For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="617" Name="Reachable Assertion" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform input validation on user data.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="618" Name="Exposed Unsafe ActiveX Method" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use code signing, although this does not protect against any weaknesses that are already in the control.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Where possible, avoid marking the control as safe for scripting.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="619" Name="Dangling Database Cursor ('Cursor Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Close cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="62" Name="UNIX Hard Link" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Follow the principle of least privilege when assigning access rights to entities in a software system.
                  Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="620" Name="Unverified Password Change" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When prompting for a password change, force the user to provide the original password in addition to the new password.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use "forgotten password" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="621" Name="Variable Extraction Error" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use whitelists of variable names that can be extracted.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider refactoring your code to avoid extraction routines altogether.</Description>
            </Mitigation>
            <Mitigation>
               <Description>In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="622" Name="Improper Validation of Function Hook Arguments" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that all arguments are verified, as defined by the API you are protecting.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Drop privileges before invoking such functions, if possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="623" Name="Unsafe ActiveX Control Marked Safe For Scripting" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>During development, do not mark it as safe for scripting.</Description>
            </Mitigation>
            <Mitigation>
               <Description>After distribution, you can set the kill bit for the control so that it is not accessible from Internet Explorer.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="624" Name="Executable Regular Expression Error" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \Q and \E in Perl.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="625" Name="Permissive Regular Expression" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When applicable, ensure that the regular expression marks beginning and ending string patterns, such as "/^string$/" for Perl.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="626" Name="Null Byte Interaction Error (Poison Null Byte)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Remove null bytes from all incoming strings.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="627" Name="Dynamic Variable Evaluation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refactor the code to avoid dynamic variable evaluation whenever possible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use only whitelists of acceptable variable or function names.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For function names, ensure that you are only calling functions that accept the proper number of arguments, to avoid unexpected null arguments.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="628" Name="Function Call with Incorrectly Specified Arguments" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make sure your API's are stable before you use them in production code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="636" Name="Not Failing Securely ('Failing Open')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Subdivide and allocate resources and components so that a failure in one part does not affect the entire product.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="637" Name="Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid complex security mechanisms when simpler ones would meet requirements. Avoid complex data models, and unnecessarily complex operations. Adopt architectures that provide guarantees, simplify understanding through elegance and abstraction, and that can be implemented similarly. Modularize, isolate and do not trust complex code, and apply other secure programming principles on these modules (e.g., least privilege) to mitigate vulnerabilities.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="638" Name="Not Using Complete Mediation" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="639" Name="Authorization Bypass Through User-Controlled Key" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="64" Name="Windows Shortcut Following (.LNK)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Follow the principle of least privilege when assigning access rights to entities in a software system.
                  Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="640" Name="Weak Password Recovery Mechanism for Forgotten Password" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use standard weak security questions and use several security questions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Assign a new temporary password rather than revealing the original password.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="641" Name="Improper Restriction of Names for Files and Other Resources" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not allow users to control names of resources used on the server side.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform whitelist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="642" Name="External Control of Critical State Data" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Store state information and sensitive data on the server side only.
                  Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.
                  If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  With a stateless protocol such as HTTP, use some frameworks can maintain the state for you.
                  Examples include ASP.NET View State and the OWASP ESAPI Session Management feature.
                  Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="643" Name="Improper Neutralization of Data within XPath Expressions ('XPath Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="644" Name="Improper Neutralization of HTTP Headers for Scripting Syntax" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Disable script execution functionality in the clients' browser.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="645" Name="Overly Restrictive Account Lockout Mechanism" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="646" Name="Reliance on File Name or Extension of Externally-Supplied File" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make decisions on the server side based on file content and not on file name or extension.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="647" Name="Use of Non-Canonical URL Paths for Authorization Decisions" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Reject all alternate path encodings that are not in the expected canonical form.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="648" Name="Incorrect Use of Privileged APIs" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Only call privileged APIs from safe, consistent and expected state.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="649" Name="Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="65" Name="Windows Hard Link" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Follow the principle of least privilege when assigning access rights to entities in a software system.
                  Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="650" Name="Trusting HTTP Permission Methods on the Server Side" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Configure ACLs on the server side to ensure that proper level of access control is defined for each accessible resource representation.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="651" Name="Information Exposure Through WSDL File" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make sure that WSDL does not describe methods that should not be publicly accessible. Make sure to protect service methods that should not be publicly accessible with access controls.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="652" Name="Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use parameterized queries. This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="653" Name="Insufficient Compartmentalization" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Break up privileges between different modules, objects or entities. Minimize the interfaces between modules and require strong access control between them.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="654" Name="Reliance on a Single Factor in a Security Decision" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use redundant access rules on different choke points (e.g., firewalls).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="655" Name="Insufficient Psychological Acceptability" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Where possible, perform human factors and usability studies to identify where your product's security mechanisms are difficult to use, and why.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Make the security mechanism as seamless as possible, while also providing the user with sufficient details when a security decision produces unexpected results.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="656" Name="Reliance on Security Through Obscurity" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="657" Name="Violation of Secure Design Principles" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="66" Name="Improper Handling of File Names that Identify Virtual Resources" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="662" Name="Improper Synchronization" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use industry standard APIs to synchronize your code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="663" Name="Use of a Non-reentrant Function in a Concurrent Context" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use reentrant functions if available.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Add synchronization to your non-reentrant function.</Description>
            </Mitigation>
            <Mitigation>
               <Description>In Java, use the ReentrantLock Class.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="664" Name="Improper Control of a Resource Through its Lifetime" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use Static analysis tools to check for unreleased resources.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="665" Name="Improper Initialization" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, in Java, if the programmer does not explicitly initialize a variable, then the code could produce a compile-time error (if the variable is local) or automatically initialize the variable to the default value for the variable's type. In Perl, if explicit initialization is not performed, then a default value of undef is assigned, which is interpreted as 0, false, or an equivalent value depending on the context in which the variable is accessed.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Pay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Avoid race conditions (CWE-362) during initialization routines.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run or compile your software with settings that generate warnings about uninitialized variables or data.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="666" Name="Operation on Resource in Wrong Phase of Lifetime" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Follow the resource's lifecycle from creation to release.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="667" Name="Improper Locking" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use industry standard APIs to implement locking mechanism.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="668" Name="Exposure of Resource to Wrong Sphere" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="669" Name="Incorrect Resource Transfer Between Spheres" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="67" Name="Improper Handling of Windows Device Names" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Be familiar with the device names in the operating system where your system is deployed. Check input for these device names.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="670" Name="Always-Incorrect Control Flow Implementation" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="671" Name="Lack of Administrator Control over Security" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="672" Name="Operation on a Resource after Expiration or Release" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="673" Name="External Influence of Sphere Definition" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="674" Name="Uncontrolled Recursion" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Limit the number of recursive calls to a reasonable number.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="675" Name="Duplicate Operations on Resource" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="676" Name="Use of Potentially Dangerous Function" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the "banned.h" include file from Microsoft's SDL. [REF-554] [REF-7]</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="681" Name="Incorrect Conversion between Numeric Types" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid making conversion between numeric types. Always check for the allowed ranges.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="682" Name="Incorrect Calculation" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, "not-a-number" calculations, and how your language handles numbers that are too large or too small for its underlying representation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.
                  Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use languages, libraries, or frameworks that make it easier to handle numbers without unexpected consequences.
                  Examples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++).
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="683" Name="Function Call With Incorrect Order of Arguments" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use the function, procedure, or routine as specified.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the software. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="684" Name="Incorrect Provision of Specified Functionality" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Ensure that your code strictly conforms to specifications.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="685" Name="Function Call With Incorrect Number of Arguments" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the software. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="686" Name="Function Call With Incorrect Argument Type" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the software. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="687" Name="Function Call With Incorrectly Specified Argument Value" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="688" Name="Function Call With Incorrect Variable or Reference as Argument" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the software. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="69" Name="Improper Handling of Windows ::DATA Alternate Data Stream" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Software tools are capable of finding ADSs on your system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that the source code correctly parses the filename to read or write to the correct stream.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="693" Name="Protection Mechanism Failure" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="694" Name="Use of Multiple Resources with Duplicate Identifier" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Where possible, use unique identifiers. If non-unique identifiers are detected, then do not operate any resource with a non-unique identifier and report the error appropriately.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="695" Name="Use of Low-Level Functionality" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="696" Name="Incorrect Behavior Order" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="697" Name="Incorrect Comparison" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="698" Name="Execution After Redirect (EAR)" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="7" Name="J2EE Misconfiguration: Missing Custom Error Page" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Handle exceptions appropriately in source code.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Always define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not attempt to process an error or attempt to mask it.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Verify return values are correct and do not supply sensitive information about the system.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="703" Name="Improper Check or Handling of Exceptional Conditions" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="704" Name="Incorrect Type Conversion or Cast" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="705" Name="Incorrect Control Flow Scoping" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="706" Name="Use of Incorrectly-Resolved Name or Reference" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="707" Name="Improper Enforcement of Message or Data Structure" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="708" Name="Incorrect Ownership Assignment" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Periodically review the privileges and their owners.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated tools to check for privilege settings.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="72" Name="Improper Handling of Apple HFS+ Alternate Data Stream Path" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="73" Name="External Control of File Name or Path" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap provide this capability.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.
                  Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="732" Name="Incorrect Permission Assignment for Critical Resource" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="733" Name="Compiler Optimization Removal or Modification of Security-critical Code" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="74" Name="Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter control-plane syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="749" Name="Exposed Dangerous Method or Function" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Identify all exposed functionality. Explicitly list all functionality that must be exposed to some user or set of users. Identify which functionality may be:
                  
                     
                        accessible to all users
                        restricted to a small set of privileged users
                        prevented from being directly accessible at all
                     
                  
                  Ensure that the implemented code follows these expectations. This includes setting the appropriate access modifiers where applicable (public, private, protected, etc.) or not marking ActiveX controls safe-for-scripting.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="75" Name="Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter special element syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="754" Name="Improper Check for Unusual or Exceptional Conditions" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Check the results of all functions that return a value and verify that the value is expected.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
                  Exposing additional information to a potential attacker in the context of an exceptional condition can help the attacker determine what attack vectors are most likely to succeed beyond DoS.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use system limits, which should help to prevent resource exhaustion. However, the software should still handle low resource conditions since they may still occur.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="755" Name="Improper Handling of Exceptional Conditions" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="756" Name="Missing Custom Error Page" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="757" Name="Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="758" Name="Reliance on Undefined, Unspecified, or Implementation-Defined Behavior" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="759" Name="Use of a One-Way Hash without a Salt" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="76" Name="Improper Neutralization of Equivalent Special Elements" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter equivalent special element syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="760" Name="Use of a One-Way Hash with a Predictable Salt" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="761" Name="Free of Pointer not at Start of Buffer" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, glibc in Linux provides protection against free of invalid pointers.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a language that provides abstractions for memory allocation and deallocation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a tool that dynamically detects memory management problems, such as valgrind.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="762" Name="Mismatched Memory Management Routines" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Choose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.
                  For example, glibc in Linux provides protection against free of invalid pointers.
                  When using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].
                  To help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, glibc in Linux provides protection against free of invalid pointers.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a language that provides abstractions for memory allocation and deallocation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a tool that dynamically detects memory management problems, such as valgrind.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="763" Name="Release of Invalid Pointer or Reference" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().</Description>
            </Mitigation>
            <Mitigation>
               <Description>When programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, glibc in Linux provides protection against free of invalid pointers.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a language that provides abstractions for memory allocation and deallocation.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a tool that dynamically detects memory management problems, such as valgrind.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="764" Name="Multiple Locks of a Critical Resource" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="765" Name="Multiple Unlocks of a Critical Resource" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="766" Name="Critical Data Element Declared Public" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="767" Name="Access to Critical Private Variable via Public Method" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="768" Name="Incorrect Short Circuit Evaluation" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Minimizing the number of statements in a conditional that produce side effects will help to prevent the likelihood of short circuit evaluation to alter control flow in an unexpected way.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="77" Name="Improper Neutralization of Special Elements used in a Command ('Command Injection')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If possible, ensure that all external commands called from the program are statically created.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Run time: Run time policy enforcement may be used in a whitelist fashion to prevent use of any non-sanctioned commands.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Assign permissions to the software system that prevents the user from accessing/opening privileged files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="770" Name="Allocation of Resources Without Limits or Throttling" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Mitigation of resource exhaustion attacks requires that the target system either:
                  
                     
                        recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays
                        uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.
                     
                  
                  The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.
                  The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that protocols have specific limits of scale placed on them.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.
                  Ensure that all failures in resource allocation place the system into a safe posture.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
                  When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
                  Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="771" Name="Missing Reference to Active Allocated Resource" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
                  When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
                  Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="772" Name="Missing Release of Resource after Effective Lifetime" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
                  When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
                  Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="773" Name="Missing Reference to Active File Descriptor or Handle" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
                  When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
                  Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="774" Name="Allocation of File Descriptors or Handles Without Limits or Throttling" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
                  When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
                  Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="775" Name="Missing Release of File Descriptor or Handle after Effective Lifetime" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.
                  When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.
                  Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="776" Name="Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Before parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="777" Name="Regular Expression without Anchors" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Be sure to understand both what will be matched and what will not be matched by a regular expression. Anchoring the ends of the expression will allow the programmer to define a whitelist strictly limited to what is matched by the text in the regular expression. If you are using a package that only matches one line by default, ensure that you can match multi-line inputs if necessary.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="778" Name="Insufficient Logging" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a centralized logging mechanism that supports multiple levels of detail. Ensure that all security-related successes and failures can be logged.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="779" Name="Logging of Excessive Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states "last message repeated X times" when recording repeated events.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the software. This may result in a denial-of-service to legitimate software users, but it will prevent the software from adversely impacting the entire system.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Adjust configurations appropriately when software is transitioned from a debug state to production.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="78" Name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Description>If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
                  Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When constructing OS command strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.
                  Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ";" and "&gt;" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.
                  Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
                  In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use runtime policy enforcement to create a whitelist of allowable commands, then prevent use of any command that does not appear in the whitelist. Technologies such as AppArmor are available to do this.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="780" Name="Use of RSA Algorithm without OAEP" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="781" Name="Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If METHOD_NEITHER is required for the IOCTL, then ensure that all user-space addresses are properly validated before they are first accessed. The ProbeForRead and ProbeForWrite routines are available for this task. Also properly protect and manage the user-supplied buffers, since the I/O Manager does not do this when METHOD_NEITHER is being used. See References.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace. See References.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="782" Name="Exposed IOCTL with Insufficient Access Control" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>In Windows environments, use proper access control for the associated device or device namespace. See References.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="783" Name="Operator Precedence Logic Error" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Regularly wrap sub-expressions in parentheses, especially in security-critical code.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="784" Name="Reliance on Cookies without Validation and Integrity Checking in a Security Decision" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Add integrity checks to detect tampering.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="785" Name="Use of Path Manipulation Function without Maximum-sized Buffer" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="786" Name="Access of Memory Location Before Start of Buffer" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="787" Name="Out-of-bounds Write" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="788" Name="Access of Memory Location After End of Buffer" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="789" Name="Uncontrolled Memory Allocation" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Perform adequate input validation against any value that influences the amount of memory that is allocated. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="79" Name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" Abstraction="Base" Structure="Simple" Status="Usable">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.
                  For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.
                  Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:
                  
                     
                        HTML body
                        Element attributes (such as src="XYZ")
                        URIs
                        JavaScript sections
                        Cascading Style Sheets and style property
                     
                  
                  etc. Note that HTML Entity Encoding is only appropriate for the HTML body.
                  Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.
                  Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon ("&lt;3") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the "&lt;" character, which would need to be escaped or otherwise handled. In this case, stripping the "&lt;" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.
                  Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.
                  Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="790" Name="Improper Filtering of Special Elements" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="791" Name="Incomplete Filtering of Special Elements" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="792" Name="Incomplete Filtering of One or More Instances of Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="793" Name="Only Filtering One Instance of a Special Element" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="794" Name="Incomplete Filtering of Multiple Instances of Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="795" Name="Only Filtering Special Elements at a Specified Location" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="796" Name="Only Filtering Special Elements Relative to a Marker" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="797" Name="Only Filtering Special Elements at an Absolute Position" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="798" Name="Use of Hard-coded Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].
                  In Windows environments, the Encrypted File System (EFS) may provide some protection.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a "first login" mode that requires the user to enter a unique strong password or key.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.
                  Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For front-end to back-end connections: Three solutions are possible, although none are complete.
                  
                     
                        The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.
                        Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.
                        Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.
                     
                  
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="799" Name="Improper Control of Interaction Frequency" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="8" Name="J2EE Misconfiguration: Entity Bean Declared Remote" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Declare Java beans "local" when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="80" Name="Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="804" Name="Guessable CAPTCHA" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="805" Name="Buffer Access with Incorrect Length Value" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.
                  Be wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  Examples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.
                  For example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Consider adhering to the following rules when allocating and managing an application's memory:
                  
                     
                        Double check that your buffer is as large as you specify.
                        When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.
                        Check buffer boundaries if accessing the buffer in a loop and make sure you are not in danger of writing past the allocated space.
                        If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.
                     
                  
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.
                  Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-59] [REF-57].</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="806" Name="Buffer Access Using Size of Source Buffer" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use an abstraction library to abstract away risky APIs. Examples include the Safe C String Library (SafeStr) by Viega, and the Strsafe.h library from Microsoft. This is not a complete solution, since many buffer overflows are not related to strings.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. This is not necessarily a complete solution, since these canary-based mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Programmers should adhere to the following rules when allocating and managing their applications memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if calling this function in a loop and make sure you are not in danger of writing past the allocated space. Truncate all input strings to a reasonable length before passing them to the copy and concatenation functions</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code.
                  Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].</Description>
            </Mitigation>
            <Mitigation>
               <Description>Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="807" Name="Reliance on Untrusted Inputs in a Security Decision" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Store state information and sensitive data on the server side only.
                  Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.
                  If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  With a stateless protocol such as HTTP, use a framework that maintains the state for you.
                  Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].
                  Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
                  Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="81" Name="Improper Neutralization of Script in an Error Message Web Page" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Do not write user-controlled input to error pages.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="82" Name="Improper Neutralization of Script in Attributes of IMG Tags in a Web Page" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="820" Name="Missing Synchronization" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="821" Name="Incorrect Synchronization" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="822" Name="Untrusted Pointer Dereference" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="823" Name="Use of Out-of-range Pointer Offset" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="824" Name="Access of Uninitialized Pointer" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="825" Name="Expired Pointer Dereference" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Choose a language that provides automatic memory management.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="826" Name="Premature Release of Resource During Expected Lifetime" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="827" Name="Improper Control of Document Type Definition" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="828" Name="Signal Handler with Functionality that is not Asynchronous-Safe" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Eliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls.
                  Note: This will not always be possible and may require large portions of the software to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="829" Name="Inclusion of Functionality from Untrusted Control Sphere" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
                  For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.
                  This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
                  Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="83" Name="Improper Neutralization of Script in Attributes in a Web Page" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="830" Name="Inclusion of Web Functionality from an Untrusted Source" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="831" Name="Signal Handler Function Associated with Multiple Signals" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="832" Name="Unlock of a Resource that is not Locked" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="833" Name="Deadlock" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="834" Name="Excessive Iteration" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="835" Name="Loop with Unreachable Exit Condition ('Infinite Loop')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="836" Name="Use of Password Hash Instead of Password for Authentication" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="837" Name="Improper Enforcement of a Single, Unique Action" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="838" Name="Inappropriate Encoding for Output Context" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Where possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.
                  Note that some template mechanisms provide built-in support for the appropriate encoding.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="839" Name="Numeric Range Comparison Without Minimum Check" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If the number to be used is always expected to be positive, change the variable type from signed to unsigned or size_t.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="84" Name="Improper Neutralization of Encoded URI Schemes in a Web Page" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Resolve all URIs to absolute or canonical representations before processing.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="841" Name="Improper Enforcement of Behavioral Workflow" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="842" Name="Placement of User into Incorrect Group" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="843" Name="Access of Resource Using Incompatible Type ('Type Confusion')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="85" Name="Doubled Character XSS Manipulations" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Resolve all filtered input to absolute or canonical representations before processing.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="86" Name="Improper Neutralization of Invalid Characters in Identifiers in Web Pages" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="862" Name="Missing Authorization" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.
                  One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="863" Name="Incorrect Authorization" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.
                  Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.
                  One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="87" Name="Improper Neutralization of Alternate XSS Syntax" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Resolve all input to absolute or canonical representations before processing.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Carefully check each input parameter against a rigorous positive specification (whitelist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.
                  The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="88" Name="Argument Injection or Modification" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.
                  Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="89" Name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.
                  For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.
                  Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using "exec" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.
                  Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).
                  Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When constructing SQL query strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.
                  Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name "O'Reilly" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the "'" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.
                  When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.
                  If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.
                  In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
            <Mitigation>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="9" Name="J2EE Misconfiguration: Weak Access Permissions for EJB Methods" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="90" Name="Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="908" Name="Use of Uninitialized Resource" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Avoid race conditions (CWE-362) during initialization routines.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run or compile the software with settings that generate warnings about uninitialized variables or data.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="909" Name="Missing Initialization of Resource" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Avoid race conditions (CWE-362) during initialization routines.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run or compile your software with settings that generate warnings about uninitialized variables or data.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="91" Name="XML Injection (aka Blind XPath Injection)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="910" Name="Use of Expired File Descriptor" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="911" Name="Improper Update of Reference Count" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="912" Name="Hidden Functionality" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Always verify the integrity of the software that is being installed.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="913" Name="Improper Control of Dynamically-Managed Code Resources" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>For any externally-influenced input, check the input against a white list of acceptable values.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Refactor the code so that it does not need to be dynamically managed.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="914" Name="Improper Control of Dynamically-Identified Variables" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>For any externally-influenced input, check the input against a white list of internal program variables that are allowed to be modified.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Refactor the code so that internal program variables do not need to be dynamically identified.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="915" Name="Improperly Controlled Modification of Dynamically-Determined Object Attributes" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  If available, use features of the language or framework that allow specification of whitelists of attributes or fields that are allowed to be modified. If possible, prefer whitelists over black lists.
                  For applications written with Ruby on Rails, use the attr_accessible (whitelist) or attr_protected (blacklist) macros in each class that may be used in mass assignment.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For any externally-influenced input, check the input against a white list of internal object attributes or fields that are allowed to be modified.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Refactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="916" Name="Use of Password Hash With Insufficient Computational Effort" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.
                  Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.
                  Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="917" Name="Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="918" Name="Server-Side Request Forgery (SSRF)" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="920" Name="Improper Restriction of Power Consumption" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="921" Name="Storage of Sensitive Data in a Mechanism without Access Control" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="922" Name="Insecure Storage of Sensitive Information" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="923" Name="Improper Restriction of Communication Channel to Intended Endpoints" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="924" Name="Improper Enforcement of Message Integrity During Transmission in a Communication Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="925" Name="Improper Verification of Intent by Broadcast Receiver" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="926" Name="Improper Export of Android Application Components" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If they do not need to be shared by other applications, explicitly mark components with android:exported="false" in the application manifest.</Description>
            </Mitigation>
            <Mitigation>
               <Description>If you only intend to use exported components between related apps under your control, use android:protectionLevel="signature" in the xml manifest to restrict access to applications signed by you.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Limit Content Provider permissions (read/write) as appropriate.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Limit Content Provider permissions (read/write) as appropriate.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="927" Name="Use of Implicit Intent for Sensitive Communication" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="93" Name="Improper Neutralization of CRLF Sequences ('CRLF Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using CRLF as a special sequence.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Appropriately filter or quote CRLF sequences in user-controlled input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="939" Name="Improper Authorization in Handler for Custom URL Scheme" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.
                  When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="94" Name="Improper Control of Generation of Code ('Code Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Refactor your program so that you do not have to dynamically generate code.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your software.
                  Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  To reduce the likelihood of code injection, use stringent whitelists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="940" Name="Improper Verification of Source of a Communication Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using a man-in-the-middle attack.
                  When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="941" Name="Incorrectly Specified Destination in a Communication Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="942" Name="Overly Permissive Cross-domain Whitelist" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="943" Name="Improper Neutralization of Special Elements in Data Query Logic" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations/>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="95" Name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Potential_Mitigations>
            <Mitigation>
               <Description>If possible, refactor your code so that it does not need to use eval() at all.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.
                  Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="96" Name="Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Perform proper output validation and escaping to neutralize all code syntax from data written to code files.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="97" Name="Improper Neutralization of Server-Side Includes (SSI) Within a Web Page" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter server-side include syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="98" Name="Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.
                  For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.
                  OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.
                  This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.
                  Be careful to avoid CWE-243 and other weaknesses related to jails.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
                  When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.
                  Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.
                  This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.
                  Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
            </Mitigation>
            <Mitigation>
               <Description>Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.</Description>
            </Mitigation>
            <Mitigation>
               <Description>
                  When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.
                  Often, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009.
               </Description>
            </Mitigation>
            <Mitigation>
               <Description>Set allow_url_fopen to false, which limits the ability to include files from remote locations.</Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
      <Weakness seq="1999-0001" type="CAN" ID="99" Name="Improper Control of Resource Identifiers ('Resource Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Potential_Mitigations>
            <Mitigation>
               <Description>
                  Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.
                  When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."
                  Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.
               </Description>
            </Mitigation>
         </Potential_Mitigations>
      </Weakness>
   </Weaknesses>
</Weakness_Catalog>