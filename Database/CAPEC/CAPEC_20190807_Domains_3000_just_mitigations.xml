<?xml version="1.0" encoding="UTF-8"?>
<Attack_Pattern_Catalog xmlns="http://capec.mitre.org/capec-3" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="VIEW LIST: CAPEC-3000: Domains of Attack" Version="3.1" Date="2019-04-04" xsi:schemaLocation="http://capec.mitre.org/capec-3 http://capec.mitre.org/data/xsd/ap_schema_v3.1.xsd">
   <Attack_Patterns>
      <Attack_Pattern ID="1" Name="Accessing Functionality Not Properly Constrained by ACLs" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>In a J2EE setting, administrators can associate a role that is impossible for the authenticator to grant users, such as "NoAccess", with all Servlets to which access is guarded by a limited number of servlets visible to, and accessible by, the user.</xhtml:p>
               <xhtml:p>Having done so, any direct access to those protected Servlets will be prohibited by the web container.</xhtml:p>
               <xhtml:p>In a more general setting, the administrator must mark every resource besides the ones supposed to be exposed to the user as accessible by a role impossible for the user to assume. The default security setting must be to deny access and then grant access only to those resources intended by business logic.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="10" Name="Buffer Overflow via Environment Variables" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Do not expose environment variable to the user.</Mitigation>
            <Mitigation>Do not use untrusted data in your environment variables.</Mitigation>
            <Mitigation>Use a language or compiler that performs automatic bounds checking</Mitigation>
            <Mitigation>There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="100" Name="Overflow Buffers" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use secure functions not vulnerable to buffer overflow.</Mitigation>
            <Mitigation>If you have to use dangerous functions, make sure that you do boundary checking.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation>
            <Mitigation>Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="101" Name="Server Side Include (SSI) Injection" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them</Mitigation>
            <Mitigation>All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive</Mitigation>
            <Mitigation>Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="102" Name="Session Sidejacking" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.</Mitigation>
            <Mitigation>Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="103" Name="Clickjacking" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.</Mitigation>
            <Mitigation>Turn off JavaScript, Flash and disable CSS.</Mitigation>
            <Mitigation>When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="104" Name="Cross Zone Scripting" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Disable script execution.</Mitigation>
            <Mitigation>Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone</Mitigation>
            <Mitigation>Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone</Mitigation>
            <Mitigation>Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum</Mitigation>
            <Mitigation>Ensure proper HTML output encoding before writing user supplied data to the page</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="105" Name="HTTP Request Splitting" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Make sure to install the latest vendor security patches available for the web server.</Mitigation>
            <Mitigation>If possible, make use of SSL.</Mitigation>
            <Mitigation>Install a web application firewall that has been secured against HTTP Request Splitting</Mitigation>
            <Mitigation>Use web servers that employ a tight HTTP parsing process</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="107" Name="Cross Site Tracing" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.</Mitigation>
            <Mitigation>Patch web browser against known security origin policy bypass exploits.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="108" Name="Command Line Execution through SQL Injection" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Disable MSSQL xp_cmdshell directive on the database</Mitigation>
            <Mitigation>Properly validate the data (syntactically and semantically) before writing it to the database.</Mitigation>
            <Mitigation>Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="109" Name="Object Relational Mapping Injection" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework</Mitigation>
            <Mitigation>Ensure to keep up to date with security relevant updates to the persistence framework used within your application.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="11" Name="Cause Web Server Misclassification" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: Server routines should be determined by content not determined by filename or file extension.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="110" Name="SQL Injection through SOAP Parameter Tampering" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Properly validate and sanitize/reject user input at the service provider.</Mitigation>
            <Mitigation>Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.</Mitigation>
            <Mitigation>At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="111" Name="JSON Hijacking (aka JavaScript Hijacking)" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.</Mitigation>
            <Mitigation>On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).</Mitigation>
            <Mitigation>Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.</Mitigation>
            <Mitigation>Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="112" Name="Brute Force" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.</Mitigation>
            <Mitigation>Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="113" Name="API Manipulation" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="114" Name="Authentication Abuse" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="115" Name="Authentication Bypass" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="116" Name="Excavation" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Minimize error/response output to only what is necessary for functional use or corrective language.</Mitigation>
            <Mitigation>Remove potentially sensitive information that is not necessary for the application's functionality.</Mitigation>
         </Mitigations>
         
         <Notes>
            <Note Type="Other">Large quantities of data is often moved from the target system to some other adversary controlled system. Data found on a target system might require extensive resources to be fully analyzed. Using these resources on the target system might enable a defender to detect the adversary. Additionally, proper analysis tools required might not be available on the target system.</Note>
            <Note Type="Other">This attack differs from Data Interception and other data collection attacks in that the attacker actively queries the target rather than simply watching for the target to reveal information.</Note>
         </Notes>
         
      </Attack_Pattern>
      <Attack_Pattern ID="117" Name="Interception" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="12" Name="Choosing Message Identifier" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Associate some ACL (in the form of a token) with an authenticated user which they provide middleware. The middleware uses this token as part of its channel/message selection for that client, or part of a discerning authorization decision for privileged channels/messages.</xhtml:p>
               <xhtml:p>The purpose is to architect the system in a way that associates proper authentication/authorization with each channel/message.</xhtml:p>
            </Mitigation>
            <Mitigation>Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="120" Name="Double Encoding" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation>
            <Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.</Mitigation>
            <Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation>
            <Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation>
            <Mitigation>Refer to the RFCs to safely decode URL.</Mitigation>
            <Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</Mitigation>
            <Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="121" Name="Exploit Test APIs" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure that production systems to not contain sample or test APIs and that these APIs are only used in development environments.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="122" Name="Privilege Abuse" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="123" Name="Buffer Manipulation" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="124" Name="Shared Data Manipulation" Abstraction="Meta" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="125" Name="Flooding" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure that protocols have specific limits of scale configured.</Mitigation>
            <Mitigation>Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.</Mitigation>
            <Mitigation>Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="126" Name="Path Traversal" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Configure the access control correctly.</Mitigation>
            <Mitigation>Design: Enforce principle of least privilege.</Mitigation>
            <Mitigation>Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.</Mitigation>
            <Mitigation>Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
            <Mitigation>Implementation: Use indirect references rather than actual file names.</Mitigation>
            <Mitigation>Implementation: Use possible permissions on file access when developing and deploying web applications.</Mitigation>
            <Mitigation>Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="127" Name="Directory Indexing" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.</Mitigation>
            <Mitigation>2. Preventing with .htaccess in Apache web server: In .htaccess, write "Options-indexes".</Mitigation>
            <Mitigation>3. Suppressing error messages: using error 403 "Forbidden" message exactly like error 404 "Not Found" message.</Mitigation>
         </Mitigations>
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="128" Name="Integer Attacks" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="129" Name="Pointer Manipulation" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="13" Name="Subverting Environment Variable Values" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Protect environment variables against unauthorized read and write access.</Mitigation>
            <Mitigation>Protect the configuration files which contain environment variables against illegitimate read and write access.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
            <Mitigation>Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.</Mitigation>
         </Mitigations>
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="130" Name="Excessive Allocation" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Limit the amount of resources that are accessible to unprivileged users.</Mitigation>
            <Mitigation>Assume all input is malicious. Consider all potentially relevant properties when validating input.</Mitigation>
            <Mitigation>Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</Mitigation>
            <Mitigation>Use resource-limiting settings, if possible.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="131" Name="Resource Leak Exposure" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).</Mitigation>
            <Mitigation>Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)</Mitigation>
            <Mitigation>Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="132" Name="Symlink Attack" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.</Mitigation>
            <Mitigation>Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.</Mitigation>
         </Mitigations>
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="133" Name="Try All Common Switches" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Minimize switch and option functionality to only that necessary for correct function of the command.</Mitigation>
            <Mitigation>Implementation: Remove all debug and testing options from production code.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="134" Name="Email Injection" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="135" Name="Format String Injection" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Limit the usage of formatting string functions.</Mitigation>
            <Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="136" Name="LDAP Injection" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.</Mitigation>
            <Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="137" Name="Parameter Injection" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.</Mitigation>
            <Mitigation>Treat all user input as untrusted data that must be validated before use.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="138" Name="Reflection Injection" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="139" Name="Relative Path Traversal" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content.</Mitigation>
            <Mitigation>Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.</Mitigation>
            <Mitigation>Implementation: Prefer working without user input when using file system calls</Mitigation>
            <Mitigation>Implementation: Use indirect references rather than actual file names.</Mitigation>
            <Mitigation>Implementation: Use possible permissions on file access when developing and deploying web applications.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="14" Name="Client-side Injection-induced Buffer Overflow" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>The client software should not install untrusted code from a non-authenticated server.</Mitigation>
            <Mitigation>The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.</Mitigation>
            <Mitigation>Perform input validation for length of buffer inputs.</Mitigation>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Ensure all buffer uses are consistently bounds-checked.</Mitigation>
            <Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="140" Name="Bypassing of Intermediate Forms in Multiple-Form Sets" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="141" Name="Cache Poisoning" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Configuration: Disable client side caching.</Mitigation>
            <Mitigation>Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="142" Name="DNS Cache Poisoning" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Configuration: Make sure your DNS servers have been updated to the latest versions</Mitigation>
            <Mitigation>Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.</Mitigation>
            <Mitigation>Configuration: Disable client side DNS caching.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="143" Name="Detect Unpublicized Web Pages" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="144" Name="Detect Unpublicized Web Services" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="145" Name="Checksum Spoofing" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="146" Name="XML Schema Poisoning" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Protect the schema against unauthorized modification.</Mitigation>
            <Mitigation>Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.</Mitigation>
            <Mitigation>Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="147" Name="XML Ping of the Death" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.</Mitigation>
            <Mitigation>Implementation: Provide for network flow control and traffic shaping to control access to the resources.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="148" Name="Content Spoofing" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="149" Name="Explore for Predictable Temporary File Names" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="15" Name="Command Delimiters" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Perform whitelist validation against a positive specification for command length, type, and parameters.</Mitigation>
            <Mitigation>Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Use type conversions such as JDBC prepared statements.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="150" Name="Collect Data from Common Resource Locations" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="151" Name="Identity Spoofing" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Employ robust authentication processes (e.g., multi-factor authentication).</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="153" Name="Input Data Manipulation" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="154" Name="Resource Location Spoofing" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Monitor network activity to detect any anomalous or unauthorized communication exchanges.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="155" Name="Screen Temporary Files for Sensitive Information" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="157" Name="Sniffing Attacks" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Encrypt sensitive information when transmitted on insecure mediums to prevent interception.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="158" Name="Sniffing Network Traffic" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Obfuscate network traffic through encryption to prevent its readability by network sniffers.</Mitigation>
            <Mitigation>Employ appropriate levels of segmentation to your network in accordance with best practices.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="159" Name="Redirect Access to Libraries" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: Restrict the permission to modify the entries in the configuration file.</Mitigation>
            <Mitigation>Implementation: Check the integrity of the dynamically linked libraries before use them.</Mitigation>
            <Mitigation>Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.</Mitigation>
         </Mitigations>
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="16" Name="Dictionary-based Password Attack" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation>
            <Mitigation>Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-02.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="160" Name="Exploit Script-Based APIs" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="161" Name="Infrastructure Manipulation" Abstraction="Meta" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="162" Name="Manipulating Hidden Fields" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="163" Name="Spear Phishing" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="164" Name="Mobile Phishing" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="165" Name="File Manipulation" Abstraction="Meta" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="166" Name="Force the System to Reset Values" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="167" Name="White Box Reverse Engineering" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="168" Name="Windows ::DATA Alternate Data Stream" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use FAT file systems which do not support Alternate Data Streams.</Mitigation>
            <Mitigation>Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.</Mitigation>
            <Mitigation>Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="169" Name="Footprinting" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Keep patches up to date by installing weekly or daily if possible.</Mitigation>
            <Mitigation>Shut down unnecessary services/ports.</Mitigation>
            <Mitigation>Change default passwords by choosing strong passwords.</Mitigation>
            <Mitigation>Curtail unexpected input.</Mitigation>
            <Mitigation>Encrypt and password-protect sensitive data.</Mitigation>
            <Mitigation>Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="17" Name="Using Malicious Files" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
         </Mitigations>
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="170" Name="Web Application Fingerprinting" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: Obfuscate server fields of HTTP response.</Mitigation>
            <Mitigation>Implementation: Hide inner ordering of HTTP response header.</Mitigation>
            <Mitigation>Implementation: Customizing HTTP error codes such as 404 or 500.</Mitigation>
            <Mitigation>Implementation: Hide URL file extension.</Mitigation>
            <Mitigation>Implementation: Hide HTTP response header software information filed.</Mitigation>
            <Mitigation>Implementation: Hide cookie's software information filed.</Mitigation>
            <Mitigation>Implementation: Appropriately deal with error messages.</Mitigation>
            <Mitigation>Implementation: Obfuscate database type in Database API's error message.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="173" Name="Action Spoofing" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Avoid interacting with suspicious sites or clicking suspicious links.</xhtml:p>
               <xhtml:p>An organization should provide regular, robust cybersecurity training to its employees.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="174" Name="Flash Parameter Injection" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="175" Name="Code Inclusion" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="176" Name="Configuration/Environment Manipulation" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="177" Name="Create files with the same name as files protected with a higher classification" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="178" Name="Cross-Site Flashing" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: Only allow known URL to be included as remote flash movies in a flash application</Mitigation>
            <Mitigation>Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="179" Name="Calling Micro-Services Directly" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="18" Name="XSS Targeting Non-Script Elements" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.</Mitigation>
            <Mitigation>All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="180" Name="Exploiting Incorrectly Configured Access Control Security Levels" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Configure the access control correctly.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="181" Name="Flash File Overlay" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="182" Name="Flash Injection" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: remove sensitive information such as user name and password in the SWF file.</Mitigation>
            <Mitigation>Implementation: use validation on both client and server side.</Mitigation>
            <Mitigation>Implementation: remove debug information.</Mitigation>
            <Mitigation>Implementation: use SSL when loading external data</Mitigation>
            <Mitigation>Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="183" Name="IMAP/SMTP Command Injection" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="184" Name="Software Integrity Attack" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="185" Name="Malicious Software Download" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="186" Name="Malicious Software Update" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Validate software updates before installing.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="187" Name="Malicious Automated Software Update" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="188" Name="Reverse Engineering" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="189" Name="Black Box Reverse Engineering" Abstraction="Standard" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="19" Name="Embedding Scripts within Scripts" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation>
            <Mitigation>Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Perform input validation for all remote content.</Mitigation>
            <Mitigation>Perform output validation for all remote content.</Mitigation>
            <Mitigation>Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Session tokens for specific host</Mitigation>
            <Mitigation>Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
            <Mitigation>Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="190" Name="Reverse Engineer an Executable to Expose Assumed Hidden Functionality" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Notes>
            <Note Type="Other">
               <xhtml:p>White box analysis techniques include file or binary analysis, debugging, disassembly, and decompilation, and generally fall into categories referred to as 'static' and 'dynamic' analysis. Static analysis encompasses methods which analyze the binary, or extract its source code or object code without executing the program. Dynamic analysis involves analyzing the program during execution.</xhtml:p>
               <xhtml:p>Some forms of file analysis tools allow the executable itself to be analyzed, the most basic of which can analyze features of the binary. More sophisticated forms of static analysis analyze the binary file and extract assembly code, and possibly source code representations, from analyzing the structure of the file itself. Dynamic analysis tools execute the binary file and monitor its in memory footprint, revealing its execution flow, memory usage, register values, and machine instructions. This type of analysis is most effective for analyzing the execution of binary files whose content has been obfuscated or encrypted in its native executable form.</xhtml:p>
               <xhtml:p>Debuggers allow the program's execution to be monitored, and depending upon the debugger's sophistication may show relevant source code for each step in execution, or may display and allow interactions with memory, variables, or values generated by the program during run-time operations. Disassemblers operate in reverse of assemblers, allowing assembly code to be extracted from a program as it executes machine code instructions. Disassemblers allow low-level interactions with the program as it executes, such as manipulating the program's run time operations. Decompilers can be utilized to analyze a binary file and extract source code from the compiled executable. Collectively, the tools and methods described are those commonly applied to a binary executable file and provide means for reverse engineering the file by revealing the hidden functions of its operation or composition.</xhtml:p>
            </Note>
         </Notes>
         
      </Attack_Pattern>
      <Attack_Pattern ID="191" Name="Read Sensitive Strings Within an Executable" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Notes>
            <Note Type="Other">
               <xhtml:p>More sophisticated methods of searching for sensitive strings within a file involve disassembly or decompiling of the file. One could, for example, utilize disassembly methods on an ISAPI executable or dll to discover a hard-coded password within the code as it executes. This type of analysis usually involves four stages in which first a debugger is attached to the running process, anti-debugging countermeasures are circumvented or bypassed, the program is analyzed step-by-step, and breakpoints are established so that discrete functions and data structures can be analyzed.</xhtml:p>
               <xhtml:p>Debugging tools such as SoftICE, Ollydbg, or vendor supplied debugging tools are often used. Disassembly tools such as IDA pro, or similar tools, can also be employed. A third strategy for accessing sensitive strings within a binary involves the decompilation of the file itself into source code that reveals the strings. An example of this type of analysis involves extracting source code from a java JAR file and then using functionality within a java IDE to search the source code for sensitive, hard-coded information. In performing this analysis native java tools, such as "jar" are used to extract the compiled class files. Next, a java decompiler such as "DJ" is used to extract java source code from the compiled classes, revealing source code. Finally, the source code is audited to reveal sensitive information, a step that is usually assisted by source code analysis programs.</xhtml:p>
            </Note>
         </Notes>
         
      </Attack_Pattern>
      <Attack_Pattern ID="192" Name="Protocol Analysis" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
         
         
         <Notes>
            <Note Type="Other">
               <xhtml:p>There are several challenges inherent to protocol analysis depending upon the nature of the protocol being analyzed. There may also be other types of factors which complicate the process such as encryption or ad hoc obfuscation of the protocol. In general there are two kinds of networking protocols, each associated with its own challenges and analysis approaches or methodologies. Some protocols are human-readable, which is to say they are text-based protocols. Examples of these types of protocols include HTTP, SMTP, and SOAP. Additionally, application-layer protocols can be embedded or encapsulated within human-readable protocols in the data portion of the packet. Typically, human-readable protocol implementations are susceptible to automatic decoding by the appropriate tools, such as Wireshark/ethereal, tcpdump, or similar protocol sniffers or analyzers.</xhtml:p>
               <xhtml:p>The presence of well-known protocol specifications in addition to easily identified protocol delimiters, such as Carriage Return or Line Feed characters (CRLF) result in text-based protocols susceptibility to direct scrutiny through manual processes. Protocol analysis against protocol implementations such as HTTP is often performed to identify idiosyncratic implementations of a protocol by a server or client. In the case of application-layer protocols which are embedded within text-based protocols, analysis techniques typically benefit from the well-known nature of the encapsulating protocols and can focus on discovering the semantic characteristics of the proprietary protocol or API, since the syntax and protocol delimiters of the underlying protocols can be readily identified.</xhtml:p>
               <xhtml:p>When performing protocol analysis of machine-readable (non-text-based) protocols difficulties emerge as the protocol itself was designed to be read by computing process. Such protocols are typically composed entirely in binary with no apparent syntax, grammar, or structural boundaries. Examples of these types of protocols are IP, UDP, and TCP. Binary protocols with published specifications can be automatically decoded by protocol analyzers, but in the case of proprietary, closed-specification, binary protocols there are no immediate indicators of packet syntax such as packet boundaries, delimiters, or structure, or the presence or absence of encryption or obfuscation. In these cases there is no one technology that can extract or reveal the structure of the packet on the wire, so it is necessary to use trial and error approaches while observing application behavior based on systematic mutations introduced at the packet-level. Tools such as Protocol Debug (PDB) or other packet injection suites are often employed. In cases where the binary executable is available, protocol analysis can be augmented with static and dynamic analysis techniques.</xhtml:p>
            </Note>
         </Notes>
         
      </Attack_Pattern>
      <Attack_Pattern ID="193" Name="PHP Remote File Inclusion" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation>
            <Mitigation>Implementation: Only allow known files to be included (whitelist)</Mitigation>
            <Mitigation>Implementation: Make use of indirect references passed in URL parameters instead of file names</Mitigation>
            <Mitigation>Configuration: Ensure that remote scripts cannot be include in the "include" or "require" PHP directives</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="194" Name="Fake the Source of Data" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="195" Name="Principal Spoof" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="196" Name="Session Credential Falsification through Forging" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.</Mitigation>
            <Mitigation>Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="197" Name="XML Entity Expansion" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.</Mitigation>
            <Mitigation>Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects. If must use DTD, normalize, filter and white list and parse with methods and routines that will detect entity expansion from untrusted sources.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="198" Name="XSS Targeting Error Pages" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation>
            <Mitigation>Implementation: Normalize, filter and white list any input that will be used in error messages.</Mitigation>
            <Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="199" Name="XSS Using Alternate Syntax" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="2" Name="Inducing Account Lockout" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.</Mitigation>
            <Mitigation>When implementing security features, consider how they can be misused and made to turn on themselves.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="20" Name="Encryption Brute Forcing" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.</Mitigation>
            <Mitigation>In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="200" Name="Removal of filters: Input filters, output filters, data masking" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="201" Name="XML Entity Linking" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Configure the XML processor to only retrieve external entities from trusted sources.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="202" Name="Create Malicious Client" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="203" Name="Manipulate Registry Information" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure proper permissions are set for Registry hives to prevent users from modifying keys.</Mitigation>
            <Mitigation>Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.</Mitigation>
            <Mitigation>Employ robust identification and audit/blocking via whitelisting of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="204" Name="Lifting Sensitive Data Embedded in Cache" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="206" Name="Signing Malicious Code" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="207" Name="Removing Important Client Functionality" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.</Mitigation>
            <Mitigation>Design: Ship client-side application with integrity checks (code signing) when possible.</Mitigation>
            <Mitigation>Design: Use obfuscation and other techniques to prevent reverse engineering the client code.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="208" Name="Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="209" Name="XSS Using MIME Type Mismatch" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="21" Name="Exploitation of Trusted Credentials" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.</Mitigation>
            <Mitigation>Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.</Mitigation>
            <Mitigation>Implementation: If the session identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.</Mitigation>
            <Mitigation>Implementation: If the web or application server supports it, then encrypting and/or signing the session ID (such as cookie) can protect the ID if intercepted.</Mitigation>
            <Mitigation>Design: Use strong session identifiers that are protected in transit and at rest.</Mitigation>
            <Mitigation>Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.</Mitigation>
            <Mitigation>Implementation: Verify of authenticity of all session IDs at runtime.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="212" Name="Functionality Misuse" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.</Mitigation>
            <Mitigation>When implementing security features, consider how they can be misused and compromised.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="214" Name="Fuzzing for garnering J2EE/.NET-based stack traces, for application mapping" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="215" Name="Fuzzing and observing application log data/errors for application mapping" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.</Mitigation>
            <Mitigation>Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.</Mitigation>
            <Mitigation>Implementation: Obfuscate server fields of HTTP response.</Mitigation>
            <Mitigation>Implementation: Hide inner ordering of HTTP response header.</Mitigation>
            <Mitigation>Implementation: Customizing HTTP error codes such as 404 or 500.</Mitigation>
            <Mitigation>Implementation: Hide HTTP response header software information filed.</Mitigation>
            <Mitigation>Implementation: Hide cookie's software information filed.</Mitigation>
            <Mitigation>Implementation: Obfuscate database type in Database API's error message.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="216" Name="Communication Channel Manipulation" Abstraction="Meta" Status="Stable">
         
         
         
         
         <Mitigations>
            <Mitigation>Encrypt all sensitive communications using properly-configured cryptography.</Mitigation>
            <Mitigation>Design the communication system such that it associates proper authentication/authorization with each channel/message.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="217" Name="Exploiting Incorrectly Configured SSL" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Usage of configuration settings, such as stream ciphers vs. block ciphers and setting timeouts on SSL sessions to extremely low values lessens the potential impact. Use of later versions of TLS (e.g. TLS 1.1+) can also be effective, but not all clients or servers support the later versions.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="218" Name="Spoofing of UDDI/ebXML Messages" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="219" Name="XML Routing Detour Attacks" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.</Mitigation>
            <Mitigation>Implementation: Use SSL for connections between all parties with mutual authentication.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="22" Name="Exploiting Trust in Client" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.</Mitigation>
            <Mitigation>Design: Do not rely on client validation or encoding for security purposes.</Mitigation>
            <Mitigation>Design: Utilize digital signatures to increase authentication assurance.</Mitigation>
            <Mitigation>Design: Utilize two factor authentication to increase authentication assurance.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="220" Name="Client-Server Protocol Manipulation" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="221" Name="XML External Entities Blowup" Abstraction="Detailed" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="222" Name="iFrame Overlay" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Configuration: Disable iFrames in the Web browser.</Mitigation>
            <Mitigation>Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.</Mitigation>
            <Mitigation>Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="224" Name="Fingerprinting" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="226" Name="Session Credential Falsification through Manipulation" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="227" Name="Sustained Client Engagement" Abstraction="Meta" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="228" Name="DTD Injection" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.</Mitigation>
            <Mitigation>Implementation: Disallow the inclusion of DTDs as part of incoming messages.</Mitigation>
            <Mitigation>Implementation: Use XML parsing tools that protect against DTD attacks.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="229" Name="XML Attribute Blowup" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>This attack may be mitigated completely by using a parser that is not using a vulnerable container. Mitigation may also limit the number of attributes per XML element.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="23" Name="File Content Injection" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)</Mitigation>
            <Mitigation>Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.</Mitigation>
            <Mitigation>Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.</Mitigation>
            <Mitigation>Implementation: Virus scanning on host</Mitigation>
            <Mitigation>Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="230" Name="XML Nested Payloads" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.</Mitigation>
            <Mitigation>Perform validation on canonical data.</Mitigation>
            <Mitigation>Pick a robust implementation of an XML parser.</Mitigation>
            <Mitigation>Validate XML against a valid schema or DTD prior to parsing.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="231" Name="XML Oversized Payloads" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Carefully validate and sanitize all user-controllable data prior to passing it to the XML parser routine. Ensure that the resultant data is safe to pass to the XML parser.</Mitigation>
            <Mitigation>Perform validation on canonical data.</Mitigation>
            <Mitigation>Pick a robust implementation of an XML parser.</Mitigation>
            <Mitigation>Validate XML against a valid schema or DTD prior to parsing.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="233" Name="Privilege Escalation" Abstraction="Meta" Status="Draft">
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="234" Name="Hijacking a privileged process" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="236" Name="Catching exception throw/signal from privileged block" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.</Mitigation>
            <Mitigation>Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="237" Name="Escaping a Sandbox by Calling Signed Code in Another Language" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.</Mitigation>
            <Mitigation>Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.</Mitigation>
            <Mitigation>Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.</Mitigation>
            <Mitigation>Configuration: Get latest updates for the computer.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="24" Name="Filter Failure through Buffer Overflow" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.</Mitigation>
            <Mitigation>Pre-design: Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Operational: Use OS-level preventative functionality. Not a complete solution.</Mitigation>
            <Mitigation>Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="240" Name="Resource Injection" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure all input content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Perform input validation for all content.</Mitigation>
            <Mitigation>Enforce regular patching of software.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="242" Name="Code Injection" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Ensure all input content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Perform input validation for all content.</Mitigation>
            <Mitigation>Enforce regular patching of software.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="243" Name="XSS Targeting HTML Attributes" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation>
            <Mitigation>Implementation: Normalize, filter and white list all input including that which is not expected to have any scripting content.</Mitigation>
            <Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="244" Name="XSS Targeting URI Placeholders" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="245" Name="XSS Using Doubled Characters" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation>
            <Mitigation>Implementation: Normalize, filter and sanitize all user supplied fields.</Mitigation>
            <Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="247" Name="XSS Using Invalid Characters" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation>
            <Mitigation>Implementation: Normalize, filter and white list any input that will be included in any subsequent web pages or back end operations.</Mitigation>
            <Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="248" Name="Command Injection" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         <Mitigations>
            <Mitigation>All user-controllable input should be validated and filtered for potentially unwanted characters. Whitelisting input is desired, but if a blacklisting approach is necessary, then focusing on command related terms and delimiters is necessary.</Mitigation>
            <Mitigation>Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.</Mitigation>
            <Mitigation>Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="25" Name="Forced Deadlock" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).</Mitigation>
            <Mitigation>For competing actions, use well-known libraries which implement synchronization.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="250" Name="XML Injection" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.</xhtml:p>
               <xhtml:p>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="251" Name="Local Code Inclusion" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement specific, white-list approach.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="252" Name="PHP Local File Inclusion" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="253" Name="Remote Code Inclusion" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="256" Name="SOAP Array Overflow" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="26" Name="Leveraging Race Conditions" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use safe libraries to access resources such as files.</Mitigation>
            <Mitigation>Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.</Mitigation>
            <Mitigation>Use synchronization to control the flow of execution.</Mitigation>
            <Mitigation>Use static analysis tools to find race conditions.</Mitigation>
            <Mitigation>Pay attention to concurrency problems related to the access of resources.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="261" Name="Fuzzing for garnering other adjacent user/sensitive data" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="263" Name="Force Use of Corrupted Files" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="267" Name="Leverage Alternate Encoding" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation>
         </Mitigations>
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="268" Name="Audit Log Manipulation" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="27" Name="Leveraging Race Conditions via Symbolic Links" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.</Mitigation>
            <Mitigation>Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.</Mitigation>
            <Mitigation>Follow the principle of least privilege when assigning access rights to files.</Mitigation>
            <Mitigation>Ensure good compartmentalization in the system to provide protected areas that can be trusted.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="270" Name="Modification of Registry Run Keys" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="271" Name="Schema Poisoning" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Protect the schema against unauthorized modification.</Mitigation>
            <Mitigation>Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.</Mitigation>
            <Mitigation>Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="272" Name="Protocol Manipulation" Abstraction="Meta" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="273" Name="HTTP Response Smuggling" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Employ strict adherence to interpretations of HTTP messages wherever possible.</Mitigation>
            <Mitigation>Implementation: Encode header information provided by user input so that user-supplied content is not interpreted by intermediaries.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="274" Name="HTTP Verb Tampering" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Ensure that only legitimate HTTP verbs are allowed.</Mitigation>
            <Mitigation>Design: Do not use HTTP verbs as factors in access decisions.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="275" Name="DNS Rebinding" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.</Mitigation>
            <Mitigation>Implementation: Reject HTTP request with a malicious Host header.</Mitigation>
            <Mitigation>Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="276" Name="Inter-component Protocol Manipulation" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="277" Name="Data Interchange Protocol Manipulation" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="278" Name="Web Services Protocol Manipulation" Abstraction="Standard" Status="Draft">
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.</Mitigation>
            <Mitigation>Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="279" Name="SOAP Manipulation" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="28" Name="Fuzzing" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.</Mitigation>
            <Mitigation>Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="285" Name="ICMP Echo Request Ping" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="287" Name="TCP SYN Scan" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="29" Name="Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use safe libraries to access resources such as files.</Mitigation>
            <Mitigation>Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.</Mitigation>
            <Mitigation>Use synchronization to control the flow of execution.</Mitigation>
            <Mitigation>Use static analysis tools to find race conditions.</Mitigation>
            <Mitigation>Pay attention to concurrency problems related to the access of resources.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="290" Name="Enumerate Mail Exchange (MX) Records" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="291" Name="DNS Zone Transfers" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="292" Name="Host Discovery" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="293" Name="Traceroute Route Enumeration" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="294" Name="ICMP Address Mask Request" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="295" Name="Timestamp Request" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="296" Name="ICMP Information Request" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="297" Name="TCP ACK Ping" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="298" Name="UDP Ping" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Configure your firewall to block egress ICMP messages.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="299" Name="TCP SYN Ping" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="3" Name="Using Leading 'Ghost' Character Sequences to Bypass Input Filters" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Perform white list rather than black list input validation.</Mitigation>
            <Mitigation>Canonicalize all data prior to validation.</Mitigation>
            <Mitigation>Take an iterative approach to input validation (defense in depth).</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="30" Name="Hijacking a Privileged Thread of Execution" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.</Mitigation>
            <Mitigation>Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="300" Name="Port Scanning" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="301" Name="TCP Connect Scan" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Employ a robust network defense posture that includes an IDS/IPS system.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="302" Name="TCP FIN Scan" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="303" Name="TCP Xmas Scan" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Employ a robust network defensive posture that includes a managed IDS/IPS.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="304" Name="TCP Null Scan" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="305" Name="TCP ACK Scan" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="306" Name="TCP Window Scan" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="307" Name="TCP RPC Scan" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Typically, an IDS/IPS system is very effective against this type of attack.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="308" Name="UDP Scan" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.</Mitigation>
            <Mitigation>UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="309" Name="Network Topology Mapping" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="31" Name="Accessing/Intercepting/Modifying HTTP Cookies" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use input validation for cookies</Mitigation>
            <Mitigation>Design: Generate and validate MAC for cookies</Mitigation>
            <Mitigation>Implementation: Use SSL/TLS to protect cookie in transit</Mitigation>
            <Mitigation>Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="310" Name="Scanning for Vulnerable Software" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="312" Name="Active OS Fingerprinting" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="313" Name="Passive OS Fingerprinting" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="317" Name="IP ID Sequencing Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="318" Name="IP 'ID' Echoed Byte-Order Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="319" Name="IP (DF) 'Don't Fragment Bit' Echoing Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="32" Name="XSS Through HTTP Query Strings" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Session tokens for specific host</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
            <Mitigation>Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="320" Name="TCP Timestamp Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="321" Name="TCP Sequence Number Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="322" Name="TCP (ISN) Greatest Common Divisor Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="323" Name="TCP (ISN) Counter Rate Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="324" Name="TCP (ISN) Sequence Predictability Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="325" Name="TCP Congestion Control Flag (ECN) Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="326" Name="TCP Initial Window Size Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="327" Name="TCP Options Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="328" Name="TCP 'RST' Flag Checksum Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="329" Name="ICMP Error Message Quoting Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="33" Name="HTTP Request Smuggling" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>HTTP Request Smuggling is usually targeted at web servers. Therefore, in such cases, careful analysis of the entities must occur during system design prior to deployment. If there are known differences in the way the entities parse HTTP requests, the choice of entities needs consideration.</Mitigation>
            <Mitigation>Employing an application firewall can help. However, there are instances of the firewalls being susceptible to HTTP Request Smuggling as well.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="330" Name="ICMP Error Message Echoing Integrity Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="331" Name="ICMP IP Total Length Field Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="332" Name="ICMP IP 'ID' Field Error Message Probe" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="34" Name="HTTP Response Splitting" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>To avoid HTTP Response Splitting, the application must not rely on user-controllable input to form part of its output response stream. Specifically, response splitting occurs due to injection of CR-LF sequences and additional headers. All data arriving from the user and being used as part of HTTP response headers must be subjected to strict validation that performs simple character-based as well as semantic filtering to strip it of malicious character sequences and headers.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="35" Name="Leverage Executable Code in Non-Executable Files" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
            <Mitigation>Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.</Mitigation>
            <Mitigation>Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="36" Name="Using Unpublished APIs" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="37" Name="Retrieve Embedded Sensitive Data" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="38" Name="Leveraging/Manipulating Configuration File Search Paths" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program</Mitigation>
            <Mitigation>Implementation: Host integrity monitoring</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="383" Name="Harvesting Information via API Event Monitoring" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="384" Name="Application API Message Manipulation via Man-in-the-Middle" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="385" Name="Transaction or Event Tampering via Application API Manipulation" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="386" Name="Application API Navigation Remapping" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="387" Name="Navigation Remapping To Propagate Malicious Content" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="388" Name="Application API Button Hijacking" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="389" Name="Content Spoofing Via Application API Manipulation" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="39" Name="Manipulating Opaque Client-based Data Tokens" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic "message authentication code" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a "malicious" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.</Mitigation>
            <Mitigation>Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)</Mitigation>
            <Mitigation>Make sure that all session tokens use a good source of randomness</Mitigation>
            <Mitigation>Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="390" Name="Bypassing Physical Security" Abstraction="Meta" Status="Draft">
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="391" Name="Bypassing Physical Locks" Abstraction="Meta" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="392" Name="Lock Bumping" Abstraction="Meta" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="393" Name="Lock Picking" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="394" Name="Using a Snap Gun Lock to Force a Lock" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="395" Name="Bypassing Electronic Locks and Access Controls" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="396" Name="Bypassing Card or Badge-Based Systems" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="397" Name="Cloning Magnetic Strip Cards" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="398" Name="Magnetic Strip Card Brute Force Attacks" Abstraction="Standard" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="399" Name="Cloning RFID Cards or Chips" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="4" Name="Using Alternative IP Address Encodings" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Default deny access control policies</Mitigation>
            <Mitigation>Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="40" Name="Manipulating Writeable Terminal Devices" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Ensure that terminals are only writeable by named owner user and/or administrator</Mitigation>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="400" Name="RFID Chip Deactivation or Destruction" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="401" Name="Hacking Hardware" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="402" Name="Bypassing ATA Password Security" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="406" Name="Dumpster Diving" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="407" Name="Pretexting" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="41" Name="Using Meta-characters in E-mail Headers to Inject Malicious Payloads" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Perform validation on email header data</Mitigation>
            <Mitigation>Implementation: Implement email filtering solutions on mail server or on MTA, relay server.</Mitigation>
            <Mitigation>Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="410" Name="Information Elicitation" Abstraction="Meta" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="412" Name="Pretexting via Customer Service" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="413" Name="Pretexting via Tech Support" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="414" Name="Pretexting via Delivery Person" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="415" Name="Pretexting via Phone" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="416" Name="Manipulate Human Behavior" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="417" Name="Influence Perception" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="418" Name="Influence Perception of Reciprocation" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="42" Name="MIME Conversion" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Stay up to date with third party vendor patches</Mitigation>
            <Mitigation>
               <xhtml:p>Disable the 7 to 8 bit conversion. This can be done by removing the F=9 flag from all Mailer specifications in the sendmail.cf file.</xhtml:p>
               <xhtml:p>For example, a sendmail.cf file with these changes applied should look similar to (depending on your system and configuration):</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">Mlocal, P=/usr/libexec/mail.local, F=lsDFMAw5:/|@qrmn, S=10/30, R=20/40,<xhtml:div style="margin-left:10px;">T=DNS/RFC822/X-Unix,<xhtml:br/>A=mail -d $u</xhtml:div>
                  <xhtml:br/>Mprog, P=/bin/sh, F=lsDFMoqeu, S=10/30, R=20/40,<xhtml:div style="margin-left:10px;">D=$z:/,<xhtml:br/>T=X-Unix,<xhtml:br/>A=sh -c $u</xhtml:div>
               </xhtml:div>
               <xhtml:p>This can be achieved for the "Mlocal" and "Mprog" Mailers by modifying the ".mc" file to include the following lines:</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="informative">define(`LOCAL_MAILER_FLAGS',<xhtml:div style="margin-left:10px;">ifdef(`LOCAL_MAILER_FLAGS',<xhtml:div style="margin-left:10px;">`translit(LOCAL_MAILER_FLAGS, `9')',<xhtml:br/>`rmn'))</xhtml:div>
                  </xhtml:div>
                  <xhtml:br/>define(`LOCAL_SHELL_FLAGS',<xhtml:div style="margin-left:10px;">ifdef(`LOCAL_SHELL_FLAGS',<xhtml:div style="margin-left:10px;">`translit(LOCAL_SHELL_FLAGS, `9')',<xhtml:br/>`eu'))</xhtml:div>
                  </xhtml:div>
               </xhtml:div>
               <xhtml:p>and then rebuilding the sendmail.cf file using m4(1).</xhtml:p>
               <xhtml:p>From "Exploiting Software", please see reference below.</xhtml:p>
            </Mitigation>
            <Mitigation>Use the sendmail restricted shell program (smrsh)</Mitigation>
            <Mitigation>Use mail.local</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="420" Name="Influence Perception of Scarcity" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="421" Name="Influence Perception of Authority" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="422" Name="Influence Perception of Commitment and Consistency" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</xhtml:p>
               <xhtml:p>Individuals should avoid complying with suspicious requests.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="423" Name="Influence Perception of Liking" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="424" Name="Influence Perception of Consensus or Social Proof" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="425" Name="Target Influence via Framing" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</xhtml:p>
               <xhtml:p>Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="426" Name="Influence via Incentives" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="427" Name="Influence via Psychological Principles" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="428" Name="Influence via Modes of Thinking" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="429" Name="Target Influence via Eye Cues" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="43" Name="Exploiting Multiple Input Interpretation Layers" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.</Mitigation>
            <Mitigation>Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="433" Name="Target Influence via The Human Buffer Overflow" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="434" Name="Target Influence via Interview and Interrogation" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="435" Name="Target Influence via Instant Rapport" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="438" Name="Modification During Manufacture" Abstraction="Meta" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="439" Name="Manipulation During Distribution" Abstraction="Meta" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="44" Name="Overflow Binary Resource File" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Perform appropriate bounds checking on all buffers.</Mitigation>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Static code analysis</Mitigation>
            <Mitigation>Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes</Mitigation>
            <Mitigation>Implementation: Keep software patched to ensure that known vulnerabilities are not available for attackers to target on host.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="440" Name="Hardware Integrity Attack" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="441" Name="Malicious Logic Insertion" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="442" Name="Infected Software" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="443" Name="Malicious Logic Inserted Into Product Software by Authorized Developer" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="444" Name="Development Alteration" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="445" Name="Malicious Logic Insertion into Product Software via Configuration Management Manipulation" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.</Mitigation>
            <Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="446" Name="Malicious Logic Insertion into Product Software via Inclusion of 3rd Party Component Dependency" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="447" Name="Design Alteration" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.</Mitigation>
            <Mitigation>Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="448" Name="Embed Virus into DLL" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="45" Name="Buffer Overflow via Symbolic Links" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.</Mitigation>
            <Mitigation>Because Symlink can be modified by an attacker, make sure that the ones you read are located in protected directories.</Mitigation>
            <Mitigation>Pay attention to the resource pointed to by your symlink links (See attack pattern named "Forced Symlink race"), they can be replaced by malicious resources.</Mitigation>
            <Mitigation>Always check the size of the input data before copying to a buffer.</Mitigation>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="452" Name="Infected Hardware" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="456" Name="Infected Memory" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Leverage anti-virus products to detect stop operations with known virus.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="457" Name="USB Memory Attacks" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device himself.</Mitigation>
            <Mitigation>Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.</Mitigation>
            <Mitigation>Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="458" Name="Flash Memory Attacks" Abstraction="Detailed" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="459" Name="Creating a Rogue Certification Authority Certificate" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Certification Authorities need to stop using the weak collision prone MD5 hashing algorithm to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="46" Name="Overflow Variables and Tags" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation>
            <Mitigation>Do not trust input data from user. Validate all user input.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="460" Name="HTTP Parameter Pollution (HPP)" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests</xhtml:p>
               <xhtml:p>Design: Perform URL encoding</xhtml:p>
               <xhtml:p>Implementation: Use strict regular expressions in URL rewriting</xhtml:p>
               <xhtml:p>Implementation: Beware of multiple occurrences of a parameter in a Query String</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="461" Name="Web Services API Signature Forgery Leveraging Hash Function Extension Weakness" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="462" Name="Cross-Domain Search Timing" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests</xhtml:p>
               <xhtml:p>Design: The browser's security model could be fixed to not leak timing information for cross domain requests</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="463" Name="Padding Oracle Crypto Attack" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption</xhtml:p>
               <xhtml:p>Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="464" Name="Evercookie" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.</xhtml:p>
               <xhtml:p>Design: Safari browser's private browsing mode is currently effective against evercookies.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="465" Name="Transparent Proxy Abuse" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.</xhtml:p>
               <xhtml:p>Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="466" Name="Leveraging Active Man in the Middle Attacks to Bypass Same Origin Policy" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Tunnel communications through a secure proxy</xhtml:p>
               <xhtml:p>Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="467" Name="Cross Site Identification" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Usage: Users should always explicitly log out from the social networking sites when done using them.</xhtml:p>
               <xhtml:p>Usage: Users should not open other tabs in the browser when using a social networking site.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="468" Name="Generic Cross-Browser Cross-Domain Theft" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.</xhtml:p>
               <xhtml:p>Implementation: Perform proper HTML encoding and URL escaping</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="469" Name="HTTP DoS" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Configuration: Configure web server software to limit the waiting period on opened HTTP sessions</xhtml:p>
               <xhtml:p>Design: Use load balancing mechanisms</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="47" Name="Buffer Overflow via Parameter Expansion" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="470" Name="Expanding Control over the Operating System from the Database" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection</xhtml:p>
               <xhtml:p>Configuration: Ensure that the DBMS is patched with the latest security patches</xhtml:p>
               <xhtml:p>Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS</xhtml:p>
               <xhtml:p>Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user</xhtml:p>
               <xhtml:p>Usage: Do not use the DBMS machine for anything else other than the database</xhtml:p>
               <xhtml:p>Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.</xhtml:p>
               <xhtml:p>Usage: Use an intrusion detection system to monitor network connections and logs on the database host.</xhtml:p>
               <xhtml:p>Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="471" Name="Search Order Hijacking" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected</xhtml:p>
               <xhtml:p>Design: Sign system DLLs so that unauthorized DLLs can be detected.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="472" Name="Browser Fingerprinting" Abstraction="Detailed" Status="Draft">
         
         
         
         
         <Mitigations>
            <Mitigation>Configuration: Disable Java Script in the browser</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="473" Name="Signature Spoof" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="474" Name="Signature Spoofing by Key Theft" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Restrict access to private keys from non-supervisory accounts</xhtml:p>
               <xhtml:p>Restrict access to administrative personnel and processes only</xhtml:p>
               <xhtml:p>Ensure all remote methods are secured</xhtml:p>
               <xhtml:p>Ensure all services are patched and up to date</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="475" Name="Signature Spoofing by Improper Validation" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="476" Name="Signature Spoofing by Misrepresentation" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="477" Name="Signature Spoofing by Mixing Signed and Unsigned Content" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="478" Name="Modification of Windows Service Configuration" Abstraction="Detailed" Status="Usable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="479" Name="Malicious Root Certificate" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="48" Name="Passing Local Filenames to Functions That Expect a URL" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.</Mitigation>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="481" Name="Contradictory Destinations in Traffic Routing Schemes" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="482" Name="TCP Flood" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="485" Name="Signature Spoofing by Key Recreation" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure cryptographic elements have been sufficiently tested for weaknesses.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="486" Name="UDP Flood" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="487" Name="ICMP Flood" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="488" Name="HTTP Flood" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can monitor the typical traffic flow. When spikes in usage occur, filters could examine traffic for indicators of bad behavior with respect to the web servers, and then create firewall rules to deny the malicious IP addresses. These patterns in the filter could be a combination of trained behavior, knowledge of standards as they apply to the web server, known patterns, or anomaly detection. Firewalling source IPs works since the HTTP is sent using TCP so the source IP can't be spoofed; if the source IP is spoofed is, then it's not legitimate traffic. Special care should be taken care with rule sets to ensure low false positive rates along with a method at the application layer to allow a valid user to begin using the service again. Another possible solution is using 3rd party providers as they have experts, knowledge, experience, and resources to deal with the attack and mitigate it before hand or while it occurs. The best mitigation is preparation before an attack, but there is no bulletproof solution as with ample resources a brute force attack may succeed.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="489" Name="SSL Flood" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="49" Name="Password Brute Forcing" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.</Mitigation>
            <Mitigation>Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.</Mitigation>
            <Mitigation>Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="490" Name="Amplification" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="491" Name="XML Quadratic Expansion" Abstraction="Detailed" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.</xhtml:p>
               <xhtml:p>Implementation: Disable altogether the use of inline DTD schemas in your XML parsing objects. If must use DTD, normalize, filter and white list and parse with methods and routines that will detect entity expansion from untrusted sources.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="492" Name="Regular Expression Exponential Blowup" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="493" Name="SOAP Array Blowup" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="494" Name="TCP Fragmentation" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule "IF FO=1 and PROTOCOL=TCP then DROP PACKET" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="495" Name="UDP Fragmentation" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="496" Name="ICMP Fragmentation" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>This attack may be mitigated through egress filtering based on ICMP payload so a network is a "good neighbor" to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="498" Name="Probe iOS Screenshots" Abstraction="Detailed" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an application that may display sensitive information should clear the screen contents before a screenshot is taken. This can be accomplished by setting the key window's hidden property to YES. This code to hide the contents should be placed in both the applicationWillResignActive() and applicationDidEnterBackground() methods.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="499" Name="Intent Intercept" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="5" Name="Blue Boxing" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: Upgrade phone lines. Note this may be prohibitively expensive</Mitigation>
            <Mitigation>Use strong access control such as two factor access control for administrative access to the switch</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="50" Name="Password Recovery Exploitation" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.</Mitigation>
            <Mitigation>E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.</Mitigation>
            <Mitigation>Ensure that your password recovery functionality is not vulnerable to an injection style attack.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="500" Name="WebView Injection" Abstraction="Detailed" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="501" Name="Activity Hijack" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).</Mitigation>
            <Mitigation>Never use implicit intents for inter-application communication.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="502" Name="Intent Spoof" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="503" Name="WebView Exposure" Abstraction="Standard" Status="Draft">
         
         
         
         <Mitigations>
            <Mitigation>To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="504" Name="Task Impersonation" Abstraction="Detailed" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>The only known mitigation to this attack is to avoid installing the malicious application on the device. However, the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="505" Name="Scheme Squatting" Abstraction="Detailed" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="506" Name="Tapjacking" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="507" Name="Physical Theft" Abstraction="Meta" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="509" Name="Kerberoasting" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Monitor system and domain logs for abnormal access.</Mitigation>
            <Mitigation>Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.</Mitigation>
            <Mitigation>Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.</Mitigation>
            <Mitigation>Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="51" Name="Poison Web Service Registry" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Harden registry server and file access permissions</Mitigation>
            <Mitigation>Implementation: Implement communications to and from the registry using secure protocols</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="510" Name="SaaS User Request Forgery" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.</Mitigation>
            <Mitigation>Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)</Mitigation>
         </Mitigations>
         
         
         <Notes>
            <Note Type="Other">SaaS/Cloud applications are often accessed from unmanaged systems and devices, over untrusted networks that are outside corporate IT control. The likelihood of a cloud service being accessed by a trusted user though an untrusted device is high. Several instances of this style of attack have been found.</Note>
         </Notes>
         
      </Attack_Pattern>
      <Attack_Pattern ID="511" Name="Infiltration of Software Development Environment" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="516" Name="Hardware Component Substitution During Baselining" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="517" Name="Documentation Alteration to Circumvent Dial-down" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="518" Name="Documentation Alteration to Produce Under-performing Systems" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="519" Name="Documentation Alteration to Cause Errors in System Design" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="52" Name="Embedding NULL Bytes" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="520" Name="Counterfeit Hardware Component Inserted During Product Assembly" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="521" Name="Hardware Design Specifications Are Altered" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="522" Name="Malicious Hardware Component Replacement" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="523" Name="Malicious Software Implanted" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="524" Name="Rogue Integration Procedures" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="528" Name="XML Flood" Abstraction="Standard" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="529" Name="Malware-Directed Internal Reconnaissance" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Keep patches up to date by installing weekly or daily if possible.</Mitigation>
            <Mitigation>Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="53" Name="Postfix, Null Terminate, and Backslash" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="530" Name="Provide Counterfeit Component" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="531" Name="Hardware Component Substitution" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="532" Name="Altered Installed BIOS" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="533" Name="Malicious Manual Software Update" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="534" Name="Malicious Hardware Update" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="535" Name="Malicious Gray Market Hardware" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="536" Name="Data Injected During Configuration" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="537" Name="Infiltration of Hardware Development Environment" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="538" Name="Open Source Libraries Altered" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="539" Name="ASIC With Malicious Functionality" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="54" Name="Query System for Information" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.</Mitigation>
            <Mitigation>Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="540" Name="Overread Buffers" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="541" Name="Application Fingerprinting" Abstraction="Standard" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="542" Name="Targeted Malware" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="543" Name="Counterfeit Websites" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="544" Name="Counterfeit Organizations" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="545" Name="Pull Data from System Resources" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="546" Name="Probe Application Memory" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.</Mitigation>
            <Mitigation>Deletion of data should be completed promptly when requested.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="547" Name="Physical Destruction of Device or Component" Abstraction="Standard" Status="Draft">
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="548" Name="Contaminate Resource" Abstraction="Meta" Status="Draft">
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="549" Name="Local Execution of Code" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Employ robust cybersecurity training for all employees.</Mitigation>
            <Mitigation>Implement system antivirus software that scans all attachments before opening them.</Mitigation>
            <Mitigation>Regularly patch all software.</Mitigation>
            <Mitigation>Execute all suspicious files in a sandbox environment.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="55" Name="Rainbow Table Password Cracking" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="550" Name="Install New Service" Abstraction="Detailed" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>Limit privileges of user accounts so new service creation can only be performed by authorized administrators.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="551" Name="Modify Existing Service" Abstraction="Detailed" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="552" Name="Install Rootkit " Abstraction="Detailed" Status="Draft">
         
         
         
         
         <Mitigations>
            <Mitigation>Prevent adversary access to privileged accounts necessary to install rootkits.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="554" Name="Functionality Bypass" Abstraction="Meta" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="555" Name="Remote Services with Stolen Credentials" Abstraction="Detailed" Status="Stable">
         
         
         
         <Mitigations>
            <Mitigation>Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="556" Name="Replace File Extension Handlers" Abstraction="Detailed" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="558" Name="Replace Trusted Executable" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="559" Name="Orbital Jamming" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="560" Name="Use of Known Domain Credentials" Abstraction="Standard" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="561" Name="Windows Admin Shares with Stolen Credentials" Abstraction="Detailed" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>Do not reuse local administrator account passwords across systems. Ensure password complexity and uniqueness such that the passwords cannot be cracked or guessed. Deny remote use of local admin credentials to log into systems. Do not allow accounts to be a local administrator on more than one system.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="562" Name="Modify Shared File" Abstraction="Detailed" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="563" Name="Add Malicious File to Shared Webroot" Abstraction="Detailed" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="564" Name="Run Software at Logon" Abstraction="Detailed" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>Restrict write access to logon scripts to necessary administrators.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="568" Name="Capture Credentials via Keylogger" Abstraction="Detailed" Status="Draft">
         
         
         
         
         <Mitigations>
            <Mitigation>Strong physical security can help reduce the ability of an adversary to install a keylogger.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="569" Name="Collect Data as Provided by Users" Abstraction="Standard" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="57" Name="Utilizing REST's Trust in the System Resource to Register Man in the Middle" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implementation: Implement message level security such as HMAC in the HTTP communication</Mitigation>
            <Mitigation>Design: Utilize defense in depth, do not rely on a single security mechanism like SSL</Mitigation>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="571" Name="Block Logging to Central Repository" Abstraction="Standard" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="572" Name="Artificially Inflate File Sizes" Abstraction="Detailed" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="573" Name="Process Footprinting" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="574" Name="Services Footprinting" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="575" Name="Account Footprinting" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="576" Name="Group Permission Footprinting" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Identify programs (such as "net") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="577" Name="Owner Footprinting" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure that proper permissions on files and folders are enacted to limit accessibility.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="578" Name="Disable Security Software" Abstraction="Standard" Status="Usable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="579" Name="Replace Winlogon Helper DLL" Abstraction="Detailed" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>Changes to registry entries in "HKLM\Software\Microsoft\Windows NT\Winlogon\Notify" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="58" Name="Restful Privilege Elevation" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side</Mitigation>
            <Mitigation>Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="580" Name="Application Footprinting" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Keep patches up to date by installing weekly or daily if possible.</Mitigation>
            <Mitigation>Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="581" Name="Security Software Footprinting" Abstraction="Detailed" Status="Draft">
         
         
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="582" Name="Route Disabling" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="583" Name="Disabling Network Hardware" Abstraction="Detailed" Status="Draft">
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure rigorous physical defensive measures to keep the adversary from accessing critical systems..</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="584" Name="BGP Route Disabling" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.</xhtml:p>
               <xhtml:p>Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="585" Name="DNS Domain Seizure" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="586" Name="Object Injection" Abstraction="Meta" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Implementation: Validate object before deserialization process</xhtml:p>
               <xhtml:p>Design: Limit which types can be deserialized.</xhtml:p>
               <xhtml:p>Implementation: Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. Whitelist acceptable classes.</xhtml:p>
               <xhtml:p>Implementation: Keep session state on the server, when possible.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="587" Name="Cross Frame Scripting (XFS)" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Avoid clicking on untrusted links.</xhtml:p>
               <xhtml:p>Employ techniques such as frame busting, which is a method by which developers aim to prevent their site being loaded within a frame.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="588" Name="DOM-Based XSS" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use browser technologies that do not allow client-side scripting.</Mitigation>
            <Mitigation>Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.</Mitigation>
            <Mitigation>Ensure that all user-supplied input is validated before use.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="589" Name="DNS Blocking" Abstraction="Detailed" Status="Draft">
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Hard Coded Alternate DNS server in applications</xhtml:p>
               <xhtml:p>Avoid dependence on DNS</xhtml:p>
               <xhtml:p>Include "hosts file"/IP address in the application</xhtml:p>
               <xhtml:p>Ensure best practices with respect to communications channel protections.</xhtml:p>
               <xhtml:p>Use a .onion domain with Tor support</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="59" Name="Session Credential Falsification through Prediction" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use a strong source of randomness to generate a session ID.</Mitigation>
            <Mitigation>Use adequate length session IDs</Mitigation>
            <Mitigation>Do not use information available to the user in order to generate session ID (e.g., time).</Mitigation>
            <Mitigation>Ideas for creating random numbers are offered by Eastlake [RFC1750]</Mitigation>
            <Mitigation>Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="590" Name="IP Address Blocking" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Have a large pool of backup IPs built into the application and support proxy capability in the application.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="591" Name="Reflected XSS" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use browser technologies that do not allow client-side scripting.</Mitigation>
            <Mitigation>Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Ensure that all user-supplied input is validated before use.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="592" Name="Stored XSS" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use browser technologies that do not allow client-side scripting.</Mitigation>
            <Mitigation>Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Ensure that all user-supplied input is validated before being stored.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="593" Name="Session Hijacking" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="594" Name="Traffic Injection" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="595" Name="Connection Reset" Abstraction="Standard" Status="Draft">
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="596" Name="TCP RST Injection" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="597" Name="Absolute Path Traversal" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Configure the access control correctly.</Mitigation>
            <Mitigation>Design: Enforce principle of least privilege.</Mitigation>
            <Mitigation>Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.</Mitigation>
            <Mitigation>Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.</Mitigation>
            <Mitigation>Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
            <Mitigation>Implementation: Use indirect references rather than actual file names.</Mitigation>
            <Mitigation>Implementation: Use possible permissions on file access when developing and deploying web applications.</Mitigation>
            <Mitigation>Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- whitelisting approach.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="598" Name="DNS Spoofing" Abstraction="Detailed" Status="Draft">
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Avoid dependence on DNS</Mitigation>
            <Mitigation>Design: Include "hosts file"/IP address in the application</Mitigation>
            <Mitigation>Implementation: Utilize a .onion domain with Tor support</Mitigation>
            <Mitigation>Implementation: DNSSEC</Mitigation>
            <Mitigation>Implementation: DNS-hold-open</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="599" Name="Terrestrial Jamming" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="6" Name="Argument Injection" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.</Mitigation>
            <Mitigation>Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.</Mitigation>
            <Mitigation>Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="60" Name="Reusing Session IDs (aka Session Replay)" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Always invalidate a session ID after the user logout.</Mitigation>
            <Mitigation>Setup a session time out for the session IDs.</Mitigation>
            <Mitigation>Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate man in the middle attack.</Mitigation>
            <Mitigation>Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.</Mitigation>
            <Mitigation>Encrypt the session data associated with the session ID.</Mitigation>
            <Mitigation>Use multifactor authentication.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="601" Name="Jamming" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="603" Name="Blockage" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="604" Name="Wi-Fi Jamming" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="605" Name="Cellular Jamming" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="606" Name="Weakening of Cellular Encryption" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.</Mitigation>
            <Mitigation>Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="607" Name="Obstruction" Abstraction="Meta" Status="Draft">
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="608" Name="Cryptanalysis of Cellular Encryption" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.</Mitigation>
            <Mitigation>Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="609" Name="Cellular Traffic Intercept" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="61" Name="Session Fixation" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.</Mitigation>
            <Mitigation>Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.</Mitigation>
            <Mitigation>Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="610" Name="Cellular Data Injection" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="611" Name="BitSquatting" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation>
            <Mitigation>When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="612" Name="WiFi MAC Address Tracking" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Automatic randomization of WiFi MAC addresses</Mitigation>
            <Mitigation>Frequent changing of handset and retransmission device</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="613" Name="WiFi SSID Tracking" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Do not enable the feature of "Hidden SSIDs” (also known as “Network Cloaking”) – this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently.</Mitigation>
            <Mitigation>Frequently change the SSID to new and unrelated values</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="614" Name="Rooting SIM Cards" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="615" Name="Evil Twin Wi-Fi Attack" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Commercial defensive technology that monitors for rogue Wi-Fi access points, man-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="616" Name="Establish Rogue Location" Abstraction="Standard" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="617" Name="Cellular Rogue Base Station" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Passively monitor cellular network connection for real-time threat detection and logging for manual review.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="618" Name="Cellular Broadcast Message Request" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Frequent changing of mobile number.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="619" Name="Signal Strength Tracking" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="62" Name="Cross Site Request Forgery" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.</Mitigation>
            <Mitigation>Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.</Mitigation>
            <Mitigation>Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.</Mitigation>
            <Mitigation>In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="620" Name="Drop Encryption Level" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="621" Name="Analysis of Packet Timing and Sizes" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="622" Name="Electromagnetic Side-Channel Attack" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Utilize side-channel resistant implementations of all crypto algorithms.</Mitigation>
            <Mitigation>Strong physical security of all devices that contain secret key information. (even when devices are not in use)</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="623" Name="Compromising Emanations Attack" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>None are known.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="624" Name="Fault Injection" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Implement robust physical security countermeasures and monitoring.</Mitigation>
         </Mitigations>
         <Notes>
            <Note Type="Other">Considerable effort on the part of the adversary is often required in order to detect and analyze fault/side channel data.</Note>
         </Notes>
         
      </Attack_Pattern>
      <Attack_Pattern ID="625" Name="Mobile Device Fault Injection" Abstraction="Detailed" Status="Draft">
         
         
         
         
         <Mitigations>
            <Mitigation>Strong physical security of all devices that contain secret key information. (even when devices are not in use)</Mitigation>
            <Mitigation>Frequent changes to secret keys and certificates.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="626" Name="Smudge Attack" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Strong physical security of the device.</Mitigation>
         </Mitigations>
         
      </Attack_Pattern>
      <Attack_Pattern ID="627" Name="Counterfeit GPS Signals" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="628" Name="Carry-Off GPS Attack" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="629" Name="Unauthorized Use of Device Resources" Abstraction="Detailed" Status="Draft">
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="63" Name="Cross-Site Scripting (XSS)" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Session tokens for specific host</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="630" Name="TypoSquatting" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation>
            <Mitigation>Purchase potential TypoSquatted domains and forward to legitimate domain.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="631" Name="SoundSquatting" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation>
            <Mitigation>Purchase potential SoundSquatted domains and forward to legitimate domain.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="632" Name="Homograph Attack via Homoglyphs" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation>
            <Mitigation>Utilize browsers that can warn users if URLs contain characters from different character sets.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="633" Name="Token Impersonation" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="634" Name="Probe Audio and Video Peripherals" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Prevent unknown code from executing on a system through whitelisting policy.</Mitigation>
            <Mitigation>Patch installed applications as soon as new updates become available.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="635" Name="Alternative Execution Due to Deceptive Filenames" Abstraction="Standard" Status="Draft">
         
         
         
         
         <Mitigations>
            <Mitigation>Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="636" Name="Hiding Malicious Data or Code within Files" Abstraction="Standard" Status="Draft">
         
         
         
         
         <Mitigations>
            <Mitigation>Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="637" Name="Collect Data from Clipboard" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.</Mitigation>
            <Mitigation>Employ a robust identification and audit/blocking via whitelisting of applications on your system. Malware may contain the functionality associated with this attack pattern.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="638" Name="Altered Component Firmware" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="639" Name="Probe System Files" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         <Mitigations>
            <Mitigation>Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="64" Name="Using Slashes and URL Encoding Combined to Bypass Validation Logic" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation>
            <Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.</Mitigation>
            <Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation>
            <Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation>
            <Mitigation>Refer to the RFCs to safely decode URL.</Mitigation>
            <Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</Mitigation>
            <Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="640" Name="Inclusion of Code in Existing Process" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Prevent unknown or malicious software from loading through whitelisting policy.</Mitigation>
            <Mitigation>Properly restrict the location of the software being used.</Mitigation>
            <Mitigation>Leverage security kernel modules providing advanced access control and process restrictions like SELinux.</Mitigation>
            <Mitigation>Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.</Mitigation>
            <Mitigation>Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.</Mitigation>
            <Mitigation>Monitor processes and command-line arguments for unknown behavior related to code injection.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="641" Name="DLL Side-Loading" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Prevent unknown DLLs from loading through whitelisting policy.</Mitigation>
            <Mitigation>Patch installed applications as soon as new updates become available.</Mitigation>
            <Mitigation>Properly restrict the location of the software being used.</Mitigation>
            <Mitigation>Use of sxstrace.exe on Windows as well as manual inspection of the manifests.</Mitigation>
            <Mitigation>Require code signing and avoid using relative paths for resources.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="642" Name="Replace Binaries" Abstraction="Detailed" Status="Draft">
         
         
         
         
         <Mitigations>
            <Mitigation>Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="643" Name="Identify Shared Files/Directories on System" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using whitelisting tools.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="644" Name="Use of Captured Hashes (Pass The Hash)" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.</Mitigation>
            <Mitigation>Monitor system and domain logs for abnormal credential access.</Mitigation>
            <Mitigation>Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="645" Name="Use of Captured Tickets (Pass The Ticket)" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.</Mitigation>
            <Mitigation>Monitor system and domain logs for abnormal access.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="646" Name="Peripheral Footprinting" Abstraction="Detailed" Status="Stable">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by process whitelisting.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="647" Name="Collect Data from Registries" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.</Mitigation>
            <Mitigation>Employ robust identification and audit/blocking via whitelisting of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="648" Name="Collect Data from Screen Capture" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using whitelisting tools.</Mitigation>
            <Mitigation>While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="649" Name="Adding a Space to a File Extension" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>File extensions should be checked to see if non-visible characters are being included.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="65" Name="Sniff Application Code" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Encrypt all communication between the client and server.</Mitigation>
            <Mitigation>Implementation: Use SSL, SSH, SCP.</Mitigation>
            <Mitigation>Operation: Use "ifconfig/ipconfig" or other tools to detect the sniffer installed in the network.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="650" Name="Upload a Web Shell to a Web Server" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.</xhtml:p>
               <xhtml:p>Insure that the file permissions in directories on the web server from which files can be execute is set to the "least privilege" settings, and that those directories contents is controlled by a whitelist.</xhtml:p>
            </Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="651" Name="Eavesdropping" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Be mindful of your surroundings when discussing sensitive information in public areas.</Mitigation>
            <Mitigation>Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.</Mitigation>
            <Mitigation>If possible, physically disable the microphone on your machine if it is not needed.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="66" Name="SQL Injection" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.</Mitigation>
            <Mitigation>Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.</Mitigation>
            <Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="67" Name="String Format Overflow in syslog()" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>The code should be reviewed for misuse of the Syslog function call. Manual or automated code review can be used. The reviewer needs to ensure that all format string functions are passed a static string which cannot be controlled by the user and that the proper number of arguments are always sent to that function as well. If at all possible, do not use the %n operator in format strings. The following code shows a correct usage of Syslog():</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="good">syslog(LOG_ERR, "%s", cmdBuf);</xhtml:div>
               <xhtml:p>The following code shows a vulnerable usage of Syslog():</xhtml:p>
               <xhtml:div style="margin-left:10px;" class="bad">syslog(LOG_ERR, cmdBuf);<xhtml:div>
                     <xhtml:i>// the buffer cmdBuff is taking user supplied data.</xhtml:i>
                  </xhtml:div>
               </xhtml:div>
            </Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="68" Name="Subvert Code-signing Facilities" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.</Mitigation>
            <Mitigation>If an attacker cannot attack the scheme directly, he might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="69" Name="Target Programs with Elevated Privileges" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Apply the principle of least privilege.</Mitigation>
            <Mitigation>Validate all untrusted data.</Mitigation>
            <Mitigation>Apply the latest patches.</Mitigation>
            <Mitigation>Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.</Mitigation>
            <Mitigation>Avoid revealing information about your system (e.g., version of the program) to anonymous users.</Mitigation>
            <Mitigation>Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.</Mitigation>
            <Mitigation>If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.</Mitigation>
            <Mitigation>Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.</Mitigation>
            <Mitigation>Monitor traffic and resource usage and pay attention if resource exhaustion occurs.</Mitigation>
            <Mitigation>Protect your log file from unauthorized modification and log forging.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="7" Name="Blind SQL Injection" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.</Mitigation>
            <Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="70" Name="Try Common or Default Usernames and Passwords" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Delete all default account credentials that may be put in by the product vendor.</Mitigation>
            <Mitigation>Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.</Mitigation>
            <Mitigation>Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.</Mitigation>
            <Mitigation>Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="71" Name="Using Unicode Encoding to Bypass Validation Logic" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.</Mitigation>
            <Mitigation>Ensure that filtering or input validation is applied to canonical data.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="72" Name="URL Encoding" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Refer to the RFCs to safely decode URL.</Mitigation>
            <Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</Mitigation>
            <Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</Mitigation>
            <Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation>
            <Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)</Mitigation>
            <Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="73" Name="User-Controlled Filename" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Scan dynamically generated content against validation specification</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="74" Name="Manipulating User State" Abstraction="Meta" Status="Stable">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.</Mitigation>
            <Mitigation>Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.</Mitigation>
            <Mitigation>Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="75" Name="Manipulating Writeable Configuration Files" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege</Mitigation>
            <Mitigation>Design: Backup copies of all configuration files</Mitigation>
            <Mitigation>Implementation: Integrity monitoring for configuration files</Mitigation>
            <Mitigation>Implementation: Enforce audit logging on code and configuration promotion procedures.</Mitigation>
            <Mitigation>Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="76" Name="Manipulating Web Input to File System Calls" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Enforce principle of least privilege.</Mitigation>
            <Mitigation>Design: Ensure all input is validated, and does not contain file system commands</Mitigation>
            <Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation>
            <Mitigation>Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.</Mitigation>
            <Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="77" Name="Manipulating User-Controlled Variables" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>
               <xhtml:p>Do not allow override of global variables and do Not Trust Global Variables.</xhtml:p>
               <xhtml:p>If the register_globals option is enabled, PHP will create global variables for each GET, POST, and cookie variable included in the HTTP request. This means that a malicious user may be able to set variables unexpectedly. For instance make sure that the server setting for PHP does not expose global variables.</xhtml:p>
            </Mitigation>
            <Mitigation>A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.</Mitigation>
            <Mitigation>Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.</Mitigation>
            <Mitigation>Use encapsulation when declaring your variables. This is to lower the exposure of your variables.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should be rejected by the program.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="78" Name="Using Escaped Slashes in Alternate Encoding" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Verify that the user-supplied data does not use backslash character to escape malicious characters.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
            <Mitigation>Be aware of the threat of alternative method of data encoding.</Mitigation>
            <Mitigation>Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.</Mitigation>
            <Mitigation>In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.</Mitigation>
            <Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation>
            <Mitigation>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="79" Name="Using Slashes in Alternate Encoding" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.</Mitigation>
            <Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation>
            <Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)</Mitigation>
            <Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)</Mitigation>
            <Mitigation>Test your path decoding process against malicious input.</Mitigation>
            <Mitigation>In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the application based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="8" Name="Buffer Overflow in an API Call" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use secure functions not vulnerable to buffer overflow.</Mitigation>
            <Mitigation>If you have to use dangerous functions, make sure that you do boundary checking.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="80" Name="Using UTF-8 Encoding to Bypass Validation Logic" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.</Mitigation>
            <Mitigation>
               <xhtml:p>The exact response required from an UTF-8 decoder on invalid input is not uniformly defined by the standards. In general, there are several ways a UTF-8 decoder might behave in the event of an invalid byte sequence:</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:ul>
                     <xhtml:li>1. Insert a replacement character (e.g. '?', '').</xhtml:li>
                     <xhtml:li>2. Ignore the bytes.</xhtml:li>
                     <xhtml:li>3. Interpret the bytes according to a different character encoding (often the ISO-8859-1 character map).</xhtml:li>
                     <xhtml:li>4. Not notice and decode as if the bytes were some similar bit of UTF-8.</xhtml:li>
                     <xhtml:li>5. Stop decoding and report an error (possibly giving the caller the option to continue).</xhtml:li>
                  </xhtml:ul>
               </xhtml:div>
               <xhtml:p>It is possible for a decoder to behave in different ways for different types of invalid input.</xhtml:p>
               <xhtml:p>RFC 3629 only requires that UTF-8 decoders must not decode "overlong sequences" (where a character is encoded in more bytes than needed but still adheres to the forms above). The Unicode Standard requires a Unicode-compliant decoder to "...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence."</xhtml:p>
               <xhtml:p>Overlong forms are one of the most troublesome types of UTF-8 data. The current RFC says they must not be decoded but older specifications for UTF-8 only gave a warning and many simpler decoders will happily decode them. Overlong forms have been used to bypass security validations in high profile products including Microsoft's IIS web server. Therefore, great care must be taken to avoid security issues if validation is performed before conversion from UTF-8, and it is generally much simpler to handle overlong forms before any input validation is done.</xhtml:p>
               <xhtml:p>To maintain security in the case of invalid input, there are two options. The first is to decode the UTF-8 before doing any input validation checks. The second is to use a decoder that, in the event of invalid input, returns either an error or text that the application considers to be harmless. Another possibility is to avoid conversion out of UTF-8 altogether but this relies on any other software that the data is passed to safely handling the invalid data.</xhtml:p>
               <xhtml:p>Another consideration is error recovery. To guarantee correct recovery after corrupt or lost bytes, decoders must be able to recognize the difference between lead and trail bytes, rather than just assuming that bytes will be of the type allowed in their position.</xhtml:p>
            </Mitigation>
            <Mitigation>For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).</Mitigation>
            <Mitigation>Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)</Mitigation>
            <Mitigation>Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="81" Name="Web Logs Tampering" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use input validation before writing to web log</Mitigation>
            <Mitigation>Design: Validate all log data before it is output</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="83" Name="XPath Injection" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&amp;) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.</Mitigation>
            <Mitigation>Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.</Mitigation>
            <Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="84" Name="XQuery Injection" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Perform input white list validation on all XML input</Mitigation>
            <Mitigation>Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="85" Name="AJAX Fingerprinting" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="86" Name="XSS Through HTTP Headers" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation>
            <Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation>
            <Mitigation>Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation>
            <Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation>
            <Mitigation>Implementation: Perform input validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Perform output validation for all remote content.</Mitigation>
            <Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation>
            <Mitigation>Implementation: Session tokens for specific host</Mitigation>
            <Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="87" Name="Forceful Browsing" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.</Mitigation>
            <Mitigation>Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="88" Name="OS Command Injection" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.</Mitigation>
            <Mitigation>Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands</Mitigation>
            <Mitigation>All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="89" Name="Pharming" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>All sensitive information must be handled over a secure connection.</Mitigation>
            <Mitigation>Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.</Mitigation>
            <Mitigation>End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="9" Name="Buffer Overflow in Local Command-Line Utilities" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.</Mitigation>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
            <Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation>
            <Mitigation>Operational: Use OS-level preventative functionality. Not a complete solution.</Mitigation>
            <Mitigation>Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.</Mitigation>
            <Mitigation>Do not unnecessarily expose services.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="90" Name="Reflection Attack in Authentication Protocol" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further</Mitigation>
            <Mitigation>The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.</Mitigation>
            <Mitigation>Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="92" Name="Forced Integer Overflow" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation>
            <Mitigation>Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.</Mitigation>
            <Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation>
            <Mitigation>Always do bound checking before consuming user input data.</Mitigation>
            <Mitigation/>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="93" Name="Log Injection-Tampering-Forging" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Carefully control access to physical log files.</Mitigation>
            <Mitigation>Do not allow tainted data to be written in the log file without prior input validation. Whitelisting may be used to properly validate the data.</Mitigation>
            <Mitigation>Use synchronization to control the flow of execution.</Mitigation>
            <Mitigation>Use static analysis tools to identify log forging vulnerabilities.</Mitigation>
            <Mitigation>Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.</Mitigation>
         </Mitigations>
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="94" Name="Man in the Middle Attack" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Get your Public Key signed by a Certificate Authority</Mitigation>
            <Mitigation>Encrypt your communication using cryptography (SSL,...)</Mitigation>
            <Mitigation>Use Strong mutual authentication to always fully authenticate both ends of any communications channel.</Mitigation>
            <Mitigation>Exchange public keys using a secure channel</Mitigation>
         </Mitigations>
         
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="95" Name="WSDL Scanning" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>It is important to protect WSDL file or provide limited access to it.</Mitigation>
            <Mitigation>Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.</Mitigation>
            <Mitigation>Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.</Mitigation>
            <Mitigation>Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.</Mitigation>
            <Mitigation>Validate the received messages against the WSDL Schema. Incomplete solution.</Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="96" Name="Block Access to Libraries" Abstraction="Detailed" Status="Draft">
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.</Mitigation>
         </Mitigations>
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="97" Name="Cryptanalysis" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Use proven cryptographic algorithms with recommended key sizes.</Mitigation>
            <Mitigation>
               <xhtml:p>Ensure that the algorithms are used properly. That means:</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:ul>
                     <xhtml:li>1. Not rolling out your own crypto; Use proven algorithms and implementations.</xhtml:li>
                     <xhtml:li>2. Choosing initialization vectors with sufficiently random numbers</xhtml:li>
                     <xhtml:li>3. Generating key material using good sources of randomness and avoiding known weak keys</xhtml:li>
                     <xhtml:li>4. Using proven protocols and their implementations.</xhtml:li>
                     <xhtml:li>5. Picking the most appropriate cryptographic algorithm for your usage context and data</xhtml:li>
                  </xhtml:ul>
               </xhtml:div>
            </Mitigation>
         </Mitigations>
         
         
         
         
      </Attack_Pattern>
      <Attack_Pattern ID="98" Name="Phishing" Abstraction="Standard" Status="Draft">
         
         
         
         
         
         
         
         
         
         
         <Mitigations>
            <Mitigation>Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.</Mitigation>
         </Mitigations>
         
         
      </Attack_Pattern>
   </Attack_Patterns>
   
   
   
</Attack_Pattern_Catalog>