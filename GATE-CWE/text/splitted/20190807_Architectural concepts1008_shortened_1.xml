<?xml version="1.0" encoding="UTF-8"?>
<Weakness_Catalog xmlns="http://cwe.mitre.org/cwe-6" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Name="VIEW LIST: CWE-1008: Architectural Concepts" Version="3.3" Date="2019-06-20" xsi:schemaLocation="http://cwe.mitre.org/cwe-6 http://cwe.mitre.org/data/xsd/cwe_schema_v6.1.xsd">
   <Weaknesses>
      <Weakness ID="114" Name="Process Control" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.</Description>
         <Extended_Description>Process control vulnerabilities take two forms: 1. An attacker can change the command that the program executes: the attacker explicitly controls what the command is. 2. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code uses System.loadLibrary() to load code from a native library named library.dll, which is normally found in a standard system directory.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>System.loadLibrary("library.dll");<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem here is that System.loadLibrary() accepts a library name, not a path, for the library to be loaded. From the Java 1.4.2 API documentation this function behaves as follows [1]: A file containing native code is loaded from the local file system from a place where library files are conventionally obtained. The details of this process are implementation-dependent. The mapping from a library name to a specific filename is done in a system-specific manner. If an attacker is able to place a malicious copy of library.dll higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's library.dll will now be run with elevated privileges, possibly giving them complete control of the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code from a privileged application uses a registry entry to determine the directory in which it is installed and loads a library file based on a relative path from the specified directory.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>...<xhtml:br/>RegQueryValueEx(hkey, "APPHOME",<xhtml:br/>0, 0, (BYTE*)home, &amp;size);<xhtml:br/>char* lib=(char*)malloc(strlen(home)+strlen(INITLIB));<xhtml:br/>if (lib) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>strcpy(lib,home);<xhtml:br/>strcat(lib,INITCMD);<xhtml:br/>LoadLibrary(lib);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The code in this example allows an attacker to load an arbitrary library, from which code will be executed with the elevated privilege of the application, by modifying a registry key to specify a different path containing a malicious version of INITLIB. Because the program does not validate the value read from the environment, if an attacker can control the value of APPHOME, they can fool the application into running malicious code.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code is from a web-based administration utility that allows users access to an interface through which they can update their profile on the system. The utility makes use of a library named liberty.dll, which is normally found in a standard system directory.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>LoadLibrary("liberty.dll");</xhtml:div>
               </Example_Code>
               <Body_Text>The problem is that the program does not specify an absolute path for liberty.dll. If an attacker is able to place a malicious library named liberty.dll higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's liberty.dll will now be run with elevated privileges, possibly giving the attacker complete control of the system. The type of attack seen in this example is made possible because of the search order used by LoadLibrary() when an absolute path is not specified. If the current directory is searched before system directories, as was the case up until the most recent versions of Windows, then this type of attack becomes trivial if the attacker can execute the program locally. The search order is operating system version dependent, and is controlled on newer operating systems by the value of the registry key: HKLM\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Process Control</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="108"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="117" Name="Improper Output Neutralization for Logs" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not neutralize or incorrectly neutralizes output that is written to logs.</Description>
         <Extended_Description>
            <xhtml:p>This can allow an attacker to forge log entries or inject malicious content into logs.</xhtml:p>
            <xhtml:p>Log forging vulnerabilities occur when:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ol>
                  <xhtml:li>Data enters an application from an untrusted source.</xhtml:li>
                  <xhtml:li>The data is written to an application or system log file.</xhtml:li>
               </xhtml:ol>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="116" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="116" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Hide Activities</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-30">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following web application code attempts to read an integer value from a request object. If the parseInt call fails, then the input is logged with an error message indicating what happened.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String val = request.getParameter("val");<xhtml:br/>try {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>int value = Integer.parseInt(val);</xhtml:div>
                     </xhtml:div>}<xhtml:br/>catch (NumberFormatException) {<xhtml:div style="margin-left:10px;">log.info("Failed to parse val = " + val);</xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>If a user submits the string "twenty-one" for val, the following entry is logged:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>INFO: Failed to parse val=twenty-one</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
               <Body_Text>However, if an attacker submits the string "twenty-one%0a%0aINFO:+User+logged+out%3dbadguy", the following entry is logged:</Body_Text>
               <Body_Text>
                  <xhtml:ul>
                     <xhtml:li>
                        <xhtml:div>INFO: Failed to parse val=twenty-one</xhtml:div>
                     </xhtml:li>
                     <xhtml:li>
                        <xhtml:div>INFO: User logged out=badguy</xhtml:div>
                     </xhtml:li>
                  </xhtml:ul>
               </Body_Text>
               <Body_Text>Clearly, attackers can use this same mechanism to insert arbitrary log entries.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-4624</Reference>
               <Description>Chain: inject fake log entries with fake timestamps using CRLF injection</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4624</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Log Forging</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>IDS03-J</Entry_ID>
               <Entry_Name>Do not log unsanitized user input</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Oracle Coding Standard for Java">
               <Entry_ID>IDS03-J</Entry_ID>
               <Entry_Name>Do not log unsanitized user input</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="268"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="93"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-52"/>
            <Reference External_Reference_ID="REF-53"/>
            <Reference External_Reference_ID="REF-43"/>
         </References>
         
      </Weakness>
      <Weakness ID="138" Name="Improper Neutralization of Special Elements" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.</Description>
         <Extended_Description>Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If software does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol &lt; ("less than") as meaning "read input from a file".</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="707" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="74" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their software system. One defense is to create a whitelist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the whitelist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-0677</Reference>
               <Description>Read arbitrary files from mail client by providing a special MIME header that is internally used to store pathnames for attachments.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0677</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0703</Reference>
               <Description>Setuid program does not cleanse special escape sequence before sending data to a mail program, causing the mail program to process those sequences.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0703</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0020</Reference>
               <Description>Multi-channel issue. Terminal escape sequences not filtered from log files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0020</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0083</Reference>
               <Description>Multi-channel issue. Terminal escape sequences not filtered from log files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0083</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Special Elements (Characters or Reserved Words)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Custom Special Character Injection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="15"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This weakness can be related to interpretation conflicts or interaction errors in intermediaries (such as proxies or application firewalls) when the intermediary's model of an endpoint does not account for protocol-specific special elements.</Note>
            <Note Type="Relationship">See this entry's children for different types of special elements that have been observed at one point or another. However, it can be difficult to find suitable CVE examples. In an attempt to be complete, CWE includes some types that do not have any associated observed example.</Note>
            <Note Type="Research Gap">This weakness is probably under-studied for proprietary or custom formats. It is likely that these issues are fairly common in applications that use their own custom format for configuration files, logs, meta-data, messaging, etc. They would only be found by accident or with a focused effort based on an understanding of the format.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="15" Name="External Control of System or Configuration Setting" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>One or more system settings or configuration elements can be externally controlled by a user.</Description>
         <Extended_Description>Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>Setting manipulation vulnerabilities occur when an attacker can control values that govern the behavior of the system, manage specific resources, or in some way affect the functionality of the application.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>In general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following C code accepts a number as one of its command line parameters and sets it as the host ID of the current machine.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>...<xhtml:br/>sethostid(argv[1]);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Although a process must be privileged to successfully invoke sethostid(), unprivileged users may be able to invoke the program. The code in this example allows user input to directly control the value of a system setting. If an attacker provides a malicious value for host ID, the attacker can misidentify the affected machine on the network or cause other unintended behavior.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following Java code snippet reads a string from an HttpServletRequest and sets it as the active catalog for a database Connection.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>conn.setCatalog(request.getParameter("catalog"));<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>In this example, an attacker could cause an error by providing a nonexistent catalog name or connect to an unauthorized portion of the database.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Setting Manipulation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="146"/>
            <Related_Attack_Pattern CAPEC_ID="176"/>
            <Related_Attack_Pattern CAPEC_ID="203"/>
            <Related_Attack_Pattern CAPEC_ID="270"/>
            <Related_Attack_Pattern CAPEC_ID="271"/>
            <Related_Attack_Pattern CAPEC_ID="69"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="150" Name="Improper Neutralization of Escape, Meta, or Control Sequences" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.</Description>
         <Extended_Description>As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="138" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="138" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of black lists and whitelists to ensure only valid, expected and appropriate input is processed by the system.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-28">
               <Phase>Implementation</Phase>
               <Strategy>Output Encoding</Strategy>
               <Description>While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict whitelist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0542</Reference>
               <Description>The mail program processes special "~" escape sequence even when not in interactive mode.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0542</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0703</Reference>
               <Description>Setuid program does not filter escape sequences before calling mail program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0703</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0986</Reference>
               <Description>Mail function does not filter control characters from arguments, allowing mail message content to be modified.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0986</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0020</Reference>
               <Description>Multi-channel issue. Terminal escape sequences not filtered from log files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0020</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0083</Reference>
               <Description>Multi-channel issue. Terminal escape sequences not filtered from log files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0083</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0021</Reference>
               <Description>Terminal escape sequences not filtered by terminals when displaying files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0021</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0022</Reference>
               <Description>Terminal escape sequences not filtered by terminals when displaying files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0022</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0023</Reference>
               <Description>Terminal escape sequences not filtered by terminals when displaying files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0023</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0063</Reference>
               <Description>Terminal escape sequences not filtered by terminals when displaying files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0063</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0476</Reference>
               <Description>Terminal escape sequences not filtered by terminals when displaying files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0476</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1556</Reference>
               <Description>MFV. (multi-channel). Injection of control characters into log files that allow information hiding when using raw Unix programs to read the files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1556</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Escape, Meta, or Control Character / Sequence</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>IDS03-J</Entry_ID>
               <Entry_Name>Do not log unsanitized user input</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="134"/>
            <Related_Attack_Pattern CAPEC_ID="41"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="93"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="20" Name="Improper Input Validation" Abstraction="Class" Structure="Simple" Status="Usable">
         <Description>The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program.</Description>
         <Extended_Description>When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="22" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="41" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="74" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="119" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>If a programmer believes that an attacker cannot modify certain inputs, then the programmer might not perform any input validation at all. For example, in web applications, many programmers believe that cookies and hidden form fields can not be modified from a web browser (CWE-472), although they can be altered using a proxy or a custom program. In a client-server architecture, the programmer might assume that client-side security checks cannot be bypassed, even when a custom client could be written that skips those checks (CWE-602).</xhtml:p>
               </Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Impact>DoS: Resource Consumption (CPU)</Impact>
               <Impact>DoS: Resource Consumption (Memory)</Impact>
               <Note>An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Memory</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read confidential data if they are able to control resource references.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Modify Memory</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-3">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Some instances of improper input validation can be detected using automated static analysis.</xhtml:p>
                  <xhtml:p>A static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.</xhtml:p>
                  <xhtml:p>Except in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-4">
               <Method>Manual Static Analysis</Method>
               <Description>When custom input validation is required, such as when enforcing business rules, manual analysis is necessary to ensure that the validation is properly implemented.</Description>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-5">
               <Method>Fuzzing</Method>
               <Description>Fuzzing techniques can be useful for detecting input validation errors. When unexpected inputs are provided to the software, the software should not crash or otherwise become unstable, and it should generate application-controlled error messages. If exceptions or interpreter-generated error messages occur, this indicates that the input was not detected and handled within the application logic itself.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-7">
               <Phase>Architecture and Design</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-7">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use an input validation framework such as Struts or the OWASP ESAPI Validation API. If you use Struts, be mindful of weaknesses covered by the CWE-101 category.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-6">
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</xhtml:p>
                  <xhtml:p>Even though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-35">
               <Phase>Implementation</Phase>
               <Description>Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass whitelist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.</xhtml:p>
                  <xhtml:p>Consider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>public static final double price = 20.00;<xhtml:br/>int quantity = currentUser.getAttribute("quantity");<xhtml:br/>double total = price * quantity;<xhtml:br/>chargeUser(total);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>...<xhtml:br/>#define MAX_DIM 100<xhtml:br/>...<xhtml:br/>
                     <xhtml:i>/* board dimensions */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>int m,n, error;<xhtml:br/>board_square_t *board;<xhtml:br/>printf("Please specify the board height: \n");<xhtml:br/>error = scanf("%d", &amp;m);<xhtml:br/>if ( EOF == error ){<xhtml:div style="margin-left:10px;">die("No integer passed: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>printf("Please specify the board width: \n");<xhtml:br/>error = scanf("%d", &amp;n);<xhtml:br/>if ( EOF == error ){<xhtml:div style="margin-left:10px;">die("No integer passed: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>if ( m &gt; MAX_DIM || n &gt; MAX_DIM ) {<xhtml:div style="margin-left:10px;">die("Value too large: Die evil hacker!\n");</xhtml:div>}<xhtml:br/>board = (board_square_t*) malloc( m * n * sizeof(board_square_t));<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a PHP application in which the programmer attempts to display a user's birthday and homepage.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$birthday = $_GET['birthday'];<xhtml:br/>$homepage = $_GET['homepage'];<xhtml:br/>echo "Birthday: $birthday&lt;br&gt;Homepage: &lt;a href=$homepage&gt;click here&lt;/a&gt;"</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer intended for $birthday to be in a date format and $homepage to be a valid URL. However, since the values are derived from an HTTP request, if an attacker can trick a victim into clicking a crafted URL with &lt;script&gt; tags providing the values for birthday and / or homepage, then the script will run on the client's browser when the web server echoes the content. Notice that even if the programmer were to defend the $birthday variable by restricting input to integers and dashes, it would still be possible for an attacker to provide a string of the form:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>2009-01-09--</xhtml:div>
               </Example_Code>
               <Body_Text>If this data were used in a SQL statement, it would treat the remainder of the statement as a comment. The comment could disable other security-related logic in the statement. In this case, encoding combined with input validation would be a more useful protection mechanism.</Body_Text>
               <Body_Text>Furthermore, an XSS (CWE-79) attack or SQL injection (CWE-89) are just a few of the potential consequences when input validation is not used. Depending on the context of the code, CRLF Injection (CWE-93), Argument Injection (CWE-88), or Command Injection (CWE-77) may also be possible.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This function attempts to extract a pair of numbers from a user-supplied string.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>void parse_data(char *untrusted_input){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>int m, n, error;<xhtml:br/>error = sscanf(untrusted_input, "%d:%d", &amp;m, &amp;n);<xhtml:br/>if ( EOF == error ){<xhtml:div style="margin-left:10px;">die("Did not specify integer value. Die evil hacker!\n");</xhtml:div>}<xhtml:br/>
                           <xhtml:i>/* proceed assuming n and m are initialized correctly */</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code attempts to extract two integer values out of a formatted, user-supplied input. However, if an attacker were to provide an input of the form:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>123:</xhtml:div>
               </Example_Code>
               <Body_Text>then only the m variable will be initialized. Subsequent use of n may result in the use of an uninitialized variable (CWE-457).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-34">
               <Intro_Text>The following example takes a user-supplied value to allocate an array of objects and then operates on the array.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>private void buildList ( int untrustedListSize ){<xhtml:div style="margin-left:10px;">if ( 0 &gt; untrustedListSize ){<xhtml:div style="margin-left:10px;">die("Negative value supplied for list size, die evil hacker!");</xhtml:div>}<xhtml:br/>Widget[] list = new Widget [ untrustedListSize ];<xhtml:br/>list[0] = new Widget();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-110">
               <Intro_Text>This application has registered to handle a URL when sent an intent:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>IntentFilter filter = new IntentFilter("com.example.URLHandler.openURL");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                     <xhtml:i>...</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>public class UrlHandlerReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>if("com.example.URLHandler.openURL".equals(intent.getAction())) {<xhtml:div style="margin-left:10px;">String URL = intent.getStringExtra("URLToOpen");<xhtml:br/>int length = URL.length();</xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>...</xhtml:i>
                                 <xhtml:br/>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-5305</Reference>
               <Description>Eval injection in Perl program using an ID that should only contain hyphens and numbers.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5305</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2223</Reference>
               <Description>SQL injection through an ID that was supposed to be numeric.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2223</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3477</Reference>
               <Description>lack of input validation in spreadsheet program leads to buffer overflows, integer overflows, array index errors, and memory corruption.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3477</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3843</Reference>
               <Description>insufficient validation enables XSS</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3843</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3174</Reference>
               <Description>driver in security product allows code execution due to insufficient validation</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3409</Reference>
               <Description>infinite loop from DNS packet with a label that points to itself</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3409</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6870</Reference>
               <Description>infinite loop from DNS packet with a label that points to itself</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1303</Reference>
               <Description>missing parameter leads to crash</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1303</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5893</Reference>
               <Description>HTTP request with missing protocol version number leads to crash</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5893</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6658</Reference>
               <Description>request with missing parameters leads to information exposure</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6658</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4114</Reference>
               <Description>system crash with offset value that is inconsistent with packet size</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4114</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-3790</Reference>
               <Description>size field that is inconsistent with packet size leads to buffer over-read</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3790</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2309</Reference>
               <Description>product uses a blacklist to identify potentially dangerous content, allowing attacker to bypass a warning</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2309</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3494</Reference>
               <Description>security bypass via an extra header</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3494</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-5462</Reference>
               <Description>use of extra data in a signature allows certificate signature forging</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5462</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3571</Reference>
               <Description>empty packet triggers reboot</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3571</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-5525</Reference>
               <Description>incomplete blacklist allows SQL injection</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5525</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1284</Reference>
               <Description>NUL byte in theme name cause directory traversal impact to be worse</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1284</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0600</Reference>
               <Description>kernel does not validate an incoming pointer before dereferencing it</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0600</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1738</Reference>
               <Description>anti-virus product has insufficient input validation of hooked SSDT functions, allowing code execution</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1738</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1737</Reference>
               <Description>anti-virus product allows DoS via zero-length field</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1737</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3464</Reference>
               <Description>driver does not validate input from userland to the kernel</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3464</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2252</Reference>
               <Description>kernel does not validate parameters sent in from userland, allowing code execution</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2252</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2374</Reference>
               <Description>lack of validation of string length fields allows memory consumption or buffer over-read</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1440</Reference>
               <Description>lack of validation of length field leads to infinite loop</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1440</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1625</Reference>
               <Description>lack of validation of input to an IOCTL allows code execution</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1625</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3177</Reference>
               <Description>zero-length attachment causes crash</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3177</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2442</Reference>
               <Description>zero-length input causes free of uninitialized pointer</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2442</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5563</Reference>
               <Description>crash via a malformed frame structure</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5563</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5285</Reference>
               <Description>infinite loop from a long SMTP request</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5285</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3812</Reference>
               <Description>router crashes with a malformed packet</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3812</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3680</Reference>
               <Description>packet with invalid version number leads to NULL pointer dereference</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3680</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3660</Reference>
               <Description>crash via multiple "." characters in file extension</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3660</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Input validation and representation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ERR07-C</Entry_ID>
               <Entry_Name>Prefer functions that support error checking over equivalent functions that don't</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO30-C</Entry_ID>
               <Entry_Name>Exclude user input from format strings</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MEM10-C</Entry_ID>
               <Entry_Name>Define and use a pointer validation function</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>20</Entry_ID>
               <Entry_Name>Improper Input Handling</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP25</Entry_ID>
               <Entry_Name>Tainted input to variable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="101"/>
            <Related_Attack_Pattern CAPEC_ID="104"/>
            <Related_Attack_Pattern CAPEC_ID="108"/>
            <Related_Attack_Pattern CAPEC_ID="109"/>
            <Related_Attack_Pattern CAPEC_ID="110"/>
            <Related_Attack_Pattern CAPEC_ID="120"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="135"/>
            <Related_Attack_Pattern CAPEC_ID="136"/>
            <Related_Attack_Pattern CAPEC_ID="14"/>
            <Related_Attack_Pattern CAPEC_ID="153"/>
            <Related_Attack_Pattern CAPEC_ID="182"/>
            <Related_Attack_Pattern CAPEC_ID="209"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="23"/>
            <Related_Attack_Pattern CAPEC_ID="230"/>
            <Related_Attack_Pattern CAPEC_ID="231"/>
            <Related_Attack_Pattern CAPEC_ID="24"/>
            <Related_Attack_Pattern CAPEC_ID="250"/>
            <Related_Attack_Pattern CAPEC_ID="261"/>
            <Related_Attack_Pattern CAPEC_ID="267"/>
            <Related_Attack_Pattern CAPEC_ID="28"/>
            <Related_Attack_Pattern CAPEC_ID="3"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="42"/>
            <Related_Attack_Pattern CAPEC_ID="43"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="46"/>
            <Related_Attack_Pattern CAPEC_ID="47"/>
            <Related_Attack_Pattern CAPEC_ID="473"/>
            <Related_Attack_Pattern CAPEC_ID="484"/>
            <Related_Attack_Pattern CAPEC_ID="52"/>
            <Related_Attack_Pattern CAPEC_ID="53"/>
            <Related_Attack_Pattern CAPEC_ID="588"/>
            <Related_Attack_Pattern CAPEC_ID="63"/>
            <Related_Attack_Pattern CAPEC_ID="64"/>
            <Related_Attack_Pattern CAPEC_ID="66"/>
            <Related_Attack_Pattern CAPEC_ID="67"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
            <Related_Attack_Pattern CAPEC_ID="71"/>
            <Related_Attack_Pattern CAPEC_ID="72"/>
            <Related_Attack_Pattern CAPEC_ID="73"/>
            <Related_Attack_Pattern CAPEC_ID="78"/>
            <Related_Attack_Pattern CAPEC_ID="79"/>
            <Related_Attack_Pattern CAPEC_ID="8"/>
            <Related_Attack_Pattern CAPEC_ID="80"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
            <Related_Attack_Pattern CAPEC_ID="83"/>
            <Related_Attack_Pattern CAPEC_ID="85"/>
            <Related_Attack_Pattern CAPEC_ID="88"/>
            <Related_Attack_Pattern CAPEC_ID="9"/>
            <Related_Attack_Pattern CAPEC_ID="99"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-166"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-168" Section="Input Validation Attacks"/>
            <Reference External_Reference_ID="REF-48"/>
            <Reference External_Reference_ID="REF-170"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 10, &#34;All Input Is Evil!&#34; Page 341"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>CWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.</xhtml:p>
               <xhtml:p>However, input validation is not always sufficient, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a last name is inserted into a query. The name "O'Reilly" would likely pass the validation step since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the "'" apostrophe character, which would need to be escaped or otherwise neutralized. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.</xhtml:p>
            </Note>
            <Note Type="Applicable Platform">
               <xhtml:p>Input validation can be a problem in any system that receives data from an external source.</xhtml:p>
            </Note>
            <Note Type="Maintenance">Input validation - whether missing or incorrect - is such an essential and widespread part of secure development that it is implicit in many different weaknesses. Traditionally, problems such as buffer overflows and XSS have been classified as input validation problems by many security professionals. However, input validation is not necessarily the only protection mechanism available for avoiding such problems, and in some cases it is not even sufficient. The CWE team has begun capturing these subtleties in chains within the Research Concepts view (CWE-1000), but more work is needed.</Note>
            <Note Type="Terminology">
               <xhtml:p>The "input validation" term is extremely common, but it is used in many different ways. In some cases its usage can obscure the real underlying weakness or otherwise hide chaining and composite relationships.</xhtml:p>
               <xhtml:p>Some people use "input validation" as a general term that covers many different neutralization techniques for ensuring that input is appropriate, such as filtering, canonicalization, and escaping. Others use the term in a more narrow context to simply mean "checking if an input conforms to expectations without changing it."</xhtml:p>
            </Note>
            <Note Type="Research Gap">There is not much research into the classification of input validation techniques and their application. Many publicly-disclosed vulnerabilities simply characterize a problem as "input validation" without providing more specific details that might contribute to a deeper understanding of validation techniques and the weaknesses they can prevent or reduce. Validation is over-emphasized in contrast to other neutralization techniques such as filtering and enforcement by conversion. See the vulnerability theory paper.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="201" Name="Information Exposure Through Sent Data" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The accidental exposure of sensitive information through sent data refers to the transmission of data which are either sensitive in and of itself or useful in the further exploitation of the system through standard data channels.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="209" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="202" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Memory</Impact>
               <Impact>Read Application Data</Impact>
               <Note>Sensitive data may be exposed to attackers.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Setup default error messages so that unexpected errors do not disclose sensitive information.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following is an actual MySQL error statement:</Intro_Text>
               <Example_Code Nature="result" Language="SQL">
                  <xhtml:div>Warning: mysql_pconnect(): Access denied for user: 'root@localhost' (Using password: N1nj4) in /usr/local/www/wi-data/includes/database.inc on line 4</xhtml:div>
               </Example_Code>
               <Body_Text>The error clearly exposes the database credentials.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Accidental leaking of sensitive information through sent data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="12"/>
            <Related_Attack_Pattern CAPEC_ID="217"/>
            <Related_Attack_Pattern CAPEC_ID="612"/>
            <Related_Attack_Pattern CAPEC_ID="613"/>
            <Related_Attack_Pattern CAPEC_ID="618"/>
            <Related_Attack_Pattern CAPEC_ID="619"/>
            <Related_Attack_Pattern CAPEC_ID="621"/>
            <Related_Attack_Pattern CAPEC_ID="622"/>
            <Related_Attack_Pattern CAPEC_ID="623"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="208" Name="Information Exposure Through Timing Discrepancy" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="203" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="203" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="327" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2003-0078</Reference>
               <Description>SSL implementation does not perform a MAC computation if an incorrect block cipher padding is used, which causes an information leak (timing discrepancy) that may make it easier to launch cryptographic attacks that rely on distinguishing between padding and MAC verification errors, possibly leading to extraction of the original plaintext, aka the "Vaudenay timing attack."</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0078</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-1117</Reference>
               <Description>Virtual machine allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1117</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0637</Reference>
               <Description>Product uses a shorter timeout for a non-existent user than a valid user, which makes it easier for remote attackers to guess usernames and conduct brute force password guessing.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0637</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0190</Reference>
               <Description>Product immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0190</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1602</Reference>
               <Description>FTP server responds in a different amount of time when a given username exists, which allows remote attackers to identify valid usernames by timing the server response.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1602</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0918</Reference>
               <Description>Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0918</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Cryptography</Functional_Area>
            <Functional_Area>Authentication</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Timing discrepancy infoleak</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="462"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">Often primary in cryptographic applications and algorithms.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="209" Name="Information Exposure Through an Error Message" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software generates an error message that includes sensitive information about its environment, users, or associated data.</Description>
         <Extended_Description>The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of ".." sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="PHP" Prevalence="Often"/>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>System Configuration</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>This weakness generally requires domain-specific interpretation using manual analysis. However, the number of potential error conditions may be too large to cover completely within limited time constraints.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-2">
               <Method>Automated Dynamic Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.</xhtml:p>
                  <xhtml:p>Error conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-12">
               <Method>Manual Dynamic Analysis</Method>
               <Description>Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-39">
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Ensure that error messages only contain minimal details that are useful to the intended audience, and nobody else. The messages need to strike the balance between being too cryptic and not being cryptic enough. They should not necessarily reveal the methods that were used to determine the error. Such detailed information can be used to refine the original attack to increase the chances of success.</xhtml:p>
                  <xhtml:p>If errors must be tracked in some detail, capture them in log messages - but consider what could occur if the log messages can be viewed by attackers. Avoid recording highly sensitive information such as passwords in any form. Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a username is valid or not.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Handle exceptions internally and do not display errors containing potentially sensitive information to a user.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
               <Effectiveness_Notes>This makes it easier to spot places in the code where data is being used that is unencrypted.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Create default error pages or messages that do not leak any information.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, sensitive information might be printed depending on the exception that occurs.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">/.../</xhtml:div>}<xhtml:br/>catch (Exception e) {<xhtml:div style="margin-left:10px;">System.out.println(e);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an exception related to SQL is handled by the catch, then the output might contain sensitive information such as SQL query structure or private information. If this output is redirected to a web user, this may represent a security problem.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code tries to open a database connection, and prints any exceptions that occur.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">openDbConnection();</xhtml:div>}<xhtml:br/>
                     <xhtml:i>//print exception message that includes exception message and configuration file location</xhtml:i>
                     <xhtml:br/>catch (Exception $e) {<xhtml:div style="margin-left:10px;">echo 'Caught exception: ', $e-&gt;getMessage(), '\n';<xhtml:br/>echo 'Check credentials in config file at: ', $Mysql_config_location, '\n';</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code generates an error message that leaks the full pathname of the configuration file.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>$ConfigDir = "/home/myprog/config";<xhtml:br/>$uname = GetUserInput("username");<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># avoid CWE-22, CWE-78, others.</xhtml:i>
                     <xhtml:br/>ExitError("Bad hacker!") if ($uname !~ /^\w+$/);<xhtml:br/>$file = "$ConfigDir/$uname.txt";<xhtml:br/>if (! (-e $file)) {<xhtml:div style="margin-left:10px;">ExitError("Error: $file does not exist");</xhtml:div>}<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public BankAccount getUserBankAccount(String username, String accountNumber) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>BankAccount userAccount = null;<xhtml:br/>String query = null;<xhtml:br/>try {<xhtml:div style="margin-left:10px;">if (isAuthorizedUser(username)) {<xhtml:div style="margin-left:10px;">query = "SELECT * FROM accounts WHERE owner = "<xhtml:br/>+ username + " AND accountID = " + accountNumber;<xhtml:br/>DatabaseManager dbManager = new DatabaseManager();<xhtml:br/>Connection conn = dbManager.getConnection();<xhtml:br/>Statement stmt = conn.createStatement();<xhtml:br/>ResultSet queryResult = stmt.executeQuery(query);<xhtml:br/>userAccount = (BankAccount)queryResult.getObject(accountNumber);</xhtml:div>}</xhtml:div>} catch (SQLException ex) {<xhtml:div style="margin-left:10px;">String logMessage = "Unable to retrieve account information from database,\nquery: " + query;<xhtml:br/>Logger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);</xhtml:div>}<xhtml:br/>return userAccount;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-2049</Reference>
               <Description>POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2049</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5172</Reference>
               <Description>Program reveals password in error message if attacker can trigger certain database errors.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5172</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4638</Reference>
               <Description>Composite: application running with high privileges allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4638</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1579</Reference>
               <Description>Existence of user names can be determined by requesting a nonexistent blog and reading the error message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1579</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-1409</Reference>
               <Description>Direct request to library file in web application triggers pathname leak in error message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-1409</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3060</Reference>
               <Description>Malformed input to login page causes leak of full path when IMAP call fails.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3060</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0603</Reference>
               <Description>Malformed regexp syntax leads to information exposure in error message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0603</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Accidental leaking of sensitive information through error messages</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A6</Entry_ID>
               <Entry_Name>Information Leakage and Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR01-J</Entry_ID>
               <Entry_Name>Do not allow exceptions to expose sensitive information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="214"/>
            <Related_Attack_Pattern CAPEC_ID="215"/>
            <Related_Attack_Pattern CAPEC_ID="463"/>
            <Related_Attack_Pattern CAPEC_ID="54"/>
            <Related_Attack_Pattern CAPEC_ID="7"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-174"/>
            <Reference External_Reference_ID="REF-175" Section="Section 9.2, Page 326"/>
            <Reference External_Reference_ID="REF-176" Section="Chapter 16, &#34;General Good Practices.&#34; Page 415"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 11: Failure to Handle Errors Correctly.&#34; Page 183"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 12: Information Leakage.&#34; Page 191"/>
            <Reference External_Reference_ID="REF-179"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Overly Verbose Error Messages&#34;, Page 75"/>
         </References>
         
      </Weakness>
      <Weakness ID="210" Name="Information Exposure Through Self-generated Error Message" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="209" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="209" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code uses custom configuration files for each user in the application. It checks to see if the file exists on the system before attempting to open and use the file. If the configuration file does not exist, then an error is generated, and the application exits.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>$uname = GetUserInput("username");<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># avoid CWE-22, CWE-78, others.</xhtml:i>
                     <xhtml:br/>if ($uname !~ /^\w+$/)<xhtml:br/>{<xhtml:div style="margin-left:10px;">ExitError("Bad hacker!") ;</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>$filename = "/home/myprog/config/" . $uname . ".txt";<xhtml:br/>if (!(-e $filename))<xhtml:br/>{<xhtml:div style="margin-left:10px;">ExitError("Error: $filename does not exist");</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that is not associated with a configuration file, an attacker could get this pathname from the error message. It could then be used to exploit path traversal, symbolic link following, or other problems that may exist elsewhere in the application.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-1745</Reference>
               <Description>Infoleak of sensitive information in error message (physical access required).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1745</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Product-Generated Error Message Infoleak</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 12: Information Leakage.&#34; Page 191"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Overly Verbose Error Messages&#34;, Page 75"/>
         </References>
         
      </Weakness>
      <Weakness ID="211" Name="Information Exposure Through Externally-Generated Error Message" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software performs an operation that triggers an external diagnostic or error message that is not directly generated by the software, such as an error generated by the programming language interpreter that the software uses. The error can contain sensitive system information.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="209" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="209" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="PHP" Prevalence="Often"/>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>PHP applications are often targeted for having this issue when the PHP interpreter generates the error outside of the application's control. However, other languages/environments exhibit the same issue.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Compilation or Build Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-40">
               <Phase>Implementation</Phase>
               <Phase>Build and Compilation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Debugging information should not make its way into a production release.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Handle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-1581</Reference>
               <Description>chain: product does not protect against direct request of an include file, leading to resultant path disclosure when the include file does not successfully execute.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1581</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1579</Reference>
               <Description>Single "'" inserted into SQL query leads to invalid SQL query execution, triggering full path disclosure. Possibly resultant from more general SQL injection issue.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1579</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0459</Reference>
               <Description>chain: product does not protect against direct request of a library file, leading to resultant path disclosure when the file does not successfully execute.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0459</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0443</Reference>
               <Description>invalid parameter triggers a failure to find an include file, leading to infoleak in error message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0443</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0433</Reference>
               <Description>Various invalid requests lead to information leak in verbose error messages describing the failure to instantiate a class, open a configuration file, or execute an undefined function.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0433</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1101</Reference>
               <Description>Improper handling of filename request with trailing "/" causes multiple consequences, including information leak in Visual Basic error message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1101</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Error Handling</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Product-External Error Message Infoleak</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">This is inherently a resultant vulnerability from a weakness within the product or an interaction error.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="212" Name="Improper Cross-boundary Removal of Sensitive Data" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software uses a resource that contains sensitive data, but it does not properly remove that data before it stores, transfers, or shares the resource with actors in another control sphere.</Description>
         <Extended_Description>
            <xhtml:p>Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing.</xhtml:p>
            <xhtml:p>For example, software that is used for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Impact>Read Application Data</Impact>
               <Note>Sensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
               <Effectiveness_Notes>This makes it easier to spot places in the code where data is being used that is unencrypted.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code either generates a public HTML user information page or a JSON response containing the same user information.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// API flag, output JSON if set</xhtml:i>
                     <xhtml:br/>$json = $_GET['json']<xhtml:br/>$username = $_GET['user']<xhtml:br/>if(!$json)<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                        <xhtml:div>$record = getUserRecord($username);<xhtml:br/>foreach($record as $fieldName =&gt; $fieldValue)<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                              <xhtml:div>if($fieldName == "email_address") {<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// skip displaying user emails</xhtml:i>
                                       <xhtml:br/>continue;</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:10px;">writeToHtmlPage($fieldName,$fieldValue);</xhtml:div>}</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>else<xhtml:br/>{<xhtml:div style="margin-left:10px;">$record = getUserRecord($username);<xhtml:br/>echo json_encode($record);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The programmer is careful to not display the user's e-mail address when displaying the public HTML page. However, the e-mail address is not removed from the JSON response, exposing the user's e-mail address.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-0406</Reference>
               <Description>Some image editors modify a JPEG image, but the original EXIF thumbnail image is left intact within the JPEG. (Also an interaction error).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0406</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0704</Reference>
               <Description>NAT feature in firewall leaks internal IP addresses in ICMP error messages.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0704</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cross-Boundary Cleansing Infoleak</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="168"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This entry is intended to be different from resultant information leaks, including those that occur from improper buffer initialization and reuse, improper encryption, interaction errors, and multiple interpretation errors. This entry could be regarded as a privacy leak, depending on the type of information that is leaked.</Note>
            <Note Type="Relationship">There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000).</Note>
            <Note Type="Terminology">The terms "cleansing" and "scrubbing" have multiple uses within computing. In information security, these are used for the removal of sensitive data, but they are also used for the modification of incoming/outgoing data so that it conforms to specifications.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="214" Name="Information Exposure Through Process Environment" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>A process is invoked with sensitive arguments, environment variables, or other elements that can be seen by other processes on the operating system.</Description>
         <Extended_Description>Many operating systems allow a user to list information about processes that are owned by other users. This information could include command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the software or related resources.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the example below, the password for a keystore file is read from a system property.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String keystorePass = System.getProperty("javax.net.ssl.keyStorePassword");<xhtml:br/>if (keystorePass == null) {<xhtml:div style="margin-left:10px;">System.err.println("ERROR: Keystore password not specified.");<xhtml:br/>System.exit(-1);</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>If the property is defined on the command line when the program is invoked (using the -D... syntax), the password may be displayed in the OS process list.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-1387</Reference>
               <Description>password passed on command line</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1387</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2291</Reference>
               <Description>password passed on command line</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2291</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1565</Reference>
               <Description>username/password on command line allows local users to view via "ps" or other process listing programs</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1565</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1948</Reference>
               <Description>Username/password on command line allows local users to view via "ps" or other process listing programs.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1948</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1270</Reference>
               <Description>PGP passphrase provided as command line argument.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1270</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1058</Reference>
               <Description>Kernel race condition allows reading of environment variables of a process that is still spawning.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1058</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Process information infoleak to other processes</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Research Gap">Under-studied, especially environment variables.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="219" Name="Sensitive Data Under Web Root" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The application stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="216" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="216" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="285" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>System Configuration</Phase>
               <Description>Avoid storing information under the web root directory.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-1835</Reference>
               <Description>Data file under web root.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1835</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2217</Reference>
               <Description>Data file under web root.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2217</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1449</Reference>
               <Description>Username/password in data file under web root.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1449</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0943</Reference>
               <Description>Database file under web root.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0943</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1645</Reference>
               <Description>database file under web root.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1645</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Sensitive Data Under Web Root</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="220" Name="Sensitive Data Under FTP Root" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The application stores sensitive data under the FTP document root with insufficient access control, which might make it accessible to untrusted parties.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="216" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Various Unix FTP servers require a password file that is under the FTP root, due to use of chroot.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Phase>System Configuration</Phase>
               <Description>Avoid storing information under the FTP root directory.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Sensitive Data Under FTP Root</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="223" Name="Omission of Security-relevant Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The application does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="221" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="221" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code logs suspicious multiple login attempts.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function login($userName,$password){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if(authenticate($userName,$password)){<xhtml:div style="margin-left:10px;">return True;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:10px;">incrementLoginAttempts($userName);<xhtml:br/>if(recentLoginAttempts($userName) &gt; 5){<xhtml:div style="margin-left:10px;">writeLog("Failed login attempt by User: " . $userName . " at " + date('r') );</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code only logs failed login attempts when a certain limit is reached. If an attacker knows this limit, they can stop their attack from being discovered by avoiding the limit.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-1029</Reference>
               <Description>Login attempts not recorded if user disconnects before maximum number of tries.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1029</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1839</Reference>
               <Description>Sender's IP address not recorded in outgoing e-mail.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1839</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0542</Reference>
               <Description>Failed authentication attempt not recorded if later attempt succeeds.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0542</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Omission of Security-relevant Information</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Accountability&#34;, Page 40"/>
         </References>
         
      </Weakness>
      <Weakness ID="224" Name="Obscured Security-relevant Information by Alternate Name" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="221" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="221" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Scope>Access Control</Scope>
               <Impact>Hide Activities</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code prints the contents of a file if a user has permission.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function readFile($filename){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>$user = getCurrentUser();<xhtml:br/>$realFile = $filename;<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>//resolve file if its a symbolic link</xhtml:i>
                           <xhtml:br/>if(is_link($filename)){<xhtml:div style="margin-left:10px;">$realFile = readlink($filename);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>if(fileowner($realFile) == $user){<xhtml:div style="margin-left:10px;">echo file_get_contents($realFile);<xhtml:br/>return;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:10px;">echo 'Access denied';<xhtml:br/>writeLog($user . ' attempted to access the file '. $filename . ' on '. date('r'));</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the code logs a bad access attempt, it logs the user supplied name for the file, not the canonicalized file name. An attacker can obscure their target by giving the script the name of a link to the file they are attempting to access. Also note this code contains a race condition between the is_link() and readlink() functions (CWE-363).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0725</Reference>
               <Description>Attacker performs malicious actions on a hard link to a file, obscuring the real target file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0725</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Obscured Security-relevant Information by Alternate Name</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-7"/>
         </References>
         
      </Weakness>
      <Weakness ID="243" Name="Creation of chroot Jail Without Changing Working Directory" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The program uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.</Description>
         <Extended_Description>Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Operating_System Class="Unix" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>The chroot() system call allows a process to change its perception of the root directory of the file system. After properly invoking chroot(), a process cannot access any files outside the directory tree defined by the new root directory. Such an environment is called a chroot jail and is commonly used to prevent the possibility that a processes could be subverted and used to access unauthorized files. For instance, many FTP servers run in chroot jails to prevent an attacker who discovers a new vulnerability in the server from being able to download the password file or other sensitive files on the system.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Consider the following source code from a (hypothetical) FTP server:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>chroot("/var/ftproot");<xhtml:br/>...<xhtml:br/>fgets(filename, sizeof(filename), network);<xhtml:br/>localfile = fopen(filename, "r");<xhtml:br/>while ((len = fread(buf, 1, sizeof(buf), localfile)) != EOF) {<xhtml:div style="margin-left:10px;">fwrite(buf, 1, sizeof(buf), network);</xhtml:div>}<xhtml:br/>fclose(localfile);</xhtml:div>
               </Example_Code>
               <Body_Text>This code is responsible for reading a filename from the network, opening the corresponding file on the local machine, and sending the contents over the network. This code could be used to implement the FTP GET command. The FTP server calls chroot() in its initialization routines in an attempt to prevent access to files outside of /var/ftproot. But because the server does not change the current working directory by calling chdir("/"), an attacker could request the file "../../../../../etc/passwd" and obtain a copy of the system password file.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Directory Restriction</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP17</Entry_ID>
               <Entry_Name>Failed chroot jail</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="250" Name="Execution with Unnecessary Privileges" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.</Description>
         <Extended_Description>
            <xhtml:p>New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges.</xhtml:p>
            <xhtml:p>Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="657" View_ID="699"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Installation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>
                  <xhtml:p>If an application has this design problem, then it can be easier for the developer to make implementation-related errors such as CWE-271 (Privilege Dropping / Lowering Errors). In addition, the consequences of Privilege Chaining (CWE-268) can become more severe.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>An attacker will be able to gain access to any resources that are allowed by the extra privileges. Common results include executing code, disabling services, and reading restricted data.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-11.7">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.</xhtml:p>
               </Description>
               <Effectiveness_Notes>Note that this technique is only useful for privilege issues related to system resources. It is not likely to detect application-level business rules that are related to privileges, such as if a blog system allows a user to delete a blog entry without first checking that the user has administrator privileges.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Compare binary / bytecode to application permission manifest</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                           <xhtml:li>Permission Manifest Analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-18">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-18">
               <Phase>Architecture and Design</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-19">
               <Phase>Implementation</Phase>
               <Description>When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-37">
               <Phase>Operation</Phase>
               <Phase>System Configuration</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Ensure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code temporarily raises the program's privileges to allow creation of a new user folder.</Intro_Text>
               <Example_Code Nature="bad" Language="Python">
                  <xhtml:div>def makeNewUserDir(username):<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if invalidUsername(username):<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>#avoid CWE-22 and CWE-78</xhtml:i>
                                 <xhtml:br/>print('Usernames cannot contain invalid characters')<xhtml:br/>return False</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>try:<xhtml:div style="margin-left:10px;">raisePrivileges()<xhtml:br/>os.mkdir('/home/' + username)<xhtml:br/>lowerPrivileges()</xhtml:div>
                           <xhtml:br/>except OSError:<xhtml:div style="margin-left:10px;">print('Unable to create new user directory for user:' + username)<xhtml:br/>return False</xhtml:div>
                           <xhtml:br/>return True</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While the program only raises its privilege level to create the folder and immediately lowers it again, if the call to os.mkdir() throws an exception, the call to lowerPrivileges() will not occur. As a result, the program is indefinitely operating in a raised privilege state, possibly allowing further exploitation to occur.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>chroot(APP_HOME);<xhtml:br/>chdir("/");<xhtml:br/>FILE* data = fopen(argv[1], "r+");<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This application intends to use a user's location to determine the timezone the user is in:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>locationClient = new LocationClient(this, this, this);<xhtml:br/>locationClient.connect();<xhtml:br/>Location userCurrLocation;<xhtml:br/>userCurrLocation = locationClient.getLastLocation();<xhtml:br/>setTimeZone(userCurrLocation);</xhtml:div>
               </Example_Code>
               <Body_Text>This is unnecessary use of the location API, as this information is already available using the Android Time API. Always be sure there is not another way to obtain needed information before resorting to using the location API.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-111">
               <Intro_Text>This code uses location to determine the user's current US State location.</Intro_Text>
               <Body_Text>First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:</Body_Text>
               <Example_Code Nature="bad" Language="XML">
                  <xhtml:div>&lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>locationClient = new LocationClient(this, this, this);<xhtml:br/>locationClient.connect();<xhtml:br/>Location userCurrLocation;<xhtml:br/>userCurrLocation = locationClient.getLastLocation();<xhtml:br/>deriveStateFromCoords(userCurrLocation);</xhtml:div>
               </Example_Code>
               <Body_Text>While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2007-4217</Reference>
               <Description>FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4217</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1877</Reference>
               <Description>Program runs with privileges and calls another program with the same privileges, which allows read of arbitrary files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1877</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5159</Reference>
               <Description>OS incorrectly installs a program with setuid privileges, allowing users to gain privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5159</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4638</Reference>
               <Description>Composite: application running with high privileges allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4638</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0162</Reference>
               <Description>Program does not drop privileges before calling another program, allowing code execution.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0162</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0368</Reference>
               <Description>setuid root program allows creation of arbitrary files through command line argument.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0368</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-3931</Reference>
               <Description>Installation script installs some programs as setuid when they shouldn't be.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3931</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Often Misused: Privilege Management</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER09-J</Entry_ID>
               <Entry_Name>Minimize privileges before deserializing from a privilege context</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="104"/>
            <Related_Attack_Pattern CAPEC_ID="470"/>
            <Related_Attack_Pattern CAPEC_ID="69"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-196"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 7, &#34;Running with Least Privilege&#34; Page 207"/>
            <Reference External_Reference_ID="REF-199"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 16: Executing Code With Too Much Privilege.&#34; Page 243"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Privilege Vulnerabilities&#34;, Page 477"/>
         </References>
         <Notes>
            <Note Type="Relationship">There is a close association with CWE-653 (Insufficient Separation of Privileges). CWE-653 is about providing separate components for each privilege; CWE-250 is about ensuring that each component has the least amount of privileges possible.</Note>
            <Note Type="Maintenance">CWE-271, CWE-272, and CWE-250 are all closely related and possibly overlapping. CWE-271 is probably better suited as a category. Both CWE-272 and CWE-250 are in active use by the community. The "least privilege" phrase has multiple interpretations.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="256" Name="Unprotected Storage of Credentials" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>Storing a password in plaintext may result in a system compromise.</Description>
         <Extended_Description>Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="319" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="319" View_ID="699"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this belief makes an attacker's job easier.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.</Description>
            </Mitigation>
            <Mitigation>
               <Description>A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.</Description>
               <Effectiveness>None</Effectiveness>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-57">
               <Intro_Text>The following code reads a password from a properties file and uses the password to connect to a database.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>Properties prop = new Properties();<xhtml:br/>prop.load(new FileInputStream("config.properties"));<xhtml:br/>String password = prop.getProperty("password");<xhtml:br/>DriverManager.getConnection(url, usr, password);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-58">
               <Intro_Text>The following code reads a password from the registry and uses the password to create a new network credential.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>String password = regKey.GetValue(passKey).toString();<xhtml:br/>NetworkCredential netCred = new NetworkCredential(username,password,domain);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a plaintext username / password pair.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:10px;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Password Management</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-207"/>
         </References>
         
      </Weakness>
      <Weakness ID="257" Name="Storing Passwords in a Recoverable Format" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="259" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>User's passwords may be revealed.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Revealed passwords may be reused elsewhere to impersonate the users in question.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use strong, non-reversible encryption to protect stored passwords.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-59">
               <Intro_Text>Both of these examples verify a password by comparing it to a stored compressed version.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:10px;">if (strcmp(compress(password), compressed_password)) {<xhtml:div style="margin-left:10px;">printf("Incorrect Password!\n");<xhtml:br/>return(0);</xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:10px;">if (passwd.Equals(compress(password), compressed_password)) {<xhtml:div style="margin-left:10px;">return(0);</xhtml:div>}<xhtml:br/>
                        <xhtml:i>//Diagnostic Mode</xhtml:i>
                        <xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a plaintext username / password pair.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:10px;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Storing passwords in a recoverable format</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="49"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Maintenance">The meaning of this node needs to be investigated more closely, especially with respect to what is meant by "recoverable."</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="258" Name="Empty Password in Configuration File" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Using an empty string as a password is insecure.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="260" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="260" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="521" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Description>Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use "similar-looking" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but the password is provided as an empty string.</Intro_Text>
               <Body_Text>This Java example shows a properties file with an empty password string.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database and the password is provided as an empty string.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:br/>&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;<xhtml:br/>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>An empty string should never be used as a password as this can allow unauthorized access to the application. Username and password information should not be included in a configuration file or a properties file in clear text. If possible, encrypt this information and avoid CWE-260 and CWE-13.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Password Management: Empty Password in Configuration File</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-207"/>
         </References>
         
      </Weakness>
      <Weakness ID="259" Name="Use of Hard-coded Password" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.</Description>
         <Extended_Description>
            <xhtml:p>A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:div>Inbound: the software contains an authentication mechanism that checks for a hard-coded password.</xhtml:div>
               <xhtml:div>Outbound: the software connects to another system or component, and it contains hard-coded password for connecting to that component.</xhtml:div>
            </xhtml:div>
            <xhtml:p>In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place.</xhtml:p>
            <xhtml:p>The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="798" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="798" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="321" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="257" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If hard-coded passwords are used, it is almost certain that malicious users will gain access through the account in question.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-11.6">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and perform a login. Using disassembled code, look at the associated instructions and see if any of them appear to be comparing the input to a fixed string or value.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a "first login" mode that requires the user to enter a unique strong password.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.</xhtml:p>
                  <xhtml:p>Use randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For front-end to back-end connections: Three solutions are possible, although none are complete.</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>The first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.</xhtml:div>
                     <xhtml:div>Next, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.</xhtml:div>
                     <xhtml:div>Finally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks.</xhtml:div>
                  </xhtml:div>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-13">
               <Intro_Text>The following code uses a hard-coded password to connect to a database:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>DriverManager.getConnection(url, "scott", "tiger");<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user "scott" with a password of "tiger" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>javap -c ConnMngr.class<xhtml:div style="margin-left:10px;">22: ldc #36; //String jdbc:mysql://ixne.com/rxsql<xhtml:br/>24: ldc #38; //String scott<xhtml:br/>26: ldc #17; //String tiger</xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-14">
               <Intro_Text>The following code is an example of an internal hard-coded password in the back-end:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (strcmp(password, "Mew!")) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>printf("Incorrect Password!\n");<xhtml:br/>return(0)</xhtml:div>
                           </xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:10px;">if (!password.equals("Mew!")) {<xhtml:div style="margin-left:10px;">return(0)</xhtml:div>}<xhtml:br/>//Diagnostic Mode<xhtml:br/>return(1);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this "functionality."</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a plaintext username / password pair.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:10px;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Password Management: Hard-Coded Password</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Use of hard-coded password</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC03-J</Entry_ID>
               <Entry_Name>Never hard code sensitive information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP33</Entry_ID>
               <Entry_Name>Hardcoded sensitive data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry should probably be split into multiple variants: an inbound variant (as seen in the second demonstrative example) and an outbound variant (as seen in the first demonstrative example). These variants are likely to have different consequences, detectability, etc. See extended description.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="260" Name="Password in Configuration File" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software stores a password in a configuration file that might be accessible to actors who do not know the password.</Description>
         <Extended_Description>This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="522" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Avoid storing passwords in easily accessible locations.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Below is a snippet from a Java properties file.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>webapp.ldap.username = secretUsername<xhtml:br/>webapp.ldap.password = secretPassword</xhtml:div>
               </Example_Code>
               <Body_Text>Because the LDAP credentials are stored in plaintext, anyone with access to the file can gain access to the resource.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a plaintext username / password pair.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:10px;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-13.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Password Management: Password in Configuration File</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-207"/>
         </References>
         
      </Weakness>
      <Weakness ID="261" Name="Weak Cryptography for Passwords" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Obscuring a password with a trivial encoding does not protect the password.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="326" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="326" View_ID="699"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code reads a password from a properties file and uses the password to connect to a database.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>Properties prop = new Properties();<xhtml:br/>prop.load(new FileInputStream("config.properties"));<xhtml:br/>String password = Base64.decode(prop.getProperty("password"));<xhtml:br/>DriverManager.getConnection(url, usr, password);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone with access to config.properties can read the value of password and easily determine that the value has been base 64 encoded. If a devious employee has access to this information, they can use it to break into the system.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code reads a password from the registry and uses the password to create a new network credential.</Intro_Text>
               <Example_Code Nature="bad" Language="C#">
                  <xhtml:div>...<xhtml:br/>string value = regKey.GetValue(passKey).ToString();<xhtml:br/>byte[] decVal = Convert.FromBase64String(value);<xhtml:br/>NetworkCredential netCred = newNetworkCredential(username,decVal.toString(),domain);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Password Management: Weak Cryptography</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="55"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-207"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
         </References>
         <Notes>
            <Note Type="Other">
               <xhtml:p>Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.</xhtml:p>
               <xhtml:p>The "crypt" family of functions uses weak cryptographic algorithms and should be avoided. It may be present in some projects for compatibility.</xhtml:p>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="262" Name="Not Using Password Aging" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="309" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="263" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="324" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>As passwords age, the probability that they are compromised grows.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>The recommendation that users change their passwords regularly and do not reuse passwords is universal among security experts. In order to enforce this, it is useful to have a password aging mechanism that notifies users when passwords are considered old and that requests that they replace them with new, strong passwords. In order for this functionality to be useful, however, it must be accompanied with documentation which stresses how important this practice is and which makes the entire process as simple as possible for the user.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>A common example is not having a system to terminate old employee accounts.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Not having a system for enforcing the changing of passwords every certain period.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Not allowing password aging</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="16"/>
            <Related_Attack_Pattern CAPEC_ID="49"/>
            <Related_Attack_Pattern CAPEC_ID="55"/>
            <Related_Attack_Pattern CAPEC_ID="70"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
         </References>
         
      </Weakness>
      <Weakness ID="263" Name="Password Aging with Long Expiration" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>Allowing password aging to occur unchecked can result in the possibility of diminished password integrity.</Description>
         <Extended_Description>Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>As passwords age, the probability that they are compromised grows.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that password aging is limited so that there is a defined maximum age for passwords and so that the user is notified several times leading up to the password expiration.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>A common example is not having a system to terminate old employee accounts.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Not having a system for enforcing the changing of passwords every certain period.</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Allowing password aging</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="16"/>
            <Related_Attack_Pattern CAPEC_ID="49"/>
            <Related_Attack_Pattern CAPEC_ID="55"/>
            <Related_Attack_Pattern CAPEC_ID="70"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 19: Use of Weak Password-Based Systems.&#34; Page 279"/>
         </References>
         
      </Weakness>
      <Weakness ID="266" Name="Incorrect Privilege Assignment" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="286" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-97">
               <Intro_Text>Evidence of privilege change:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>seteuid(0);<xhtml:br/>
                     <xhtml:i>/* do some stuff */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>seteuid(getuid());</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>AccessController.doPrivileged(new PrivilegedAction() {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>public Object run() {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>// privileged code goes here, for example:</xhtml:i>
                                 <xhtml:br/>System.loadLibrary("awt");<xhtml:br/>return null;<xhtml:br/>
                                 <xhtml:i>// nothing to return</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-108">
               <Intro_Text>This application sends a special intent with a flag that allows the receiving application to read a data file for backup purposes.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Intent intent = new Intent();<xhtml:br/>intent.setAction("com.example.BackupUserData");<xhtml:br/>intent.setData(file_uri);<xhtml:br/>intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);<xhtml:br/>sendBroadcast(intent);</xhtml:div>
               </Example_Code>
               <Example_Code Nature="attack" Language="Java">
                  <xhtml:div>public class CallReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:10px;">@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:10px;">Uri userData = intent.getData();<xhtml:br/>stealUserData(userData);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Any malicious application can register to receive this intent. Because of the FLAG_GRANT_READ_URI_PERMISSION included with the intent, the malicious receiver code can read the user's data.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-1193</Reference>
               <Description>untrusted user placed in unix "wheel" group</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1193</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2741</Reference>
               <Description>Product allows users to grant themselves certain rights that can be used to escalate privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2741</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2496</Reference>
               <Description>Product uses group ID of a user instead of the group, causing it to run with different privileges. This is resultant from some other unknown issue.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2496</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0274</Reference>
               <Description>Product mistakenly assigns a particular status to an entity, leading to increased privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0274</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Incorrect Privilege Assignment</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC00-J</Entry_ID>
               <Entry_Name>Do not allow privileged blocks to leak sensitive information across a trust boundary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC01-J</Entry_ID>
               <Entry_Name>Do not allow tainted variables in privileged blocks</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-76"/>
         </References>
         
      </Weakness>
      <Weakness ID="267" Name="Privilege Defined With Unsafe Actions" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code intends to allow only Administrators to print debug information about a system.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public enum Roles {<xhtml:div style="margin-left:10px;">ADMIN,USER,GUEST</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void printDebugInfo(User requestingUser){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if(isAuthenticated(requestingUser)){<xhtml:div style="margin-left:10px;">
                              <xhtml:div>switch(requestingUser.role){<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>case GUEST:<xhtml:div style="margin-left:10px;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>default:<xhtml:div style="margin-left:10px;">System.out.println(currentDebugState());<xhtml:br/>break;</xhtml:div>
                                    </xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:10px;">System.out.println("You must be logged in to perform this command");</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While the intention was to only allow Administrators to print the debug information, the code as written only excludes those the with the role of "GUEST". Someone with the role of "ADMIN" or "USER" will be allowed access, which goes against the original intent. An attacker may be able to use this debug information to craft an attack on the system.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1981</Reference>
               <Description>Roles have access to dangerous procedures (Accessible entities).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1981</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1671</Reference>
               <Description>Untrusted object/method gets access to clipboard (Accessible entities).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1671</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2204</Reference>
               <Description>Gain privileges using functions/tags that should be restricted (Accessible entities).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2204</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0315</Reference>
               <Description>Traceroute program allows unprivileged users to modify source address of packet (Accessible entities).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0315</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0380</Reference>
               <Description>Bypass domain restrictions using a particular file that references unsafe URI schemes (Accessible entities).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0380</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1154</Reference>
               <Description>Script does not restrict access to an update command, leading to resultant disk consumption and filled error logs (Accessible entities).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1154</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1145</Reference>
               <Description>"public" database user can use stored procedure to modify data controlled by the database owner (Unsafe privileged actions).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1145</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0506</Reference>
               <Description>User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0506</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-2042</Reference>
               <Description>Allows attachment to and modification of privileged processes (Unsafe privileged actions).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2042</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-1212</Reference>
               <Description>User with privilege can edit raw underlying object using unprotected method (Unsafe privileged actions).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1212</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1742</Reference>
               <Description>Inappropriate actions allowed by a particular role(Unsafe privileged actions).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1742</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1480</Reference>
               <Description>Untrusted entity allowed to access the system clipboard (Unsafe privileged actions).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1480</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1551</Reference>
               <Description>Extra Linux capability allows bypass of system-specified restriction (Unsafe privileged actions).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1551</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1166</Reference>
               <Description>User with debugging rights can read entire process (Unsafe privileged actions).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1166</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1816</Reference>
               <Description>Non-root admins can add themselves or others to the root admin group (Unsafe privileged actions).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1816</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2173</Reference>
               <Description>Users can change certain properties of objects to perform otherwise unauthorized actions (Unsafe privileged actions).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2173</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2027</Reference>
               <Description>Certain debugging commands not restricted to just the administrator, allowing registry modification and infoleak (Unsafe privileged actions).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2027</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unsafe Privilege</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="58"/>
            <Related_Attack_Pattern CAPEC_ID="634"/>
            <Related_Attack_Pattern CAPEC_ID="637"/>
            <Related_Attack_Pattern CAPEC_ID="643"/>
            <Related_Attack_Pattern CAPEC_ID="648"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-76"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This overlaps authorization and access control problems.</Note>
            <Note Type="Maintenance">
               <xhtml:p>Note: there are 2 separate sub-categories here:</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:div>- privilege incorrectly allows entities to perform certain actions</xhtml:div>
                  <xhtml:div>- object is incorrectly accessible to entities with a given privilege</xhtml:div>
               </xhtml:div>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="268" Name="Privilege Chaining" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>A user can be given or gain access rights of another user. This can give the user unauthorized access to sensitive information including the access information of another user.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-49">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code allows someone with the role of "ADMIN" or "OPERATOR" to reset a user's password. The role of "OPERATOR" is intended to have less privileges than an "ADMIN", but still be able to help users with small issues such as forgotten passwords.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public enum Roles {<xhtml:div style="margin-left:10px;">ADMIN,OPERATOR,USER,GUEST</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public void resetPassword(User requestingUser, User user, String password ){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if(isAuthenticated(requestingUser)){<xhtml:div style="margin-left:10px;">
                              <xhtml:div>switch(requestingUser.role){<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>case GUEST:<xhtml:div style="margin-left:10px;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>case USER:<xhtml:div style="margin-left:10px;">System.out.println("You are not authorized to perform this command");<xhtml:br/>break;</xhtml:div>
                                       <xhtml:br/>default:<xhtml:div style="margin-left:10px;">setPassword(user,password);<xhtml:br/>break;</xhtml:div>}</xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>
                           <xhtml:br/>else{<xhtml:div style="margin-left:10px;">System.out.println("You must be logged in to perform this command");</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not check the role of the user whose password is being reset. It is possible for an Operator to gain Admin privileges by resetting the password of an Admin account and taking control of that account.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-1736</Reference>
               <Description>Chaining of user rights.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1736</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1772</Reference>
               <Description>Gain certain rights via privilege chaining in alternate channel.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1772</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1973</Reference>
               <Description>Application is allowed to assign extra permissions to itself.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1973</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0640</Reference>
               <Description>"operator" user can overwrite usernames and passwords to gain admin privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0640</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Privilege Chaining</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-76"/>
         </References>
         <Notes>
            <Note Type="Relationship">There is some conceptual overlap with Unsafe Privilege.</Note>
            <Note Type="Research Gap">It is difficult to find good examples for this weakness.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="269" Name="Improper Privilege Management" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-48">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Follow the principle of least privilege when assigning access rights to entities in a software system.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-49">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1555</Reference>
               <Description>Terminal privileges are not reset when a user logs out.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1555</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1514</Reference>
               <Description>Does not properly pass security context to child processes in certain cases, allows privilege escalation.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1514</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0128</Reference>
               <Description>Does not properly compute roles.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0128</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Privilege Management Error</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="122"/>
            <Related_Attack_Pattern CAPEC_ID="233"/>
            <Related_Attack_Pattern CAPEC_ID="58"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 16: Executing Code With Too Much Privilege.&#34; Page 243"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Dropping Privileges Permanently&#34;, Page 479"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-396).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="270" Name="Privilege Context Switching Error" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>A user can assume the identity of another user with separate privileges in another context. This will give the user unauthorized access that may allow them to acquire the access information of other users.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-49">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1688</Reference>
               <Description>Web browser cross domain problem when user hits "back" button.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1688</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1026</Reference>
               <Description>Web browser cross domain problem when user hits "back" button.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1026</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1770</Reference>
               <Description>Cross-domain issue - third party product passes code to web browser, which executes it in unsafe zone.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1770</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2263</Reference>
               <Description>Run callback in different security context after it has been changed from untrusted to trusted. * note that "context switch before actions are completed" is one type of problem that happens frequently, espec. in browsers.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2263</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Privilege Context Switching Error</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="17"/>
            <Related_Attack_Pattern CAPEC_ID="236"/>
            <Related_Attack_Pattern CAPEC_ID="30"/>
            <Related_Attack_Pattern CAPEC_ID="35"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 7, &#34;Running with Least Privilege&#34; Page 207"/>
            <Reference External_Reference_ID="REF-76"/>
         </References>
         <Notes>
            <Note Type="Research Gap">This concept needs more study.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="271" Name="Privilege Dropping / Lowering Errors" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software does not drop privileges before passing control of a resource to an actor that does not have those privileges.</Description>
         <Extended_Description>In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Hide Activities</Impact>
               <Note>If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-49">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-98">
               <Intro_Text>The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>chroot(APP_HOME);<xhtml:br/>chdir("/");<xhtml:br/>FILE* data = fopen(argv[1], "r+");<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2000-1213</Reference>
               <Description>Program does not drop privileges after acquiring the raw socket.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0559</Reference>
               <Description>Setuid program does not drop privileges after a parsing error occurs, then calls another program to handle the error.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0559</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0787</Reference>
               <Description>Does not drop privileges in related groups when lowering privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0787</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0080</Reference>
               <Description>Does not drop privileges in related groups when lowering privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0080</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1029</Reference>
               <Description>Does not drop privileges before determining access to certain files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1029</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0813</Reference>
               <Description>Finger daemon does not drop privileges when executing programs on behalf of the user being fingered.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0813</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1326</Reference>
               <Description>FTP server does not drop privileges if a connection is aborted during file transfer.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1326</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0172</Reference>
               <Description>Program only uses seteuid to drop privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0172</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2504</Reference>
               <Description>Windows program running as SYSTEM does not drop privileges before executing other programs (many others like this, especially involving the Help facility).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2504</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0213</Reference>
               <Description>Utility Manager launches winhlp32.exe while running with raised privileges, which allows local users to gain system privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0806</Reference>
               <Description>Setuid program does not drop privileges before executing program specified in an environment variable.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0806</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0828</Reference>
               <Description>Setuid program does not drop privileges before processing file specified on command line.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2070</Reference>
               <Description>Service on Windows does not drop privileges before using "view file" option, allowing code execution.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2070</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Privilege Dropping / Lowering Errors</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 16: Executing Code With Too Much Privilege.&#34; Page 243"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 9, &#34;Dropping Privileges Permanently&#34;, Page 479"/>
         </References>
         <Notes>
            <Note Type="Maintenance">CWE-271, CWE-272, and CWE-250 are all closely related and possibly overlapping. CWE-271 is probably better suited as a category.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="272" Name="Least Privilege Violation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="271" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="271" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker may be able to access resources with the elevated privilege that could not be accessed with the attacker's original privileges. This is particularly likely in conjunction with another flaw, such as a buffer overflow.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Compare binary / bytecode to application permission manifest</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Permission Manifest Analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-48">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Follow the principle of least privilege when assigning access rights to entities in a software system.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-97">
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>setuid(0);<xhtml:br/>
                     <xhtml:i>// Do some important stuff</xhtml:i>
                     <xhtml:br/>setuid(old_uid);<xhtml:br/>
                     <xhtml:i>// Do some non privileged stuff.</xhtml:i>
                     <xhtml:br/>
                  </xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>method() {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>AccessController.doPrivileged(new PrivilegedAction()) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>public Object run() {<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// Insert all code here</xhtml:i>
                                       <xhtml:br/>
                                    </xhtml:div>
                                 </xhtml:div>}</xhtml:div>
                           </xhtml:div>};</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-98">
               <Intro_Text>The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>chroot(APP_HOME);<xhtml:br/>chdir("/");<xhtml:br/>FILE* data = fopen(argv[1], "r+");<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Least Privilege Violation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to drop privileges when reasonable</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>POS02-C</Entry_ID>
               <Entry_Name>Follow the principle of least privilege</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC00-J</Entry_ID>
               <Entry_Name>Do not allow privileged blocks to leak sensitive information across a trust boundary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC01-J</Entry_ID>
               <Entry_Name>Do not allow tainted variables in privileged blocks</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP36</Entry_ID>
               <Entry_Name>Privilege</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="17"/>
            <Related_Attack_Pattern CAPEC_ID="35"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Maintenance">CWE-271, CWE-272, and CWE-250 are all closely related and possibly overlapping. CWE-271 is probably better suited as a category.</Note>
            <Note Type="Other">
               <xhtml:p>If system privileges are not dropped when it is reasonable to do so, this is not a vulnerability by itself. According to the principle of least privilege, access should be allowed only when it is absolutely necessary to the function of a given system, and only for the minimal necessary amount of time. Any further allowance of privilege widens the window of time during which a successful exploitation of the system will provide an attacker with that same privilege. If at all possible, limit the allowance of system privilege to small, simple sections of code that may be called atomically.</xhtml:p>
               <xhtml:p>When a program calls a privileged function, such as chroot(), it must first acquire root privilege. As soon as the privileged operation has completed, the program should drop root privilege and return to the privilege level of the invoking user.</xhtml:p>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="273" Name="Improper Check for Dropped Privileges" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.</Description>
         <Extended_Description>If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="754" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="754" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="271" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="271" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="252" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>In Windows based environments that have access control, impersonation is used so that access checks can be performed on a client identity by a server with higher privileges. By impersonating the client, the server is restricted to client-level security -- although in different threads it may have much higher privileges.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
               <Note>
                  <xhtml:p>This issue is likely to occur in restrictive environments in which the operating system or application provides fine-grained control over privilege management.</xhtml:p>
               </Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Hide Activities</Impact>
               <Note>If privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-53">
               <Phase>Implementation</Phase>
               <Description>Check the results of all functions that return a value and verify that the value is expected.</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>In Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code attempts to take on the privileges of a user before creating a file, thus avoiding performing the action with unnecessarily high privileges:</Intro_Text>
               <Example_Code Nature="bad" Language="C++">
                  <xhtml:div>bool DoSecureStuff(HANDLE hPipe) {<xhtml:div style="margin-left:10px;">bool fDataWritten = false;<xhtml:br/>ImpersonateNamedPipeClient(hPipe);<xhtml:br/>HANDLE hFile = CreateFile(...);<xhtml:br/>/../<xhtml:br/>RevertToSelf()<xhtml:br/>/../</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The call to ImpersonateNamedPipeClient may fail, but the return value is not checked. If the call fails, the code may execute with higher privileges than intended. In this case, an attacker could exploit this behavior to write a file to a location that the attacker does not have access to.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-4447</Reference>
               <Description>Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4447</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2916</Reference>
               <Description>Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2916</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to check whether privileges were dropped successfully</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>POS37-C</Entry_ID>
               <Entry_Name>Ensure that privilege relinquishment is successful</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP4</Entry_ID>
               <Entry_Name>Unchecked Status Condition</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="274" Name="Improper Handling of Insufficient Privileges" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="271" View_ID="1000"/>
            <Related_Weakness Nature="CanAlsoBe" CWE_ID="280" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1564</Reference>
               <Description>System limits are not properly enforced after privileges are dropped.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1564</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3286</Reference>
               <Description>Firewall crashes when it can't read a critical memory block that was protected by a malicious process.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3286</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1641</Reference>
               <Description>Does not give admin sufficient privileges to overcome otherwise legitimate user actions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1641</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Insufficient privileges</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">Overlaps dropped privileges, insufficient permissions.</Note>
            <Note Type="Relationship">This has a layering relationship with Unchecked Error Condition and Unchecked Return Value.</Note>
            <Note Type="Maintenance">CWE-280 and CWE-274 are too similar. It is likely that CWE-274 will be deprecated in the future.</Note>
            <Note Type="Theoretical">Within the context of vulnerability theory, privileges and permissions are two sides of the same coin. Privileges are associated with actors, and permissions are associated with resources. To perform access control, at some point the software makes a decision about whether the actor (and the privileges that have been assigned to that actor) is allowed to access the resource (based on the permissions that have been specified for that resource).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="276" Name="Incorrect Default Permissions" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Installation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inter-application Flow Analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria</xhtml:li>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Automated Monitored Execution</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-1941</Reference>
               <Description>Executables installed world-writable.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1941</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1713</Reference>
               <Description>Home directories installed world-readable.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1713</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1550</Reference>
               <Description>World-writable log files allow information loss; world-readable file has cleartext passwords.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1550</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1711</Reference>
               <Description>World-readable directory.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1711</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1844</Reference>
               <Description>Windows product uses insecure permissions when installing on Solaris (genesis: port error).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1844</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0497</Reference>
               <Description>Insecure permissions for a shared secret key file. Overlaps cryptographic problem.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0497</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0426</Reference>
               <Description>Default permissions of a device allow IP spoofing.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0426</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Insecure Default Permissions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO06-C</Entry_ID>
               <Entry_Name>Create files with appropriate access permissions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>FIO01-J</Entry_ID>
               <Entry_Name>Create files with appropriate access permission</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="81"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Insecure Defaults&#34;, Page 69"/>
         </References>
         
      </Weakness>
      <Weakness ID="277" Name="Insecure Inherited Permissions" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A product defines a set of insecure permissions that are inherited by objects that are created by the program.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-1841</Reference>
               <Description>User's umask is used when creating temp files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1841</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1786</Reference>
               <Description>Insecure umask for core dumps [is the umask preserved or assigned?].</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1786</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Insecure inherited permissions</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="279" Name="Incorrect Execution-Assigned Permissions" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>While it is executing, the software sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0265</Reference>
               <Description>Log files opened read/write.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0265</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0876</Reference>
               <Description>Log files opened read/write.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0876</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1694</Reference>
               <Description>Log files opened read/write.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1694</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Insecure execution-assigned permissions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO06-C</Entry_ID>
               <Entry_Name>Create files with appropriate access permissions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>FIO01-J</Entry_ID>
               <Entry_Name>Create files with appropriate access permission</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="81"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="280" Name="Improper Handling of Insufficient Permissions or Privileges " Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The application does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the application in an invalid state.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2003-0501</Reference>
               <Description>Special file system allows attackers to prevent ownership/permission change of certain entries by opening the entries before calling a setuid program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0501</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0148</Reference>
               <Description>FTP server places a user in the root directory when the user's permissions prevent access to the their own home directory.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0148</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Fails poorly due to insufficient permissions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>17</Entry_ID>
               <Entry_Name>Improper Filesystem Permissions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP4</Entry_ID>
               <Entry_Name>Unchecked Status Condition</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">This can be both primary and resultant. When primary, it can expose a variety of weaknesses because a resource might not have the expected state, and subsequent operations might fail. It is often resultant from Unchecked Error Condition (CWE-391).</Note>
            <Note Type="Maintenance">CWE-280 and CWE-274 are too similar.</Note>
            <Note Type="Theoretical">Within the context of vulnerability theory, privileges and permissions are two sides of the same coin. Privileges are associated with actors, and permissions are associated with resources. To perform access control, at some point the software makes a decision about whether the actor (and the privileges that have been assigned to that actor) is allowed to access the resource (based on the permissions that have been specified for that resource).</Note>
            <Note Type="Research Gap">This type of issue is under-studied, since researchers often concentrate on whether an object has too many permissions, instead of not enough. These weaknesses are likely to appear in environments with fine-grained models for permissions and privileges, which can include operating systems and other large-scale software packages. However, even highly simplistic permission/privilege models are likely to contain these issues if the developer has not considered the possibility of access failure.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="281" Name="Improper Preservation of Permissions" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1003" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>This is resultant from errors that prevent the permissions from being preserved.</Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-2323</Reference>
               <Description>Incorrect ACLs used when restoring backups from directories that use symbolic links.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2323</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1515</Reference>
               <Description>Automatic modification of permissions inherited from another file system.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1515</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1920</Reference>
               <Description>Permissions on backup file are created with defaults, possibly less secure than original file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1920</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0195</Reference>
               <Description>File is made world-readable when being cloned.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0195</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Permission preservation failure</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="282" Name="Improper Ownership Management" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-1125</Reference>
               <Description>Program runs setuid root but relies on a configuration file owned by a non-root user.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1125</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Ownership errors</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="17"/>
            <Related_Attack_Pattern CAPEC_ID="35"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Maintenance">The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-396).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="283" Name="Unverified Ownership" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not properly verify that a critical resource is owned by the proper entity.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="282" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="282" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could gain unauthorized access to system resources.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-49">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This function is part of a privileged program that takes input from users with potentially lower privileges.</Intro_Text>
               <Example_Code Nature="bad" Language="Python">
                  <xhtml:div>def killProcess(processID):<xhtml:div style="margin-left:10px;">os.kill(processID, signal.SIGKILL)</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>This code does not confirm that the process to be killed is owned by the requesting user, thus allowing an attacker to kill arbitrary processes.</Body_Text>
               <Body_Text>This function remedies the problem by checking the owner of the process before killing it:</Body_Text>
               <Example_Code Nature="good" Language="Python">
                  <xhtml:div>def killProcess(processID):<xhtml:div style="margin-left:10px;">
                        <xhtml:div>user = getCurrentUser()<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>#Check process owner against requesting user</xhtml:i>
                           <xhtml:br/>if getProcessOwner(processID) == user:<xhtml:div style="margin-left:10px;">os.kill(processID, signal.SIGKILL)<xhtml:br/>return</xhtml:div>
                           <xhtml:br/>else:<xhtml:div style="margin-left:10px;">print("You cannot kill a process you don't own")<xhtml:br/>return</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-0178</Reference>
               <Description>Program does not verify the owner of a UNIX socket that is used for sending a password.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0178</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2012</Reference>
               <Description>Owner of special device not checked, allowing root.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2012</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unverified Ownership</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">This overlaps insufficient comparison, verification errors, permissions, and privileges.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="284" Name="Improper Access Control" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.</Description>
         <Extended_Description>
            <xhtml:p>Access control involves the use of several protection mechanisms such as:</xhtml:p>
            <xhtml:ul>
               <xhtml:li>Authentication (proving the identity of an actor)</xhtml:li>
               <xhtml:li>Authorization (ensuring that a given actor can access a resource), and</xhtml:li>
               <xhtml:li>Accountability (tracking of activities that were performed)</xhtml:li>
            </xhtml:ul>
            <xhtml:p>When any mechanism is not applied or otherwise fails, attackers can compromise the security of the software by gaining privileges, reading sensitive information, executing commands, evading detection, etc.</xhtml:p>
            <xhtml:p>There are two distinct behaviors that can introduce access control weaknesses:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.</xhtml:li>
                  <xhtml:li>Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000"/>
         </Related_Weaknesses>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Authorization</Term>
               <Description>The terms "access control" and "authorization" are often used interchangeably, although many people have distinct definitions. The CWE usage of "access control" is intended as a general term for the various mechanisms that restrict which users can access which resources, and "authorization" is more narrowly defined. It is unlikely that there will be community consensus on the use of these terms.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-1">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2010-4624</Reference>
               <Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description>
               <Link>https://nvd.nist.gov/vuln/detail/CVE-2010-4624</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Access Control List (ACL) errors</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>2</Entry_ID>
               <Entry_Name>Insufficient Authorization</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="19"/>
            <Related_Attack_Pattern CAPEC_ID="441"/>
            <Related_Attack_Pattern CAPEC_ID="478"/>
            <Related_Attack_Pattern CAPEC_ID="479"/>
            <Related_Attack_Pattern CAPEC_ID="502"/>
            <Related_Attack_Pattern CAPEC_ID="503"/>
            <Related_Attack_Pattern CAPEC_ID="536"/>
            <Related_Attack_Pattern CAPEC_ID="546"/>
            <Related_Attack_Pattern CAPEC_ID="550"/>
            <Related_Attack_Pattern CAPEC_ID="551"/>
            <Related_Attack_Pattern CAPEC_ID="552"/>
            <Related_Attack_Pattern CAPEC_ID="556"/>
            <Related_Attack_Pattern CAPEC_ID="558"/>
            <Related_Attack_Pattern CAPEC_ID="562"/>
            <Related_Attack_Pattern CAPEC_ID="563"/>
            <Related_Attack_Pattern CAPEC_ID="564"/>
            <Related_Attack_Pattern CAPEC_ID="578"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 6, &#34;Determining Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 17: Failure to Protect Stored Data.&#34; Page 253"/>
         </References>
         <Notes>
            <Note Type="Maintenance">
               <xhtml:p>This item needs more work. Possible sub-categories include:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>* Trusted group includes undesired entities (partially covered by CWE-286)</xhtml:li>
                  <xhtml:li>* Group can perform undesired actions</xhtml:li>
                  <xhtml:li>* ACL parse error does not fail closed</xhtml:li>
               </xhtml:ul>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="285" Name="Improper Authorization" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.</Description>
         <Extended_Description>
            <xhtml:p>Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.</xhtml:p>
            <xhtml:p>When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Often"/>
            <Technology Name="Database Server" Prevalence="Often"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: "No access", "Read access", "Change access", and "Full control". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>AuthZ</Term>
               <Description>"AuthZ" is typically used as an abbreviation of "authorization" within the web application security community. It is also distinct from "AuthC," which is an abbreviation of "authentication." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>
                  <xhtml:p>Authorization weaknesses may arise when a single-user application is ported to a multi-user environment.</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Read Files or Directories</Impact>
               <Note>An attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>An attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could gain privileges by modifying or reading critical data directly, or by accessing insufficiently-protected, privileged functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Dynamic Analysis</Method>
               <Description>Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) to enforce the roles at the appropriate boundaries.</xhtml:p>
                  <xhtml:p>Note that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>For web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.</xhtml:p>
                  <xhtml:p>One way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>System Configuration</Phase>
               <Phase>Installation</Phase>
               <Description>Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a "default deny" policy when defining these ACLs.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-95">
               <Intro_Text>This function runs an arbitrary SQL query on a given database, returning the result of the query.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function runEmployeeQuery($dbName, $name){<xhtml:div style="margin-left:10px;">mysql_select_db($dbName,$globalDbHandle) or die("Could not open Database".$dbName);<xhtml:br/>
                        <xhtml:i>//Use a prepared statement to avoid CWE-89</xhtml:i>
                        <xhtml:br/>$preparedStatement = $globalDbHandle-&gt;prepare('SELECT * FROM employees WHERE name = :name');<xhtml:br/>$preparedStatement-&gt;execute(array(':name' =&gt; $name));<xhtml:br/>return $preparedStatement-&gt;fetchAll();</xhtml:div>}<xhtml:br/>
                     <xhtml:i>/.../</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);</xhtml:div>
               </Example_Code>
               <Body_Text>While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-96">
               <Intro_Text>The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>sub DisplayPrivateMessage {<xhtml:div style="margin-left:10px;">my($id) = @_;<xhtml:br/>my $Message = LookupMessageObject($id);<xhtml:br/>print "From: " . encodeHTML($Message-&gt;{from}) . "&lt;br&gt;\n";<xhtml:br/>print "Subject: " . encodeHTML($Message-&gt;{subject}) . "\n";<xhtml:br/>print "&lt;hr&gt;\n";<xhtml:br/>print "Body: " . encodeHTML($Message-&gt;{body}) . "\n";</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $q = new CGI;<xhtml:br/>
                     <xhtml:i># For purposes of this example, assume that CWE-309 and</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i># CWE-523 do not apply.</xhtml:i>
                     <xhtml:br/>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:10px;">ExitError("invalid username or password");</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>my $id = $q-&gt;param('id');<xhtml:br/>DisplayPrivateMessage($id);</xhtml:div>
               </Example_Code>
               <Body_Text>While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users.</Body_Text>
               <Body_Text>One way to avoid this problem would be to ensure that the "to" field in the message object matches the username of the authenticated user.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-3168</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2960</Reference>
               <Description>Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2960</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3597</Reference>
               <Description>Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3597</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2282</Reference>
               <Description>Terminal server does not check authorization for guest access.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2282</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3230</Reference>
               <Description>Database server does not use appropriate privileges for certain sensitive operations.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3230</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>Gateway uses default "Allow" configuration for its authorization settings.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0034</Reference>
               <Description>Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0034</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6123</Reference>
               <Description>Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6123</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5027</Reference>
               <Description>System monitoring software allows users to bypass authorization by creating custom forms.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5027</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-7109</Reference>
               <Description>Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-7109</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3424</Reference>
               <Description>Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3424</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3781</Reference>
               <Description>Content management system does not check access permissions for private files, allowing others to view those files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3781</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4577</Reference>
               <Description>ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4577</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6548</Reference>
               <Description>Product does not check the ACL of a page accessed using an "include" directive, allowing attackers to read unauthorized files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6548</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2925</Reference>
               <Description>Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2925</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6679</Reference>
               <Description>Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6679</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3623</Reference>
               <Description>OS kernel does not check for a certain privilege before setting ACLs for files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3623</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2801</Reference>
               <Description>Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2801</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1155</Reference>
               <Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1155</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Missing Access Control</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Failure to Restrict URL Access</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP35</Entry_ID>
               <Entry_Name>Insecure resource access</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
            <Related_Attack_Pattern CAPEC_ID="104"/>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="17"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="402"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="5"/>
            <Related_Attack_Pattern CAPEC_ID="51"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="647"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
            <Related_Attack_Pattern CAPEC_ID="87"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-229"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authorization&#34; Page 114; Chapter 6, &#34;Determining&#xA;                  Appropriate Access Control&#34; Page 171"/>
            <Reference External_Reference_ID="REF-231"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-233"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authorization&#34;, Page 39"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 11, &#34;ACL Inheritance&#34;, Page 649"/>
         </References>
         
      </Weakness>
      <Weakness ID="286" Name="Incorrect User Management" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software does not properly manage a user within its environment.</Description>
         <Extended_Description>Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>User management errors</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Maintenance">The relationships between privileges, permissions, and actors (e.g. users and groups) need further refinement within the Research view. One complication is that these concepts apply to two different pillars, related to control of resources (CWE-664) and protection mechanism failures (CWE-693).</Note>
            <Note Type="Maintenance">This item needs more work. Possible sub-categories include: user in wrong group, and user with insecure profile or "configuration". It also might be better expressed as a category than a weakness.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="287" Name="Improper Authentication" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>authentification</Term>
               <Description>An alternate term is "authentification", which appears to be most commonly used by people from non-English-speaking countries.</Description>
            </Alternate_Term>
            <Alternate_Term>
               <Term>AuthC</Term>
               <Description>"AuthC" is typically used as an abbreviation of "authentication" within the web application security community. It is also distinct from "AuthZ," which is an abbreviation of "authorization." The use of "Auth" as an abbreviation is discouraged, since it could be used for either authentication or authorization.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-6">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting certain types of authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Static Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use an authentication framework or library such as the OWASP ESAPI Authentication feature.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code intends to ensure that the user is already logged in. If not, the code performs authentication with the user-provided username and password. If successful, it sets the loggedin and user cookies to "remember" that the user has already logged in. Finally, the code performs administrator tasks if the logged-in user has the "Administrator" username, as recorded in the user cookie.</Intro_Text>
               <Example_Code Nature="bad" Language="Perl">
                  <xhtml:div>my $q = new CGI;<xhtml:br/>
                     <xhtml:br/>if ($q-&gt;cookie('loggedin') ne "true") {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (! AuthenticateUser($q-&gt;param('username'), $q-&gt;param('password'))) {<xhtml:div style="margin-left:10px;">ExitError("Error: you need to log in first");</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:10px;">
                              <xhtml:div># Set loggedin and user cookies.<xhtml:br/>$q-&gt;cookie(<xhtml:div style="margin-left:10px;">-name =&gt; 'loggedin',<xhtml:br/>-value =&gt; 'true'<xhtml:br/>);</xhtml:div>
                                 <xhtml:br/>$q-&gt;cookie(<xhtml:div style="margin-left:10px;">-name =&gt; 'user',<xhtml:br/>-value =&gt; $q-&gt;param('username')<xhtml:br/>);</xhtml:div>
                              </xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>if ($q-&gt;cookie('user') eq "Administrator") {<xhtml:div style="margin-left:10px;">DoAdministratorTasks();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Unfortunately, this code can be bypassed. The attacker can set the cookies independently so that the code does not check the username and password. The attacker could do this with an HTTP request containing headers such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>GET /cgi-bin/vulnerable.cgi HTTP/1.1<xhtml:br/>Cookie: user=Administrator<xhtml:br/>Cookie: loggedin=true<xhtml:br/>
                     <xhtml:br/>[body of request]</xhtml:div>
               </Example_Code>
               <Body_Text>By setting the loggedin cookie to "true", the attacker bypasses the entire authentication check. By using the "Administrator" value in the user cookie, the attacker also gains privileges to administer the software.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-117">
               <Intro_Text>In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force with a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.</Intro_Text>
         <References>
                  <Reference External_Reference_ID="REF-236"/>
               </References>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-3421</Reference>
               <Description>login script for guestbook allows bypassing authentication by setting a "login_ok" parameter to 1.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3421</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2382</Reference>
               <Description>admin script allows authentication bypass by setting a cookie value to "LOGGEDIN".</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2382</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1048</Reference>
               <Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1048</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2213</Reference>
               <Description>product uses default "Allow" action, instead of default deny, leading to authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2213</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2168</Reference>
               <Description>chain: redirect without exit (CWE-698) leads to resultant authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3107</Reference>
               <Description>product does not restrict access to a listening port for a critical service, allowing authentication to be bypassed.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3107</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1596</Reference>
               <Description>product does not properly implement a security-related configuration setting, allowing authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1596</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2422</Reference>
               <Description>authentication routine returns "nil" instead of "false" in some situations, allowing authentication bypass using an invalid username.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2422</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3232</Reference>
               <Description>authentication update script does not properly handle when admin does not select any authentication modules, allowing authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3232</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3231</Reference>
               <Description>use of LDAP authentication with anonymous binds causes empty password to result in successful authentication</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3231</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0408</Reference>
               <Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0408</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Authentication</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Error</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>1</Entry_ID>
               <Entry_Name>Insufficient Authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="114"/>
            <Related_Attack_Pattern CAPEC_ID="115"/>
            <Related_Attack_Pattern CAPEC_ID="151"/>
            <Related_Attack_Pattern CAPEC_ID="194"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="57"/>
            <Related_Attack_Pattern CAPEC_ID="593"/>
            <Related_Attack_Pattern CAPEC_ID="633"/>
            <Related_Attack_Pattern CAPEC_ID="650"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-237"/>
            <Reference External_Reference_ID="REF-238"/>
            <Reference External_Reference_ID="REF-239"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 4, &#34;Authentication&#34; Page 109"/>
         </References>
         <Notes>
            <Note Type="Relationship">This can be resultant from SQL injection vulnerabilities and other issues.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="288" Name="Authentication Bypass Using an Alternate Path or Channel" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>A product requires authentication, but the product has an alternate path or channel that does not require authentication.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="420" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="425" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This is often seen in web applications that assume that access to a particular CGI program can only be obtained through a "front" screen, when the supporting programs are directly accessible. But this problem is not just in web apps.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2000-1179</Reference>
               <Description>Router allows remote attackers to read system logs without authentication by directly connecting to the login screen and typing certain control characters.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1179</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1454</Reference>
               <Description>Attackers with physical access to the machine may bypass the password prompt by pressing the ESC (Escape) key.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1454</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1077</Reference>
               <Description>OS allows local attackers to bypass the password protection of idled sessions via the programmer's switch or CMD-PWR keyboard sequence, which brings up a debugger that the attacker can use to disable the lock.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1077</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0304</Reference>
               <Description>Direct request of installation file allows attacker to create administrator accounts.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0304</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0870</Reference>
               <Description>Attackers may gain additional privileges by directly requesting the web management URL.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0870</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0066</Reference>
               <Description>Bypass authentication via direct request to named pipe.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0066</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1035</Reference>
               <Description>User can avoid lockouts by using an API instead of the GUI to conduct brute force password guessing.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1035</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Bypass by Alternate Path/Channel</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Failure to Restrict URL Access</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="127"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">overlaps Unprotected Alternate Channel</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="289" Name="Authentication Bypass by Alternate Name" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-44">
               <Phase>Architecture and Design</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2003-0317</Reference>
               <Description>Protection mechanism that restricts URL access can be bypassed using URL encoding.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0317</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0847</Reference>
               <Description>Bypass of authentication for files using "\" (backslash) or "%5C" (encoded backslash).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0847</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication bypass by alternate name</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>IDS01-J</Entry_ID>
               <Entry_Name>Normalize strings before validating them</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Oracle Coding Standard for Java">
               <Entry_ID>IDS01-J</Entry_ID>
               <Entry_Name>Normalize strings before validating them</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">Overlaps equivalent encodings, canonicalization, authorization, multiple trailing slash, trailing space, mixed case, and other equivalence issues.</Note>
            <Note Type="Theoretical">Alternate names are useful in data driven manipulation attacks, not just for authentication.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="290" Name="Authentication Bypass by Spoofing" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>This weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code authenticates users.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String sourceIP = request.getRemoteAddr();<xhtml:br/>if (sourceIP != null &amp;&amp; sourceIP.equals(APPROVED_IP)) {<xhtml:div style="margin-left:10px;">authenticated = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The authentication mechanism implemented relies on an IP address for source validation. If an attacker is able to spoof the IP, they may be able to bypass the authentication mechanism.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-99">
               <Intro_Text>Both of these examples check if a request is from a trusted address before responding to the request.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>sd = socket(AF_INET, SOCK_DGRAM, 0);<xhtml:br/>serv.sin_family = AF_INET;<xhtml:br/>serv.sin_addr.s_addr = htonl(INADDR_ANY);<xhtml:br/>servr.sin_port = htons(1008);<xhtml:br/>bind(sd, (struct sockaddr *) &amp; serv, sizeof(serv));<xhtml:br/>
                     <xhtml:br/>while (1) {<xhtml:div style="margin-left:10px;">memset(msg, 0x0, MAX_MSG);<xhtml:br/>clilen = sizeof(cli);<xhtml:br/>if (inet_ntoa(cli.sin_addr)==getTrustedAddress()) {<xhtml:div style="margin-left:10px;">n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) &amp; cli, &amp;clilen);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>while(true) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>DatagramPacket rp=new DatagramPacket(rData,rData.length);<xhtml:br/>outSock.receive(rp);<xhtml:br/>String in = new String(p.getData(),0, rp.getLength());<xhtml:br/>InetAddress clientIPAddress = rp.getAddress();<xhtml:br/>int port = rp.getPort();<xhtml:br/>
                           <xhtml:br/>if (isTrustedAddress(clientIPAddress) &amp; secretKey.equals(in)) {<xhtml:div style="margin-left:10px;">out = secret.getBytes();<xhtml:br/>DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code only verifies the address as stored in the request packet. An attacker can spoof this address, thus impersonating a trusted client</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-93">
               <Intro_Text>The following code samples use a DNS lookup in order to decide whether or not an inbound request is from a trusted host. If an attacker can poison the DNS cache, they can gain trusted status.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>struct hostent *hp;struct in_addr myaddr;<xhtml:br/>char* tHost = "trustme.example.com";<xhtml:br/>myaddr.s_addr=inet_addr(ip_addr_string);<xhtml:br/>
                     <xhtml:br/>hp = gethostbyaddr((char *) &amp;myaddr, sizeof(struct in_addr), AF_INET);<xhtml:br/>if (hp &amp;&amp; !strncmp(hp-&gt;h_name, tHost, sizeof(tHost))) {<xhtml:div style="margin-left:10px;">trusted = true;</xhtml:div>} else {<xhtml:div style="margin-left:10px;">trusted = false;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String ip = request.getRemoteAddr();<xhtml:br/>InetAddress addr = InetAddress.getByName(ip);<xhtml:br/>if (addr.getCanonicalHostName().endsWith("trustme.com")) {<xhtml:div style="margin-left:10px;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="C#">
                  <xhtml:div>IPAddress hostIPAddress = IPAddress.Parse(RemoteIpAddress);<xhtml:br/>IPHostEntry hostInfo = Dns.GetHostByAddress(hostIPAddress);<xhtml:br/>if (hostInfo.HostName.EndsWith("trustme.com")) {<xhtml:div style="margin-left:10px;">trusted = true;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>IP addresses are more reliable than DNS names, but they can also be spoofed. Attackers can easily forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-1048</Reference>
               <Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1048</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication bypass by spoofing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="22"/>
            <Related_Attack_Pattern CAPEC_ID="459"/>
            <Related_Attack_Pattern CAPEC_ID="461"/>
            <Related_Attack_Pattern CAPEC_ID="473"/>
            <Related_Attack_Pattern CAPEC_ID="476"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 3, &#34;Spoofing and Identification&#34;, Page 72"/>
         </References>
         <Notes>
            <Note Type="Relationship">This can be resultant from insufficient verification.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="291" Name="Reliance on IP Address for Authentication" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software uses an IP address for authentication.</Description>
         <Extended_Description>IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="290" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="290" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="471" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Malicious users can fake authentication information, impersonating any IP address.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-99">
               <Intro_Text>Both of these examples check if a request is from a trusted address before responding to the request.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>sd = socket(AF_INET, SOCK_DGRAM, 0);<xhtml:br/>serv.sin_family = AF_INET;<xhtml:br/>serv.sin_addr.s_addr = htonl(INADDR_ANY);<xhtml:br/>servr.sin_port = htons(1008);<xhtml:br/>bind(sd, (struct sockaddr *) &amp; serv, sizeof(serv));<xhtml:br/>
                     <xhtml:br/>while (1) {<xhtml:div style="margin-left:10px;">memset(msg, 0x0, MAX_MSG);<xhtml:br/>clilen = sizeof(cli);<xhtml:br/>if (inet_ntoa(cli.sin_addr)==getTrustedAddress()) {<xhtml:div style="margin-left:10px;">n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) &amp; cli, &amp;clilen);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>while(true) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>DatagramPacket rp=new DatagramPacket(rData,rData.length);<xhtml:br/>outSock.receive(rp);<xhtml:br/>String in = new String(p.getData(),0, rp.getLength());<xhtml:br/>InetAddress clientIPAddress = rp.getAddress();<xhtml:br/>int port = rp.getPort();<xhtml:br/>
                           <xhtml:br/>if (isTrustedAddress(clientIPAddress) &amp; secretKey.equals(in)) {<xhtml:div style="margin-left:10px;">out = secret.getBytes();<xhtml:br/>DatagramPacket sp =new DatagramPacket(out,out.length, IPAddress, port); outSock.send(sp);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code only verifies the address as stored in the request packet. An attacker can spoof this address, thus impersonating a trusted client.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Trusting self-reported IP address</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="4"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="293" Name="Using Referer Field for Authentication" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="290" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="290" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>The referer field in HTML requests can be simply modified by malicious users, rendering it useless as a means of checking the validity of the request in question.</Background_Detail>
         </Background_Details>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>referrer</Term>
               <Description>While the proper spelling might be regarded as "referrer," the HTTP RFCs and their implementations use "referer," so this is regarded as the correct spelling.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Actions, which may not be authorized otherwise, can be carried out as if they were validated by the server referred to.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code samples check a packet's referer in order to decide whether or not an inbound request is from a trusted host.</Intro_Text>
               <Example_Code Nature="bad" Language="C++">
                  <xhtml:div>String trustedReferer = "http://www.example.com/"<xhtml:br/>while(true){<xhtml:div style="margin-left:10px;">n = read(newsock, buffer, BUFSIZE);<xhtml:br/>requestPacket = processPacket(buffer, n);<xhtml:br/>if (requestPacket.referer == trustedReferer){<xhtml:div style="margin-left:10px;">openNewSecureSession(requestPacket);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>boolean processConnectionRequest(HttpServletRequest request){<xhtml:div style="margin-left:10px;">String referer = request.getHeader("referer")<xhtml:br/>String trustedReferer = "http://www.example.com/"<xhtml:br/>if(referer.equals(trustedReferer)){<xhtml:div style="margin-left:10px;">openPrivilegedConnection(request);<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:10px;">sendPrivilegeError(request);<xhtml:br/>return false;</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>These examples check if a request is from a trusted referer before responding to a request, but the code only verifies the referer name as stored in the request packet. An attacker can spoof the referer, thus impersonating a trusted client.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Using referrer field for authentication</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP29</Entry_ID>
               <Entry_Name>Faulty endpoint authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;Referer Request Header&#34;, Page 1030"/>
         </References>
         
      </Weakness>
      <Weakness ID="294" Name="Authentication Bypass by Capture-replay" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).</Description>
         <Extended_Description>Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Messages sent with a capture-relay attack allow access to resources which are not otherwise accessible without proper authentication.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Since any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4961</Reference>
               <Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4961</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication bypass by replay</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Capture-replay</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="295" Name="Improper Certificate Validation" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software does not validate, or incorrectly validates, a certificate.</Description>
         <Extended_Description>When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by using a man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="322" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>A certificate is a token that associates an identity (principal) to a cryptographic key. Certificates can be used to check if a public key belongs to the assumed owner.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Authentication</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Description>Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2014-1266</Reference>
               <Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing man-in-the-middle attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint ('Man-in-the-Middle')).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1266</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4989</Reference>
               <Description>Verification function trusts certificate chains in which the last certificate is self-signed.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4989</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5821</Reference>
               <Description>Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA)</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5821</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3046</Reference>
               <Description>Web browser does not check if any intermediate certificates are revoked.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3046</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-0199</Reference>
               <Description>Operating system does not check Certificate Revocation List (CRL) in some cases, allowing spoofing using a revoked certificate.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0199</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5810</Reference>
               <Description>Mobile banking application does not verify hostname, leading to financial loss.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5810</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3446</Reference>
               <Description>Cloud-support library written in Python uses incorrect regular expression when matching hostname.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-3446</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2408</Reference>
               <Description>Web browser does not correctly handle '\0' character (NUL) in Common Name, allowing spoofing of https sites.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2408</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-2993</Reference>
               <Description>Smartphone device does not verify hostname, allowing spoofing of mail services.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2993</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5822</Reference>
               <Description>Application uses third-party library that does not validate hostname.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5822</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5819</Reference>
               <Description>Cloud storage management application does not validate hostname.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5819</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5817</Reference>
               <Description>Java library uses JSSE SSLSocket and SSLEngine classes, which do not verify the hostname.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5817</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1378</Reference>
               <Description>chain: incorrect calculation allows attackers to bypass certificate checks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1378</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3170</Reference>
               <Description>LDAP client accepts certificates even if they are not from a trusted CA.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3170</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0265</Reference>
               <Description>chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0265</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1229</Reference>
               <Description>chain: product checks if client is trusted when it intended to check if the server is trusted, allowing validation of signed code.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1229</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0862</Reference>
               <Description>Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0862</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1358</Reference>
               <Description>chain: OS package manager does not check properly check the return value, allowing bypass using a revoked certificate.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1358</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Insecure Configuration Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="459"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-243"/>
            <Reference External_Reference_ID="REF-244"/>
         </References>
         
      </Weakness>
      <Weakness ID="296" Name="Improper Following of a Certificate's Chain of Trust" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.</Description>
         <Extended_Description>
            <xhtml:p>If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate.</xhtml:p>
            <xhtml:p>In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate.</xhtml:p>
            <xhtml:p>There are several ways in which the chain of trust might be broken, including but not limited to:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>Any certificate in the chain is self-signed, unless it the root.</xhtml:li>
                  <xhtml:li>Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate.</xhtml:li>
                  <xhtml:li>An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions.</xhtml:li>
                  <xhtml:li>The root certificate has been compromised or authorized to the wrong party.</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>Exploitation of this flaw can lead to the trust of data that may have originated with a spoofed source.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Data, requests, or actions taken by the attacking entity can be carried out as a spoofed benign entity.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that proper certificate checking is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Understand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code checks the certificate of a connected peer.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>if ((cert = SSL_get_peer_certificate(ssl)) &amp;&amp; host)<xhtml:div style="margin-left:10px;">foo=SSL_get_verify_result(ssl);</xhtml:div>
                     <xhtml:br/>if ((X509_V_OK==foo) || X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN==foo))<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// certificate looks good, host can be trusted</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>In this case, because the certificate is self-signed, there was no external authority that could prove the identity of the host. The program could be communicating with a different system that is spoofing the host, e.g. by poisoning the DNS cache or conducting a man-in-the-middle attack.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2016-2402</Reference>
               <Description>Server allows bypass of certificate pinning by sending a chain of trust that includes a trusted CA that is not pinned.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2402</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4989</Reference>
               <Description>Verification function trusts certificate chains in which the last certificate is self-signed.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4989</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5821</Reference>
               <Description>Chain: Web browser uses a TLS-related function incorrectly, preventing it from verifying that a server's certificate is signed by a trusted certification authority (CA).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5821</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3046</Reference>
               <Description>Web browser does not check if any intermediate certificates are revoked.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3046</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0265</Reference>
               <Description>chain: DNS server does not correctly check return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0265</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0124</Reference>
               <Description>chain: incorrect check of return value from the OpenSSL EVP_VerifyFinal function allows bypass of validation of the certificate chain.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0124</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0970</Reference>
               <Description>File-transfer software does not validate Basic Constraints of an intermediate CA-signed certificate.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0970</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0862</Reference>
               <Description>Cryptographic API, as used in web browsers, mail clients, and other software, does not properly validate Basic Constraints.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0862</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to follow chain of trust in certificate validation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-245"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 23: Improper Use of PKI, Especially SSL.&#34; Page 347"/>
         </References>
         
      </Weakness>
      <Weakness ID="297" Name="Improper Validation of Certificate with Host Mismatch" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The software communicates with a host that provides a certificate, but the software does not properly ensure that the certificate is actually associated with that host.</Description>
         <Extended_Description>
            <xhtml:p>Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the software is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed.</xhtml:p>
            <xhtml:p>Even if the software attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name.</xhtml:p>
            <xhtml:p>This weakness can occur even when the software uses Certificate Pinning, if the software does not verify the hostname at the time a certificate is pinned.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>The data read from the system vouched for by the certificate may not be from the expected system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Authentication</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Trust afforded to the system in question - based on the malicious certificate - may allow for spoofing or redirection attacks.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>Set up an untrusted endpoint (e.g. a server) with which the software will connect.  Create a test certificate that uses an invalid hostname but is signed by a trusted CA and provide this certificate from the untrusted endpoint. If the software performs any operations instead of disconnecting and reporting an error, then this indicates that the hostname is not being checked and the test certificate has been accepted.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Black Box</Method>
               <Description>When Certificate Pinning is being used in a mobile application, consider using a tool such as Spinner [REF-955].  This methodology might be extensible to other technologies.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following OpenSSL code obtains a certificate and verifies it.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>cert = SSL_get_peer_certificate(ssl);<xhtml:br/>if (cert &amp;&amp; (SSL_get_verify_result(ssl)==X509_V_OK)) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// do secret things</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Even though the "verify" step returns X509_V_OK, this step does not include checking the Common Name against the name of the host. That is, there is no guarantee that the certificate is for the desired host. The SSL connection could have been established with a malicious host that provided a valid certificate.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2012-5810</Reference>
               <Description>Mobile banking application does not verify hostname, leading to financial loss.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5810</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5811</Reference>
               <Description>Mobile application for printing documents does not verify hostname, allowing attackers to read sensitive documents.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5811</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5807</Reference>
               <Description>Software for electronic checking does not verify hostname, leading to financial loss.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5807</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-3446</Reference>
               <Description>Cloud-support library written in Python uses incorrect regular expression when matching hostname.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-3446</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2408</Reference>
               <Description>Web browser does not correctly handle '\0' character (NUL) in Common Name, allowing spoofing of https sites.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2408</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0867</Reference>
               <Description>Database program truncates the Common Name during hostname verification, allowing spoofing.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0867</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-2074</Reference>
               <Description>Incorrect handling of '\0' character (NUL) in hostname verification allows spoofing.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-2074</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-4565</Reference>
               <Description>Mail server's incorrect handling of '\0' character (NUL) in hostname verification allows spoofing.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4565</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3767</Reference>
               <Description>LDAP server's incorrect handling of '\0' character (NUL) in hostname verification allows spoofing.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3767</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5806</Reference>
               <Description>Payment processing module does not verify hostname when connecting to PayPal using PHP fsockopen function.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5806</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-2993</Reference>
               <Description>Smartphone device does not verify hostname, allowing spoofing of mail services.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2993</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5804</Reference>
               <Description>E-commerce module does not verify hostname when connecting to payment site.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5804</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5824</Reference>
               <Description>Chat application does not validate hostname, leading to loss of privacy.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5824</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5822</Reference>
               <Description>Application uses third-party library that does not validate hostname.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5822</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5819</Reference>
               <Description>Cloud storage management application does not validate hostname.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5819</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5817</Reference>
               <Description>Java library uses JSSE SSLSocket and SSLEngine classes, which do not verify the hostname.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5817</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5784</Reference>
               <Description>SOAP platform does not verify the hostname.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5784</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5782</Reference>
               <Description>PHP library for payments does not verify the hostname.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5782</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-5780</Reference>
               <Description>Merchant SDK for payments does not verify the hostname.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5780</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0355</Reference>
               <Description>Web browser does not validate Common Name, allowing spoofing of https sites.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0355</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to validate host-specific certificate data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-245"/>
            <Reference External_Reference_ID="REF-243"/>
            <Reference External_Reference_ID="REF-249"/>
            <Reference External_Reference_ID="REF-250"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 23: Improper Use of PKI, Especially SSL.&#34; Page 347"/>
            <Reference External_Reference_ID="REF-955"/>
         </References>
         
      </Weakness>
      <Weakness ID="298" Name="Improper Validation of Certificate Expiration" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.</Description>
         <Extended_Description>When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>The data read from the system vouched for by the expired certificate may be flawed due to malicious spoofing.</Note>
            </Consequence>
            <Consequence>
               <Scope>Authentication</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Trust afforded to the system in question - based on the expired certificate - may allow for spoofing attacks.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following OpenSSL code ensures that there is a certificate and allows the use of expired certificates.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer(certificate(ssl)) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>foo=SSL_get_verify_result(ssl);<xhtml:br/>if ((X509_V_OK==foo) || (X509_V_ERR_CERT_HAS_EXPIRED==foo))<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>//do stuff</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>If the call to SSL_get_verify_result() returns X509_V_ERR_CERT_HAS_EXPIRED, this means that the certificate has expired. As time goes on, there is an increasing chance for attackers to compromise the certificate.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to validate certificate expiration</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 23: Improper Use of PKI, Especially SSL.&#34; Page 347"/>
         </References>
         
      </Weakness>
      <Weakness ID="299" Name="Improper Check for Certificate Revocation" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.</Description>
         <Extended_Description>An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="295" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="404" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>When the software uses certificate pinning, the developer might not properly validate all relevant components of the certificate before pinning the certificate. This can make it difficult or expensive to test after the pinning is complete.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Trust may be assigned to an entity who is not who it claims to be.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Data from an untrusted (and possibly malicious) source may be integrated.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Data may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that certificates are checked for revoked status.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following OpenSSL code ensures that there is a certificate before continuing execution.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer_certificate(ssl)) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// got a certificate, do secret things</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>Because this code does not use SSL_get_verify_results() to check the certificate, it could accept certificates that have been revoked (X509_V_ERR_CERT_REVOKED). The software could be communicating with a malicious host.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2011-2014</Reference>
               <Description>LDAP-over-SSL implementation does not check Certificate Revocation List (CRL), allowing spoofing using a revoked certificate.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2014</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-0199</Reference>
               <Description>Operating system does not check Certificate Revocation List (CRL) in some cases, allowing spoofing using a revoked certificate.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0199</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-5185</Reference>
               <Description>Antivirus product does not check whether certificates from signed executables have been revoked.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-5185</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3046</Reference>
               <Description>Web browser does not check if any intermediate certificates are revoked.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3046</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0161</Reference>
               <Description>chain: Ruby module for OCSP misinterprets a response, preventing detection of a revoked certificate.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0161</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-2701</Reference>
               <Description>chain: incorrect parsing of replies from OCSP responders allows bypass using a revoked certificate.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2701</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2011-0935</Reference>
               <Description>Router can permanently cache certain public keys, which would allow bypass if the certificate is later revoked.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0935</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1358</Reference>
               <Description>chain: OS package manager does not properly check the return value, allowing bypass using a revoked certificate.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1358</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0642</Reference>
               <Description>chain: language interpreter does not properly check the return value from an OSCP function, allowing bypass using a revoked certificate.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0642</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4679</Reference>
               <Description>chain: web service component does not call the expected method, which prevents a check for revoked certificates.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4679</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4410</Reference>
               <Description>Certificate revocation list not searched for certain certificates.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4410</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4409</Reference>
               <Description>Product cannot access certificate revocation list when an HTTP proxy is being used.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4409</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to check for certificate revocation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 23: Improper Use of PKI, Especially SSL.&#34; Page 347"/>
         </References>
         
      </Weakness>
      <Weakness ID="300" Name="Channel Accessible by Non-Endpoint ('Man-in-the-Middle')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.</Description>
         <Extended_Description>In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>An attacker could pose as one of the entities and read or possibly modify the communication.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Always fully authenticate both ends of any communications channel.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Adhere to the principle of complete mediation.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>A certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the Java snippet below, data is sent over an unencrypted channel to a remote server.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Socket sock;<xhtml:br/>PrintWriter out;<xhtml:br/>
                     <xhtml:br/>try {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>sock = new Socket(REMOTE_HOST, REMOTE_PORT);<xhtml:br/>out = new PrintWriter(echoSocket.getOutputStream(), true);<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// Write data to remote host via socket output stream.</xhtml:i>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>By eavesdropping on the communication channel or posing as the endpoint, an attacker would be able to read all of the transmitted data.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2014-1266</Reference>
               <Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing man-in-the-middle attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint ('Man-in-the-Middle')).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1266</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Man-in-the-middle (MITM)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>32</Entry_ID>
               <Entry_Name>Routing Detour</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="117"/>
            <Related_Attack_Pattern CAPEC_ID="466"/>
            <Related_Attack_Pattern CAPEC_ID="57"/>
            <Related_Attack_Pattern CAPEC_ID="589"/>
            <Related_Attack_Pattern CAPEC_ID="590"/>
            <Related_Attack_Pattern CAPEC_ID="612"/>
            <Related_Attack_Pattern CAPEC_ID="613"/>
            <Related_Attack_Pattern CAPEC_ID="615"/>
            <Related_Attack_Pattern CAPEC_ID="94"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-244"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The summary identifies multiple distinct possibilities, suggesting that this is a category that must be broken into more specific weaknesses.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="301" Name="Reflection Attack in an Authentication Protocol" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.</Description>
         <Extended_Description>A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="327" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>The primary result of reflection attacks is successful authentication with a target machine -- as an impersonated user.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Let the initiator prove its identity before proceeding.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>unsigned char *simple_digest(char *alg,char *buf,unsigned int len, int *olen) {<xhtml:div style="margin-left:10px;">const EVP_MD *m;<xhtml:br/>EVP_MD_CTX ctx;<xhtml:br/>unsigned char *ret;<xhtml:br/>OpenSSL_add_all_digests();<xhtml:br/>if (!(m = EVP_get_digestbyname(alg))) return NULL;<xhtml:br/>if (!(ret = (unsigned char*)malloc(EVP_MAX_MD_SIZE))) return NULL;<xhtml:br/>EVP_DigestInit(&amp;ctx, m);<xhtml:br/>EVP_DigestUpdate(&amp;ctx,buf,len);<xhtml:br/>EVP_DigestFinal(&amp;ctx,ret,olen);<xhtml:br/>return ret;</xhtml:div>}<xhtml:br/>unsigned char *generate_password_and_cmd(char *password_and_cmd) {<xhtml:div style="margin-left:10px;">simple_digest("sha1",password,strlen(password_and_cmd)<xhtml:br/>...<xhtml:br/>);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String command = new String("some cmd to execute &amp; the password") MessageDigest encer = MessageDigest.getInstance("SHA");<xhtml:br/>encer.update(command.getBytes("UTF-8"));<xhtml:br/>byte[] digest = encer.digest();</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-3435</Reference>
               <Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3435</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Reflection attack in an auth protocol</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="90"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Insufficient Validation&#34;, Page 38"/>
         </References>
         <Notes>
            <Note Type="Maintenance">The term "reflection" is used in multiple ways within CWE and the community, so its usage should be reviewed.</Note>
            <Note Type="Other">Reflection attacks capitalize on mutual authentication schemes in order to trick the target into revealing the secret shared between it and another valid user. In a basic mutual-authentication scheme, a secret is known to both the valid user and the server; this allows them to authenticate. In order that they may verify this shared secret without sending it plainly over the wire, they utilize a Diffie-Hellman-style scheme in which they each pick a value, then request the hash of that value as keyed by the shared secret. In a reflection attack, the attacker claims to be a valid user and requests the hash of a random value from the server. When the server returns this value and requests its own value to be hashed, the attacker opens another connection to the server. This time, the hash requested by the attacker is the value which the server requested in the first connection. When the server returns this hashed value, it is used in the first connection, authenticating the attacker successfully as the impersonated valid user.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="302" Name="Authentication Bypass by Assumed-Immutable Data" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="807" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Phase>Implementation</Phase>
               <Description>Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following example, an "authenticated" cookie is used to determine whether or not a user should be granted access to a system.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>boolean authenticated = new Boolean(getCookieValue("authenticated")).booleanValue();<xhtml:br/>if (authenticated) {<xhtml:div style="margin-left:10px;">...</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Of course, modifying the value of a cookie on the client-side is trivial, but many developers assume that cookies are essentially immutable.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0367</Reference>
               <Description>DebPloit</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0367</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0261</Reference>
               <Description>Web auth</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0261</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1730</Reference>
               <Description>Authentication bypass by setting certain cookies to "true".</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1730</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1734</Reference>
               <Description>Authentication bypass by setting certain cookies to "true".</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1734</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-2064</Reference>
               <Description>Admin access by setting a cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2064</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-2054</Reference>
               <Description>Gain privileges by setting cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2054</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1611</Reference>
               <Description>Product trusts authentication information in cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1611</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1708</Reference>
               <Description>Authentication bypass by setting admin-testing variable to true.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1708</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1787</Reference>
               <Description>Bypass auth and gain privileges by setting a variable.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1787</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Bypass via Assumed-Immutable Data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC02-J</Entry_ID>
               <Entry_Name>Do not base security checks on untrusted sources</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="10"/>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="274"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="45"/>
            <Related_Attack_Pattern CAPEC_ID="77"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="303" Name="Incorrect Implementation of Authentication Algorithm" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.</Description>
         <Extended_Description>This incorrect implementation may allow authentication to be bypassed.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2003-0750</Reference>
               <Description>Conditional should have been an 'or' not an 'and'.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0750</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Logic Error</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="90"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="304" Name="Missing Critical Step in Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software implements an authentication technique, but it skips a step that weakens the technique.</Description>
         <Extended_Description>Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or allowing attackers to execute arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-2163</Reference>
               <Description>Shared secret not verified in a RADIUS response packet, allowing authentication bypass by spoofing server replies.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2163</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Missing Critical Step in Authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="305" Name="Authentication Bypass by Primary Weakness" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1374</Reference>
               <Description>The provided password is only compared against the first character of the real password.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0979</Reference>
               <Description>The password is not properly checked, which allows remote attackers to bypass access controls by sending a 1-byte password that matches the first character of the real password.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0979</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0088</Reference>
               <Description>Chain: Forum software does not properly initialize an array, which inadvertently sets the password to a single character, allowing remote attackers to easily guess the password and gain administrative privileges.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0088</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Authentication Bypass by Primary Weakness</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">Most "authentication bypass" errors are resultant, not primary.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="306" Name="Missing Authentication for Critical Function" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Other</Impact>
               <Note>Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, access to administrative or other privileged functionality, or possibly even execution of arbitrary code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7.2">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is useful for evaluating the correctness of custom authentication mechanisms.</xhtml:p>
               </Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-6.1">
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>Automated static analysis is useful for detecting commonly-used idioms for authentication. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authentication libraries.</xhtml:p>
                  <xhtml:p>Generally, automated static analysis tools have difficulty detecting custom authentication schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an established identity; an automated technique that detects the absence of authentication may report false positives.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host Application Interface Scanner</xhtml:li>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Divide the software into anonymous, normal, privileged, and administrative areas. Identify which of these areas require a proven user identity, and use a centralized authentication capability.</xhtml:p>
                  <xhtml:p>Identify all potential communication channels, or other means of interaction with the software, to ensure that all channels are appropriately protected. Developers sometimes perform authentication at the primary channel, but open up a secondary channel that is assumed to be private. For example, a login mechanism may be listening on one network port, but after successful authentication, it may open up a second port where it waits for the connection, but avoids authentication because it assumes that only the authenticated party will connect to the port.</xhtml:p>
                  <xhtml:p>In general, if the software or protocol allows a single session or user state to persist across multiple connections or channels, authentication and appropriate credential management need to be used throughout.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Where possible, avoid implementing custom authentication routines and consider using authentication capabilities as provided by the surrounding framework, operating system, or environment. These may make it easier to provide a clear separation between authentication tasks and authorization tasks.</xhtml:p>
                  <xhtml:p>In environments such as the World Wide Web, the line between authentication and authorization is sometimes blurred. If custom authentication routines are required instead of those provided by the server, then these routines must be applied to every single page, since these pages could be requested directly.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4.5">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator [REF-45].</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the method createBankAccount is used to create a BankAccount object for a bank management application.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public BankAccount createBankAccount(String accountNumber, String accountType,<xhtml:br/>String accountName, String accountSSN, double balance) {<xhtml:br/>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:div>BankAccount account = new BankAccount();<xhtml:br/>account.setAccountNumber(accountNumber);<xhtml:br/>account.setAccountType(accountType);<xhtml:br/>account.setAccountOwnerName(accountName);<xhtml:br/>account.setAccountOwnerSSN(accountSSN);<xhtml:br/>account.setBalance(balance);<xhtml:br/>
                           <xhtml:br/>return account;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>However, there is no authentication mechanism to ensure that the user creating this bank account object has the authority to create new bank accounts. Some authentication mechanisms should be used to verify that the user has the authority to create bank account objects.</Body_Text>
               <Body_Text>The following Java code includes a boolean variable and method for authenticating a user. If the user has not been authenticated then the createBankAccount will not create the bank account object.</Body_Text>
               <Example_Code Nature="good" Language="Java">
                  <xhtml:div>private boolean isUserAuthentic = false;<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// authenticate user,</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// if user is authenticated then set variable to true</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// otherwise set variable to false</xhtml:i>
                     <xhtml:br/>public boolean authenticateUser(String username, String password) {<xhtml:div style="margin-left:10px;">...</xhtml:div>}<xhtml:br/>
                     <xhtml:br/>public BankAccount createNewBankAccount(String accountNumber, String accountType,<xhtml:br/>String accountName, String accountSSN, double balance) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>BankAccount account = null;<xhtml:br/>
                           <xhtml:br/>if (isUserAuthentic) {<xhtml:div style="margin-left:10px;">account = new BankAccount();<xhtml:br/>account.setAccountNumber(accountNumber);<xhtml:br/>account.setAccountType(accountType);<xhtml:br/>account.setAccountOwnerName(accountName);<xhtml:br/>account.setAccountOwnerSSN(accountSSN);<xhtml:br/>account.setBalance(balance);</xhtml:div>}<xhtml:br/>return account;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1810</Reference>
               <Description>MFV. Access TFTP server without authentication and obtain configuration file with sensitive plaintext information.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1810</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6827</Reference>
               <Description>Agent software running at privileges does not authenticate incoming requests over an unprotected channel, allowing a Shatter" attack.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6827</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0213</Reference>
               <Description>Product enforces restrictions through a GUI but not through privileged APIs.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0213</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>No Authentication for Critical Function</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP31</Entry_ID>
               <Entry_Name>Missing authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="12"/>
            <Related_Attack_Pattern CAPEC_ID="166"/>
            <Related_Attack_Pattern CAPEC_ID="36"/>
            <Related_Attack_Pattern CAPEC_ID="62"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Authentication,&#34; Page 36"/>
            <Reference External_Reference_ID="REF-257"/>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         <Notes>
            <Note Type="Relationship">This is separate from "bypass" issues in which authentication exists, but is faulty.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="307" Name="Improper Restriction of Excessive Authentication Attempts" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="799" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>An attacker could perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Host-based Vulnerability Scanners – Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Forced Path Execution</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Common protection mechanisms include:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>Disconnecting the user after a small number of failed attempts</xhtml:li>
                        <xhtml:li>Implementing a timeout</xhtml:li>
                        <xhtml:li>Locking out a targeted account</xhtml:li>
                        <xhtml:li>Requiring a computational task on the user's part.</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Consider using libraries with authentication capabilities such as OpenSSL or the ESAPI Authenticator. [REF-45]</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-117">
               <Intro_Text>In January 2009, an attacker was able to gain administrator access to a Twitter server because the server did not restrict the number of login attempts. The attacker targeted a member of Twitter's support team and was able to successfully guess the member's password using a brute force attack by guessing a large number of common words. After gaining access as the member of the support staff, the attacker used the administrator panel to gain access to 33 accounts that belonged to celebrities and politicians. Ultimately, fake Twitter messages were sent that appeared to come from the compromised accounts.</Intro_Text>
               <References>
                  <Reference External_Reference_ID="REF-236"/>
               </References>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code, extracted from a servlet's doPost() method, performs an authentication lookup every time the servlet is invoked.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String username = request.getParameter("username");<xhtml:br/>String password = request.getParameter("password");<xhtml:br/>
                     <xhtml:br/>int authResult = authenticateUser(username, password);</xhtml:div>
               </Example_Code>
               <Body_Text>However, the software makes no attempt to restrict excessive authentication attempts.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code attempts to limit the number of login attempts by causing the process to sleep before completing the authentication.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>$username = $_POST['username'];<xhtml:br/>$password = $_POST['password'];<xhtml:br/>sleep(2000);<xhtml:br/>$isAuthenticated = authenticateUser($username, $password);</xhtml:div>
               </Example_Code>
               <Body_Text>However, there is no limit on parallel connections, so this does not increase the amount of time an attacker needs to complete an attack.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following C/C++ example the validateUser method opens a socket connection, reads a username and password from the socket and attempts to authenticate the username and password.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int validateUser(char *host, int port)<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                        <xhtml:div>int socket = openSocketConnection(host, port);<xhtml:br/>if (socket &lt; 0) {<xhtml:div style="margin-left:10px;">printf("Unable to open socket connection");<xhtml:br/>return(FAIL);</xhtml:div>}<xhtml:br/>
                           <xhtml:br/>int isValidUser = 0;<xhtml:br/>char username[USERNAME_SIZE];<xhtml:br/>char password[PASSWORD_SIZE];<xhtml:br/>
                           <xhtml:br/>while (isValidUser == 0) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>if (getNextMessage(socket, username, USERNAME_SIZE) &gt; 0) {<xhtml:div style="margin-left:10px;">if (getNextMessage(socket, password, PASSWORD_SIZE) &gt; 0) {<xhtml:div style="margin-left:10px;">isValidUser = AuthenticateUser(username, password);</xhtml:div>}</xhtml:div>}</xhtml:div>
                           </xhtml:div>}<xhtml:br/>return(SUCCESS);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The validateUser method will continuously check for a valid username and password without any restriction on the number of authentication attempts made. The method should limit the number of authentication attempts made to prevent brute force attacks as in the following example code.</Body_Text>
               <Example_Code Nature="good" Language="C">
                  <xhtml:div>int validateUser(char *host, int port)<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>int count = 0;<xhtml:br/>while ((isValidUser == 0) &amp;&amp; (count &lt; MAX_ATTEMPTS)) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>if (getNextMessage(socket, username, USERNAME_SIZE) &gt; 0) {<xhtml:div style="margin-left:10px;">if (getNextMessage(socket, password, PASSWORD_SIZE) &gt; 0) {<xhtml:div style="margin-left:10px;">isValidUser = AuthenticateUser(username, password);</xhtml:div>}</xhtml:div>}<xhtml:br/>count++;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>if (isValidUser) {<xhtml:div style="margin-left:10px;">return(SUCCESS);</xhtml:div>}<xhtml:br/>else {<xhtml:div style="margin-left:10px;">return(FAIL);</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-1152</Reference>
               <Description>Product does not disconnect or timeout after multiple failed logins.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1152</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1291</Reference>
               <Description>Product does not disconnect or timeout after multiple failed logins.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1291</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0395</Reference>
               <Description>Product does not disconnect or timeout after multiple failed logins.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0395</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1339</Reference>
               <Description>Product does not disconnect or timeout after multiple failed logins.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1339</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0628</Reference>
               <Description>Product does not disconnect or timeout after multiple failed logins.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0628</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1324</Reference>
               <Description>User accounts not disabled when they exceed a threshold; possibly a resultant problem.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1324</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_ID>AUTHENT.MULTFAIL</Entry_ID>
               <Entry_Name>Multiple Failed Authentication Attempts not Prevented</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP34</Entry_ID>
               <Entry_Name>Unrestricted authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-45"/>
         </References>
         
      </Weakness>
      <Weakness ID="308" Name="Use of Single-factor Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.</Description>
         <Extended_Description>While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="287" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="654" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="309" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If the secret in a single-factor authentication scheme gets compromised, full authentication is possible.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-101">
               <Intro_Text>In both of these examples, a user is logged in if their given password matches a stored password:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>unsigned char *check_passwd(char *plaintext) {<xhtml:div style="margin-left:10px;">ctext = simple_digest("sha1",plaintext,strlen(plaintext), ... );<xhtml:br/>
                        <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                        <xhtml:br/>if (equal(ctext, secret_password())) {<xhtml:div style="margin-left:10px;">login_user();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String plainText = new String(plainTextIn);<xhtml:br/>MessageDigest encer = MessageDigest.getInstance("SHA");<xhtml:br/>encer.update(plainTextIn);<xhtml:br/>byte[] digest = password.digest();<xhtml:br/>
                     <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                     <xhtml:br/>if (equal(digest,secret_password())) {<xhtml:div style="margin-left:10px;">login_user();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code fails to incorporate more than one method of authentication. If an attacker can steal or guess a user's password, they are given full access to their account. Note this code also exhibits CWE-328 (Reversible One-Way Hash) and CWE-759 (Use of a One-Way Hash without a Salt).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Using single-factor authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="311" Name="Missing Encryption of Sensitive Data" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software does not encrypt sensitive or critical information before storage or transmission.</Description>
         <Extended_Description>The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>If the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Omitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>The characterizaton of sensitive data often requires domain-specific understanding, so manual methods are useful. However, manual efforts might not achieve desired code coverage within limited time constraints. Black box methods may produce artifacts (e.g. stored data or unencrypted network transfer) that require manual evaluation.</Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated measurement of the entropy of an input/output source may indicate the use or lack of encryption, but human analysis is still required to distinguish intentionally-unencrypted data (e.g. metadata) from sensitive data.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Network Sniffer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Automated Monitored Execution</xhtml:li>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Attack Modeling</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Ensure that encryption is properly integrated into the system design, including but not necessarily limited to:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>Encryption that is needed to store or transmit private data of the users of the system</xhtml:li>
                        <xhtml:li>Encryption that is needed to protect the system itself from unauthorized disclosure or tampering</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
                  <xhtml:p>Identify the separate needs and contexts for encryption:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>One-way (i.e., only the user or recipient needs to have the key). This can be achieved using public key cryptography, or other techniques in which the encrypting party (i.e., the software) does not need to have access to a private key.</xhtml:li>
                        <xhtml:li>Two-way (i.e., the encryption can be automatically performed on behalf of a user, but the key must be available so that the plaintext can be automatically recoverable by that user). This requires storage of the private key in a format that is recoverable only by the user (or perhaps by the operating system) in a way that cannot be recovered by others.</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
                  <xhtml:p>Using threat modeling or other techniques, assume that data can be compromised through a separate vulnerability or weakness, and determine where encryption will be most effective. Ensure that data that should be private is not being inadvertently exposed using weaknesses such as insecure permissions (CWE-732). [REF-7]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-24">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.</xhtml:p>
                  <xhtml:p>For example, US government systems require FIPS 140-2 certification.</xhtml:p>
                  <xhtml:p>Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.</xhtml:p>
                  <xhtml:p>Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-46">
               <Phase>Architecture and Design</Phase>
               <Strategy>Separation of Privilege</Strategy>
               <Description>
                  <xhtml:p>Compartmentalize the system to have "safe" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.</xhtml:p>
                  <xhtml:p>Ensure that appropriate compartmentalization is built into the system design and that the compartmentalization serves to allow for and further reinforce privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide when it is appropriate to use and to drop system privileges.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-33">
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.</Description>
               <Effectiveness>Defense in Depth</Effectiveness>
               <Effectiveness_Notes>This makes it easier to spot places in the code where data is being used that is unencrypted.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-40">
               <Intro_Text>This code writes a user's login information to a cookie so the user does not have to login again later.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function persistLogin($username, $password){<xhtml:div style="margin-left:10px;">$data = array("username" =&gt; $username, "password"=&gt; $password);<xhtml:br/>setcookie ("userdata", $data);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.</Body_Text>
               <Body_Text>Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-41">
               <Intro_Text>The following code attempts to establish a connection, read in a password, then store it to a buffer.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>server.sin_family = AF_INET; hp = gethostbyname(argv[1]);<xhtml:br/>if (hp==NULL) error("Unknown host");<xhtml:br/>memcpy( (char *)&amp;server.sin_addr,(char *)hp-&gt;h_addr,hp-&gt;h_length);<xhtml:br/>if (argc &lt; 3) port = 80;<xhtml:br/>else port = (unsigned short)atoi(argv[3]);<xhtml:br/>server.sin_port = htons(port);<xhtml:br/>if (connect(sock, (struct sockaddr *)&amp;server, sizeof server) &lt; 0) error("Connecting");<xhtml:br/>...<xhtml:br/>while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>write(dfd,password_buffer,n);<xhtml:br/>...<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-42">
               <Intro_Text>The following code attempts to establish a connection to a site to communicate sensitive information.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">URL u = new URL("http://www.secret.example.org/");<xhtml:br/>HttpURLConnection hu = (HttpURLConnection) u.openConnection();<xhtml:br/>hu.setRequestMethod("PUT");<xhtml:br/>hu.connect();<xhtml:br/>OutputStream os = hu.getOutputStream();<xhtml:br/>hu.disconnect();</xhtml:div>}<xhtml:br/>catch (IOException e) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>//...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-2272</Reference>
               <Description>password and username stored in cleartext in a cookie</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2272</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1466</Reference>
               <Description>password stored in cleartext in a file with insecure permissions</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1466</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0152</Reference>
               <Description>chat program disables SSL in some circumstances even when the user says to use SSL.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0152</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1603</Reference>
               <Description>Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0964</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6157</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6828</Reference>
               <Description>product stores a password in cleartext in memory</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1567</Reference>
               <Description>storage of a secret key in cleartext in a temporary file</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1567</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0174</Reference>
               <Description>SCADA product uses HTTP Basic Authentication, which is not encrypted</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5778</Reference>
               <Description>login credentials stored unencrypted in a registry key</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5778</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1949</Reference>
               <Description>Passwords transmitted in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1949</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4122</Reference>
               <Description>Chain: Use of HTTPS cookie without "secure" flag causes it to be transmitted across unencrypted HTTP.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4122</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3289</Reference>
               <Description>Product sends password hash in cleartext in violation of intended policy.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3289</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4390</Reference>
               <Description>Remote management feature sends sensitive information including passwords in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4390</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5626</Reference>
               <Description>Backup routine sends password in cleartext in email.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5626</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1852</Reference>
               <Description>Product transmits Blowfish encryption key in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0374</Reference>
               <Description>Printer sends configuration information, including administrative password, in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4961</Reference>
               <Description>Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4961</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4786</Reference>
               <Description>Product sends passwords in cleartext to a log server.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4786</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3140</Reference>
               <Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3140</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to encrypt data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>4</Entry_ID>
               <Entry_Name>Insufficient Transport Layer Protection</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC00-J</Entry_ID>
               <Entry_Name>Use SSLSocket rather than Socket for secure data exchange</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="157"/>
            <Related_Attack_Pattern CAPEC_ID="158"/>
            <Related_Attack_Pattern CAPEC_ID="204"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="37"/>
            <Related_Attack_Pattern CAPEC_ID="383"/>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
            <Related_Attack_Pattern CAPEC_ID="477"/>
            <Related_Attack_Pattern CAPEC_ID="609"/>
            <Related_Attack_Pattern CAPEC_ID="65"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 17: Failure to Protect Stored Data.&#34; Page 253"/>
            <Reference External_Reference_ID="REF-265"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Encryption&#34;, Page 43"/>
            <Reference External_Reference_ID="REF-267"/>
         </References>
         <Notes>
            <Note Type="Relationship">There is an overlapping relationship between insecure storage of sensitive information (CWE-922) and missing encryption of sensitive information (CWE-311). Encryption is often used to prevent an attacker from reading the sensitive data. However, encryption does not prevent the attacker from erasing or overwriting the data.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="312" Name="Cleartext Storage of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere.</Description>
         <Extended_Description>Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="922" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="922" View_ID="699"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>An attacker with access to the system could read sensitive information stored in cleartext.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-44">
               <Intro_Text>The following code excerpt stores a plaintext user account ID in a browser cookie.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>response.addCookie( new Cookie("userAccountID", acctID);</xhtml:div>
               </Example_Code>
               <Body_Text>Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-40">
               <Intro_Text>This code writes a user's login information to a cookie so the user does not have to login again later.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function persistLogin($username, $password){<xhtml:div style="margin-left:10px;">$data = array("username" =&gt; $username, "password"=&gt; $password);<xhtml:br/>setcookie ("userdata", $data);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code stores the user's username and password in plaintext in a cookie on the user's machine. This exposes the user's login information if their computer is compromised by an attacker. Even if the user's machine is not compromised, this weakness combined with cross-site scripting (CWE-79) could allow an attacker to remotely copy the cookie.</Body_Text>
               <Body_Text>Also note this example code also exhibits Plaintext Storage in a Cookie (CWE-315).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-41">
               <Intro_Text>The following code attempts to establish a connection, read in a password, then store it to a buffer.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>server.sin_family = AF_INET; hp = gethostbyname(argv[1]);<xhtml:br/>if (hp==NULL) error("Unknown host");<xhtml:br/>memcpy( (char *)&amp;server.sin_addr,(char *)hp-&gt;h_addr,hp-&gt;h_length);<xhtml:br/>if (argc &lt; 3) port = 80;<xhtml:br/>else port = (unsigned short)atoi(argv[3]);<xhtml:br/>server.sin_port = htons(port);<xhtml:br/>if (connect(sock, (struct sockaddr *)&amp;server, sizeof server) &lt; 0) error("Connecting");<xhtml:br/>...<xhtml:br/>while ((n=read(sock,buffer,BUFSIZE-1))!=-1) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>write(dfd,password_buffer,n);<xhtml:br/>...<xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While successful, the program does not encrypt the data before writing it to a buffer, possibly exposing it to unauthorized actors.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in plaintext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a plaintext username / password pair.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in plaintext.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:10px;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in plaintext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-2272</Reference>
               <Description>password and username stored in cleartext in a cookie</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2272</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1466</Reference>
               <Description>password stored in cleartext in a file with insecure permissions</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1466</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0152</Reference>
               <Description>chat program disables SSL in some circumstances even when the user says to use SSL.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0152</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-1603</Reference>
               <Description>Chain: product uses an incorrect public exponent when generating an RSA key, which effectively disables the encryption</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1603</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0964</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0964</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6157</Reference>
               <Description>storage of unencrypted passwords in a database</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6157</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-6828</Reference>
               <Description>product stores a password in cleartext in memory</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-6828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1567</Reference>
               <Description>storage of a secret key in cleartext in a temporary file</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1567</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0174</Reference>
               <Description>SCADA product uses HTTP Basic Authentication, which is not encrypted</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5778</Reference>
               <Description>login credentials stored unencrypted in a registry key</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5778</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1481</Reference>
               <Description>Plaintext credentials in world-readable file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1481</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1828</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2209</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2209</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1696</Reference>
               <Description>Decrypted copy of a message written to disk given a combination of options and when user replies to an encrypted message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1696</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2397</Reference>
               <Description>Plaintext storage of private key and passphrase in log file when user imports the key.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2397</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1800</Reference>
               <Description>Admin password in plaintext in a cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1800</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1537</Reference>
               <Description>Default configuration has cleartext usernames/passwords in cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1537</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1536</Reference>
               <Description>Usernames/passwords in cleartext in cookies.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1536</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2160</Reference>
               <Description>Authentication information stored in cleartext in a cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2160</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage of Sensitive Information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="37"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Encryption&#34;, Page 43"/>
            <Reference External_Reference_ID="REF-172"/>
         </References>
         <Notes>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="313" Name="Cleartext Storage in a File or on Disk" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The application stores sensitive information in cleartext in a file, or on disk.</Description>
         <Extended_Description>The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-43">
               <Intro_Text>The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext.</Intro_Text>
               <Body_Text>This Java example shows a properties file with a cleartext username / password pair.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i># Java Web App ResourceBundle properties file</xhtml:i>
                     <xhtml:br/>...<xhtml:br/>webapp.ldap.username=secretUsername<xhtml:br/>webapp.ldap.password=secretPassword<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext.</Body_Text>
               <Example_Code Nature="bad" Language="ASP.NET">
                  <xhtml:div>...<xhtml:br/>&lt;connectionStrings&gt;<xhtml:div style="margin-left:10px;">&lt;add name="ud_DEV" connectionString="connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;" providerName="System.Data.Odbc" /&gt;</xhtml:div>&lt;/connectionStrings&gt;<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information and avoid CWE-260 and CWE-13</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1481</Reference>
               <Description>Cleartext credentials in world-readable file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1481</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1828</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1828</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2209</Reference>
               <Description>Password in cleartext in config file.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2209</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1696</Reference>
               <Description>Decrypted copy of a message written to disk given a combination of options and when user replies to an encrypted message.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1696</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2397</Reference>
               <Description>Cleartext storage of private key and passphrase in log file when user imports the key.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2397</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage in File or on Disk</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="314" Name="Cleartext Storage in the Registry" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The application stores sensitive information in cleartext in the registry.</Description>
         <Extended_Description>Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-2227</Reference>
               <Description>Cleartext passwords in registry key.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2227</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage in Registry</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="37"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="315" Name="Cleartext Storage of Sensitive Information in a Cookie" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The application stores sensitive information in cleartext in a cookie.</Description>
         <Extended_Description>Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-44">
               <Intro_Text>The following code excerpt stores a plaintext user account ID in a browser cookie.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>response.addCookie( new Cookie("userAccountID", acctID);</xhtml:div>
               </Example_Code>
               <Body_Text>Because the account ID is in plaintext, the user's account information is exposed if their computer is compromised by an attacker.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1800</Reference>
               <Description>Admin password in cleartext in a cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1800</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1537</Reference>
               <Description>Default configuration has cleartext usernames/passwords in cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1537</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1536</Reference>
               <Description>Usernames/passwords in cleartext in cookies.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1536</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2160</Reference>
               <Description>Authentication information stored in cleartext in a cookie.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2160</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage in Cookie</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="37"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="74"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="316" Name="Cleartext Storage of Sensitive Information in Memory" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The application stores sensitive information in cleartext in memory.</Description>
         <Extended_Description>
            <xhtml:p>The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the application crashes, or if the programmer does not properly clear the memory before freeing it.</xhtml:p>
            <xhtml:p>It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Memory</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1517</Reference>
               <Description>Sensitive authentication information in cleartext in memory.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1517</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>BID:10155</Reference>
               <Description>Sensitive authentication information in cleartext in memory.</Description>
               <Link>http://www.securityfocus.com/bid/10155</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0984</Reference>
               <Description>Password protector leaves passwords in memory when window is minimized, even when "clear password when minimized" is set.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0984</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0291</Reference>
               <Description>SSH client does not clear credentials from memory.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0291</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>Memory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage in Memory</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">This could be a resultant weakness, e.g. if the compiler removes code that was intended to wipe memory.</Note>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="317" Name="Cleartext Storage of Sensitive Information in GUI" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The application stores sensitive information in cleartext within the GUI.</Description>
         <Extended_Description>An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Operating_System Class="Windows" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Memory</Impact>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1848</Reference>
               <Description>Unencrypted passwords stored in GUI dialog may allow local users to access the passwords.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1848</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage in GUI</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="318" Name="Cleartext Storage of Sensitive Information in Executable" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The application stores sensitive information in cleartext in an executable.</Description>
         <Extended_Description>Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="312" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2005-1794</Reference>
               <Description>Product stores RSA private key in a DLL and uses it to sign a certificate, allowing spoofing of servers and MITM attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1794</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1527</Reference>
               <Description>administration passwords in cleartext in executable</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1527</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Storage in Executable</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="37"/>
            <Related_Attack_Pattern CAPEC_ID="65"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Terminology">Different people use "cleartext" and "plaintext" to mean the same thing: the lack of encryption. However, within cryptography, these have more precise meanings. Plaintext is the information just before it is fed into a cryptographic algorithm, including already-encrypted text. Cleartext is any information that is unencrypted, although it might be in an encoded form that is not easily human-readable (such as base64 encoding).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="319" Name="Cleartext Transmission of Sensitive Information" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.</Description>
         <Extended_Description>Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="311" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
            <Introduction>
               <Phase>System Configuration</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Files or Directories</Impact>
               <Note>Anyone can read the information by gaining access to the channel being used for communication.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-11">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process, trigger the feature that sends the data, and look for the presence or absence of common cryptographic functions in the call tree. Monitor the network and determine if the data packets contain readable commands. Tools exist for detecting if certain encodings are in use. If the traffic contains high entropy, this might indicate the usage of encryption.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Encrypt the data with a reliable encryption scheme before transmitting.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Operation</Phase>
               <Description>Configure servers to use encrypted channels for communication, which may include SSL or other secure protocols.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-42">
               <Intro_Text>The following code attempts to establish a connection to a site to communicate sensitive information.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">URL u = new URL("http://www.secret.example.org/");<xhtml:br/>HttpURLConnection hu = (HttpURLConnection) u.openConnection();<xhtml:br/>hu.setRequestMethod("PUT");<xhtml:br/>hu.connect();<xhtml:br/>OutputStream os = hu.getOutputStream();<xhtml:br/>hu.disconnect();</xhtml:div>}<xhtml:br/>catch (IOException e) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>//...</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Though a connection is successfully made, the connection is unencrypted and it is possible that all sensitive data sent to or received from the server will be read by unintended actors.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1949</Reference>
               <Description>Passwords transmitted in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1949</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4122</Reference>
               <Description>Chain: Use of HTTPS cookie without "secure" flag causes it to be transmitted across unencrypted HTTP.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4122</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3289</Reference>
               <Description>Product sends password hash in cleartext in violation of intended policy.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3289</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4390</Reference>
               <Description>Remote management feature sends sensitive information including passwords in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4390</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5626</Reference>
               <Description>Backup routine sends password in cleartext in email.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5626</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1852</Reference>
               <Description>Product transmits Blowfish encryption key in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0374</Reference>
               <Description>Printer sends configuration information, including administrative password, in cleartext.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0374</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4961</Reference>
               <Description>Chain: cleartext transmission of the MD5 hash of password enables attacks against a server that is susceptible to replay (CWE-294).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4961</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4786</Reference>
               <Description>Product sends passwords in cleartext to a log server.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4786</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3140</Reference>
               <Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3140</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Plaintext Transmission of Sensitive Information</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SER02-J</Entry_ID>
               <Entry_Name>Sign then seal sensitive objects before sending them outside a trust boundary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="102"/>
            <Related_Attack_Pattern CAPEC_ID="383"/>
            <Related_Attack_Pattern CAPEC_ID="477"/>
            <Related_Attack_Pattern CAPEC_ID="65"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-271"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 9, &#34;Protecting Secret Data&#34; Page 299"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 22: Failing to Protect Network Traffic.&#34; Page 337"/>
            <Reference External_Reference_ID="REF-172"/>
         </References>
         
      </Weakness>
      <Weakness ID="321" Name="Use of Hard-coded Cryptographic Key" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="798" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="798" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Prevention schemes mirror that of hard-coded password storage.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-92">
               <Intro_Text>The following code examples attempt to verify a password using a hard-coded cryptographic key.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>int VerifyAdmin(char *password) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (strcmp(password,"68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>printf("Incorrect Password!\n");<xhtml:br/>return(0);</xhtml:div>
                           </xhtml:div>}<xhtml:br/>printf("Entering Diagnostic Mode...\n");<xhtml:br/>return(1);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public boolean VerifyAdmin(String password) {<xhtml:div style="margin-left:10px;">if (password.equals("68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:10px;">System.out.println("Entering Diagnostic Mode...");<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>System.out.println("Incorrect Password!");<xhtml:br/>return false;</xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="C#">
                  <xhtml:div>int VerifyAdmin(String password) {<xhtml:div style="margin-left:10px;">if (password.Equals("68af404b513073584c4b6f22b6c63e6b")) {<xhtml:div style="margin-left:10px;">Console.WriteLine("Entering Diagnostic Mode...");<xhtml:br/>return(1);</xhtml:div>}<xhtml:br/>Console.WriteLine("Incorrect Password!");<xhtml:br/>return(0);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The cryptographic key is within a hard-coded string value that is compared to the password. It is likely that an attacker will be able to read the key and compromise the system.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Use of hard-coded cryptographic key</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP33</Entry_ID>
               <Entry_Name>Hardcoded sensitive data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Other">The main difference between the use of hard-coded passwords and the use of hard-coded cryptographic keys is the false sense of security that the former conveys. Many people believe that simply hashing a hard-coded password before storage will protect the information from malicious users. However, many hashes are reversible (or at least vulnerable to brute force attacks) -- and further, many authentication protocols simply request the hash itself, making it no better than a password.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="322" Name="Key Exchange without Entity Authentication" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software performs a key exchange with an actor without verifying the identity of that actor.</Description>
         <Extended_Description>Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable a set of "man-in-the-middle" attacks. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="295" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>No authentication takes place in this process, bypassing an assumed protection of encryption.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The encrypted communication between a user and a trusted host may be subject to a "man-in-the-middle" sniffing attack.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that proper authentication is included in the system design.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Many systems have used Diffie-Hellman key exchange without authenticating the entities exchanging keys, leading to man-in-the-middle attacks. Many people using SSL/TLS skip the authentication (often unknowingly).</Intro_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Key exchange without entity authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 23: Improper Use of PKI, Especially SSL.&#34; Page 347"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Untrustworthy Credentials&#34;, Page 37"/>
         </References>
         
      </Weakness>
      <Weakness ID="323" Name="Reusing a Nonce, Key Pair in Encryption" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>Nonces should be used for the present occasion and only once.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="344" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Nonces are often bundled with a key in a communication exchange to produce a new session key for each exchange.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Potentially a replay attack, in which an attacker could send the same data twice, could be crafted if nonces are allowed to be reused. This could allow a user to send a message which masquerades as a valid message from a valid user.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Refuse to reuse nonce values.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code takes a password, concatenates it with a nonce, then encrypts it before sending over a network:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>void encryptAndSendPassword(char *password){<xhtml:div style="margin-left:10px;">char *nonce = "bad";<xhtml:br/>...<xhtml:br/>char *data = (unsigned char*)malloc(20);<xhtml:br/>int para_size = strlen(nonce) + strlen(password);<xhtml:br/>char *paragraph = (char*)malloc(para_size);<xhtml:br/>SHA1((const unsigned char*)paragraph,parsize,(unsigned char*)data);<xhtml:br/>sendEncryptedData(data)</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the nonce used is always the same, an attacker can impersonate a trusted party by intercepting and resending the encrypted password. This attack avoids the need to learn the unencrypted password.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code sends a command to a remote server, using an encrypted password and nonce to prove the command is from a trusted party:</Intro_Text>
               <Example_Code Nature="bad" Language="C++">
                  <xhtml:div>String command = new String("some command to execute");<xhtml:br/>MessageDigest nonce = MessageDigest.getInstance("SHA");<xhtml:br/>nonce.update(String.valueOf("bad nonce"));<xhtml:br/>byte[] nonce = nonce.digest();<xhtml:br/>MessageDigest password = MessageDigest.getInstance("SHA");<xhtml:br/>password.update(nonce + "secretPassword");<xhtml:br/>byte[] digest = password.digest();<xhtml:br/>sendCommand(digest, command)</xhtml:div>
               </Example_Code>
               <Body_Text>Once again the nonce used is always the same. An attacker may be able to replay previous legitimate commands or execute new arbitrary commands.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Reusing a nonce, key pair in encryption</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="324" Name="Use of a Key Past its Expiration Date" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.</Description>
         <Extended_Description>While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="672" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="298" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code attempts to verify that a certificate is valid.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer_certificate(ssl)) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>foo=SSL_get_verify_result(ssl);<xhtml:br/>if ((X509_V_OK==foo) || (X509_V_ERRCERT_NOT_YET_VALID==foo))<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>//do stuff</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The code checks if the certificate is not yet valid, but it fails to check if a certificate is past its expiration date, thus treating expired certificates as valid.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Using a key past its expiration date</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 23: Improper Use of PKI, Especially SSL.&#34; Page 347"/>
         </References>
         
      </Weakness>
      <Weakness ID="325" Name="Missing Required Cryptographic Step" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The software does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by that algorithm.</Description>
         <Extended_Description>Cryptographic implementations should follow the algorithms that define them exactly, otherwise encryption can be weaker than expected.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="573" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="358" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>
                  <xhtml:p>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</xhtml:p>
                  <xhtml:p>Developers sometimes omit certain "expensive" (resource-intensive) steps in order to improve performance, especially in devices with limited memory or CPU cycles. This could be done under a mistaken impression that the step is unnecessary for preserving security. Alternately, the developer might adopt a threat model that is inconsistent with that of its consumers by accepting a risk for which the remaining protection seems "good enough."</xhtml:p>
               </Note>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Requirements</Phase>
               <Note>
                  <xhtml:p>This issue can be introduced when the requirements for the algorithm are not clearly stated.</xhtml:p>
               </Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If the cryptographic algorithm is used for authentication and authorization, then an attacker could gain unauthorized access to the system.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>Sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.</Note>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1585</Reference>
               <Description>Missing challenge-response step allows authentication bypass using public key.</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1585</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Cryptography</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Missing Required Cryptographic Step</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="68"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">Overlaps incomplete/missing security check.</Note>
            <Note Type="Relationship">Can be resultant.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="326" Name="Inadequate Encryption Strength" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.</Description>
         <Extended_Description>A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Note>An attacker may be able to decrypt the data using brute force attacks.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use a cryptographic algorithm that is currently considered to be strong by experts in the field.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-1546</Reference>
               <Description>Weak encryption</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1546</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2172</Reference>
               <Description>Weak encryption (chosen plaintext attack)</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2172</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1682</Reference>
               <Description>Weak encryption</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1682</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1697</Reference>
               <Description>Weak encryption produces same ciphertext from the same plaintext blocks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1697</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1739</Reference>
               <Description>Weak encryption</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1739</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2281</Reference>
               <Description>Weak encryption scheme</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2281</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1872</Reference>
               <Description>Weak encryption (XOR)</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1872</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1910</Reference>
               <Description>Weak encryption (reversible algorithm).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1910</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1946</Reference>
               <Description>Weak encryption (one-to-one mapping).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1946</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1975</Reference>
               <Description>Encryption error uses fixed salt, simplifying brute force / dictionary attacks (overlaps randomness).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1975</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Weak Encryption</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Cryptographic Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A9</Entry_ID>
               <Entry_Name>Insecure Communications</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="112"/>
            <Related_Attack_Pattern CAPEC_ID="192"/>
            <Related_Attack_Pattern CAPEC_ID="20"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Cryptographic Foibles&#34; Page 259"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 21: Using the Wrong Cryptography.&#34; Page 315"/>
         </References>
         <Notes>
            <Note Type="Maintenance">A variety of encryption algorithms exist, with various weaknesses. This category could probably be split into smaller sub-categories.</Note>
            <Note Type="Maintenance">Relationships between CWE-310, CWE-326, and CWE-327 and all their children need to be reviewed and reorganized.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="327" Name="Use of a Broken or Risky Cryptographic Algorithm" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information.</Description>
         <Extended_Description>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="311" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>
               <xhtml:p>Cryptographic algorithms are the methods by which data is scrambled. There are a small number of well-understood and heavily studied algorithms that should be used by most applications. It is quite difficult to produce a secure algorithm, and even high profile algorithms by accomplished cryptographic experts have been broken.</xhtml:p>
               <xhtml:p>Since the state of cryptography advances so rapidly, it is common for an algorithm to be considered "unsafe" even if it was once thought to be strong. This can happen when new attacks against the algorithm are discovered, or if computing power increases so much that the cryptographic algorithm no longer provides the amount of protection that was originally thought.</xhtml:p>
            </Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>The confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>The integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.</Note>
            </Consequence>
            <Consequence>
               <Scope>Accountability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Impact>Hide Activities</Impact>
               <Note>If the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Automated Analysis</Method>
               <Description>Automated methods may be useful for recognizing commonly-used libraries or features that have become obsolete.</Description>
               <Effectiveness>Moderate</Effectiveness>
               <Effectiveness_Notes>False negatives may occur if the tool is not aware of the cryptographic libraries in use, or if custom cryptography is being used.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Analysis</Method>
               <Description>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary / Bytecode simple extractor – strings, ELF readers, etc.</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                           <xhtml:li>Automated Monitored Execution</xhtml:li>
                           <xhtml:li>Monitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Configuration Checker</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-24">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>When there is a need to store or transmit sensitive data, use strong, up-to-date cryptographic algorithms to encrypt that data. Select a well-vetted algorithm that is currently considered to be strong by experts in the field, and use well-tested implementations. As with all cryptographic mechanisms, the source code should be available for analysis.</xhtml:p>
                  <xhtml:p>For example, US government systems require FIPS 140-2 certification.</xhtml:p>
                  <xhtml:p>Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. Reverse engineering techniques are mature. If the algorithm can be compromised if attackers find out how it works, then it is especially weak.</xhtml:p>
                  <xhtml:p>Periodically ensure that the cryptography has not become obsolete. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong. [REF-267]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Design the software so that one cryptographic algorithm can be replaced with another. This will make it easier to upgrade to stronger algorithms.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Carefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Industry-standard implementations will save development time and may be more likely to avoid errors that can occur during implementation of cryptographic algorithms. Consider the ESAPI Encryption feature.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-25">
               <Phase>Implementation</Phase>
               <Phase>Architecture and Design</Phase>
               <Description>When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>These code examples use the Data Encryption Standard (DES).</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>EVP_des_ecb();</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Cipher des=Cipher.getInstance("DES...");<xhtml:br/>des.initEncrypt(key2);</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function encryptPassword($password){<xhtml:div style="margin-left:10px;">$iv_size = mcrypt_get_iv_size(MCRYPT_DES, MCRYPT_MODE_ECB);<xhtml:br/>$iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);<xhtml:br/>$key = "This is a password encryption key";<xhtml:br/>$encryptedPassword = mcrypt_encrypt(MCRYPT_DES, $key, $password, MCRYPT_MODE_ECB, $iv);<xhtml:br/>return $encryptedPassword;</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Once considered a strong algorithm, DES now regarded as insufficient for many applications. It has been replaced by Advanced Encryption Standard (AES).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-3775</Reference>
               <Description>Product uses "ROT-25" to obfuscate the password in the registry.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3775</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-4150</Reference>
               <Description>product only uses "XOR" to obfuscate sensitive data</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-4150</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-5460</Reference>
               <Description>product only uses "XOR" and a fixed key to obfuscate sensitive data</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-5460</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-4860</Reference>
               <Description>Product substitutes characters with other characters in a fixed way, and also leaves certain input characters unchanged.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-4860</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-2058</Reference>
               <Description>Attackers can infer private IP addresses by dividing each octet by the MD5 hash of '20'.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-2058</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3188</Reference>
               <Description>Product uses DES when MD5 has been specified in the configuration, resulting in weaker-than-expected password hashes.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3188</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2946</Reference>
               <Description>Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2946</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-6013</Reference>
               <Description>Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-6013</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Using a broken or risky cryptographic algorithm</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A8</Entry_ID>
               <Entry_Name>Insecure Storage</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC30-C</Entry_ID>
               <Entry_Name>Do not use the rand() function for generating pseudorandom numbers</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC32-C</Entry_ID>
               <Entry_Name>Properly seed pseudorandom number generators</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-327</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="20"/>
            <Related_Attack_Pattern CAPEC_ID="459"/>
            <Related_Attack_Pattern CAPEC_ID="473"/>
            <Related_Attack_Pattern CAPEC_ID="475"/>
            <Related_Attack_Pattern CAPEC_ID="608"/>
            <Related_Attack_Pattern CAPEC_ID="614"/>
            <Related_Attack_Pattern CAPEC_ID="97"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-280"/>
            <Reference External_Reference_ID="REF-281"/>
            <Reference External_Reference_ID="REF-282"/>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-284"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Cryptographic Foibles&#34; Page 259"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 21: Using the Wrong Cryptography.&#34; Page 315"/>
            <Reference External_Reference_ID="REF-287"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Insufficient or Obsolete Encryption&#34;, Page 44"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-327"/>
         </References>
         <Notes>
            <Note Type="Maintenance">Relationships between CWE-310, CWE-326, and CWE-327 and all their children need to be reviewed and reorganized.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="328" Name="Reversible One-Way Hash" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques.</Description>
         <Extended_Description>This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="326" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="327" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-51">
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations ("stretching") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.</xhtml:p>
                  <xhtml:p>Some hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.</xhtml:p>
                  <xhtml:p>Note that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-101">
               <Intro_Text>In both of these examples, a user is logged in if their given password matches a stored password:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>unsigned char *check_passwd(char *plaintext) {<xhtml:div style="margin-left:10px;">ctext = simple_digest("sha1",plaintext,strlen(plaintext), ... );<xhtml:br/>
                        <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                        <xhtml:br/>if (equal(ctext, secret_password())) {<xhtml:div style="margin-left:10px;">login_user();</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String plainText = new String(plainTextIn);<xhtml:br/>MessageDigest encer = MessageDigest.getInstance("SHA");<xhtml:br/>encer.update(plainTextIn);<xhtml:br/>byte[] digest = password.digest();<xhtml:br/>
                     <xhtml:i>//Login if hash matches stored hash</xhtml:i>
                     <xhtml:br/>if (equal(digest,secret_password())) {<xhtml:div style="margin-left:10px;">login_user();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code uses the SHA-1 hash on user passwords, but the SHA-1 algorithm is no longer considered secure. Note this code also exhibits CWE-759 (Use of a One-Way Hash without a Salt).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2006-4068</Reference>
               <Description>Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4068</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Reversible One-Way Hash</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="461"/>
            <Related_Attack_Pattern CAPEC_ID="68"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-289"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 2, &#34;Common Vulnerabilities of Integrity&#34;, Page 47"/>
            <Reference External_Reference_ID="REF-291"/>
            <Reference External_Reference_ID="REF-292"/>
            <Reference External_Reference_ID="REF-293" Section="5.2 PBKDF2"/>
            <Reference External_Reference_ID="REF-294"/>
            <Reference External_Reference_ID="REF-295"/>
            <Reference External_Reference_ID="REF-296"/>
            <Reference External_Reference_ID="REF-297"/>
            <Reference External_Reference_ID="REF-298"/>
         </References>
         
      </Weakness>
      <Weakness ID="330" Name="Use of Insufficiently Random Values" Abstraction="Class" Structure="Simple" Status="Usable">
         <Description>The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers.</Description>
         <Extended_Description>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.</Extended_Description>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>Computers are deterministic machines, and as such are unable to produce true randomness. Pseudo-Random Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>When a protection mechanism relies on random values to restrict access to a sensitive resource, such as a session ID or a seed for generating a cryptographic key, then the resource being protected could be accessed by guessing the ID or key.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Other</Impact>
               <Note>If software relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>When an authorization or authentication mechanism relies on random values to restrict access to restricted functionality, such as a session ID or a seed for generating a cryptographic key, then an attacker may access the restricted functionality by guessing the ID or key.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-11.4">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and look for library functions that indicate when randomness is being used. Run the process multiple times to see if the seed changes. Look for accesses of devices or equivalent resources that are commonly used for strong (or weak) randomness, such as /dev/urandom on Linux. Look for library or system calls that access predictable information such as process IDs and system time.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Man-in-the-middle attack tool</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use a well-vetted algorithm that is currently considered to be strong by experts in the field, and select well-tested implementations with adequate length seeds.</xhtml:p>
                  <xhtml:p>In general, if a pseudo-random number generator is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts.</xhtml:p>
                  <xhtml:p>Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-45">
               <Intro_Text>This code generates a unique random identifier for a user's session.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function generateSessionID($userID){<xhtml:div style="margin-left:10px;">srand($userID);<xhtml:br/>return rand();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.</Body_Text>
               <Body_Text>This example also exhibits a Small Seed Space (CWE-339).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-46">
               <Intro_Text>The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String GenerateReceiptURL(String baseUrl) {<xhtml:div style="margin-left:10px;">Random ranGen = new Random();<xhtml:br/>ranGen.setSeed((new Date()).getTime());<xhtml:br/>return(baseUrl + ranGen.nextInt(400000000) + ".html");</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code uses the Random.nextInt() function to generate "unique" identifiers for the receipt pages it generates. Because Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-3278</Reference>
               <Description>Crypto product uses rand() library function to generate a recovery key, making it easier to conduct brute force attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3278</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3238</Reference>
               <Description>Random number generator can repeatedly generate the same value.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3238</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2367</Reference>
               <Description>Web application generates predictable session IDs, allowing session hijacking.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2367</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2158</Reference>
               <Description>Password recovery utility generates a relatively small number of random passwords, simplifying brute force attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2158</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0255</Reference>
               <Description>Cryptographic key created with a seed based on the system time.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0255</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-5162</Reference>
               <Description>Kernel function does not have a good entropy source just after boot.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5162</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4905</Reference>
               <Description>Blogging software uses a hard-coded salt when calculating a password hash.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4905</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-4929</Reference>
               <Description>Bulletin board application uses insufficiently random names for uploaded files, allowing other users to access private files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4929</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3612</Reference>
               <Description>Handheld device uses predictable TCP sequence numbers, allowing spoofing or hijacking of TCP connections.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3612</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2433</Reference>
               <Description>Web management console generates session IDs based on the login time, making it easier to conduct session hijacking.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2433</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0166</Reference>
               <Description>SSL library uses a weak random number generator that only generates 65,536 unique keys.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0166</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2108</Reference>
               <Description>Chain: insufficient precision causes extra zero bits to be assigned, reducing entropy for an API function that generates random numbers.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2108</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2020</Reference>
               <Description>CAPTCHA implementation does not produce enough different images, allowing bypass using a database of all possible checksums.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2020</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0087</Reference>
               <Description>DNS client uses predictable DNS transaction IDs, allowing DNS spoofing.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0087</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0141</Reference>
               <Description>Application generates passwords that are based on the time of day.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0141</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Cryptography</Functional_Area>
            <Functional_Area>Authentication</Functional_Area>
            <Functional_Area>Session Management</Functional_Area>
         </Functional_Areas>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Randomness and Predictability</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Insecure Randomness</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>CON33-C</Entry_ID>
               <Entry_Name>Avoid race conditions when using library functions</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC30-C</Entry_ID>
               <Entry_Name>Do not use the rand() function for generating pseudorandom numbers</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC32-C</Entry_ID>
               <Entry_Name>Properly seed pseudorandom number generators</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>11</Entry_ID>
               <Entry_Name>Brute Force</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>18</Entry_ID>
               <Entry_Name>Credential/Session Prediction</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="112"/>
            <Related_Attack_Pattern CAPEC_ID="485"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-207"/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 8, &#34;Using Poor Random Numbers&#34; Page 259"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
         <Notes>
            <Note Type="Relationship">This can be primary to many other weaknesses such as cryptographic errors, authentication errors, symlink following, information leaks, and others.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="331" Name="Insufficient Entropy" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Other</Impact>
               <Note>An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-45">
               <Intro_Text>This code generates a unique random identifier for a user's session.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function generateSessionID($userID){<xhtml:div style="margin-left:10px;">srand($userID);<xhtml:br/>return rand();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.</Body_Text>
               <Body_Text>This example also exhibits a Small Seed Space (CWE-339).</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-46">
               <Intro_Text>The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String GenerateReceiptURL(String baseUrl) {<xhtml:div style="margin-left:10px;">Random ranGen = new Random();<xhtml:br/>ranGen.setSeed((new Date()).getTime());<xhtml:br/>return(baseUrl + ranGen.nextInt(400000000) + ".html");</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code uses the Random.nextInt() function to generate "unique" identifiers for the receipt pages it generates. Because Random.nextInt() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-0950</Reference>
               <Description>Insufficiently random data used to generate session tokens using C rand(). Also, for certificate/key generation, uses a source that does not block when entropy is low.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0950</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Insufficient Entropy</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>11</Entry_ID>
               <Entry_Name>Brute Force</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC32-C</Entry_ID>
               <Entry_Name>Properly seed pseudorandom number generators</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="59"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-207"/>
         </References>
         
      </Weakness>
      <Weakness ID="332" Name="Insufficient Entropy in PRNG" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="331" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="331" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>If a pseudo-random number generator is using a limited entropy source which runs out (if the generator fails closed), the program may pause or crash.</Note>
            </Consequence>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Other</Impact>
               <Note>If a PRNG is using a limited entropy source which runs out, and the generator fails open, the generator could produce predictable random numbers. Potentially a weak source of random numbers could weaken the encryption method used for authentication of users.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Consider a PRNG that re-seeds itself as needed from high-quality pseudo-random output, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>When deciding which PRNG to use, look at its sources of entropy. Depending on what your security needs are, you may need to use a random number generator that always uses strong random data -- i.e., a random number generator that attempts to be strong but will fail in a weak way or will always provide some middle ground of protection through techniques like re-seeding. Generally, something that always provides a predictable amount of strength is preferable.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Insufficient entropy in PRNG</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-267"/>
         </References>
         
      </Weakness>
      <Weakness ID="333" Name="Improper Handling of Insufficient Entropy in TRNG" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.</Description>
         <Extended_Description>The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="331" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="331" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Low</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>A program may crash or block if it runs out of random numbers.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This code uses a TRNG to generate a unique session id for new connections to a server:</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>while (1){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (haveNewConnection()){<xhtml:div style="margin-left:10px;">if (hwRandom()){<xhtml:div style="margin-left:10px;">int sessionID = hwRandom();<xhtml:br/>createNewConnection(sessionID);</xhtml:div>} } }</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>This code does not attempt to limit the number of new connections or make sure the TRNG can successfully generate a new random number. An attacker may be able to create many new connections and exhaust the entropy of the TRNG. The TRNG may then block and cause the program to crash or hang.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure of TRNG</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="334" Name="Small Space of Random Values" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Other</Impact>
               <Note>An attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-47">
               <Intro_Text>The following XML example code is a deployment descriptor for a Java web application deployed on a Sun Java Application Server. This deployment descriptor includes a session configuration property for configuring the session ID length.</Intro_Text>
               <Example_Code Nature="bad" Language="XML">
                  <xhtml:div>&lt;sun-web-app&gt;<xhtml:div style="margin-left:10px;">
                        <xhtml:div>...<xhtml:br/>&lt;session-config&gt;<xhtml:div style="margin-left:10px;">
                              <xhtml:div>&lt;session-properties&gt;<xhtml:div style="margin-left:10px;">&lt;property name="idLengthBytes" value="8"&gt;<xhtml:div style="margin-left:10px;">&lt;description&gt;The number of bytes in this web module's session ID.&lt;/description&gt;</xhtml:div>&lt;/property&gt;</xhtml:div>&lt;/session-properties&gt;</xhtml:div>
                           </xhtml:div>&lt;/session-config&gt;<xhtml:br/>...</xhtml:div>
                     </xhtml:div>&lt;/sun-web-app&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>This deployment descriptor has set the session ID length for this Java web application to 8 bytes (or 64 bits). The session ID length for Java web applications should be set to 16 bytes (128 bits) to prevent attackers from guessing and/or stealing a session ID and taking over a user's session.</Body_Text>
               <Body_Text>Note for most application servers including the Sun Java Application Server the session ID length is by default set to 128 bits and should not be changed. And for many application servers the session ID length cannot be changed from this default setting. Check your application server documentation for the session ID length default setting and configuration options to ensure that the session ID length is set to 128 bits.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0583</Reference>
               <Description>Product uses 5 alphanumeric characters for filenames of expense claim reports, stored under web root.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0583</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0903</Reference>
               <Description>Product uses small number of random numbers for a code to approve an action, and also uses predictable new user IDs, allowing attackers to hijack new accounts.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0903</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1230</Reference>
               <Description>SYN cookies implementation only uses 32-bit keys, making it easier to brute force ISN.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1230</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-0230</Reference>
               <Description>Complex predictability / randomness (reduced space).</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0230</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Small Space of Random Values</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
         
      </Weakness>
      <Weakness ID="335" Name="Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software uses a Pseudo-Random Number Generator (PRNG) that does not correctly manage seeds.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Other</Impact>
               <Note>if a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.</Note>
            </Consequence>
         </Common_Consequences>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>PRNG Seed Error</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
         
      </Weakness>
      <Weakness ID="336" Name="Same Seed in Pseudo-Random Number Generator (PRNG)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.</Description>
         <Extended_Description>If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="335" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="335" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Scope>Access Control</Scope>
               <Impact>Other</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code uses a statistical PRNG to generate account IDs.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>private static final long SEED = 1234567890;<xhtml:br/>public int generateAccountID() {<xhtml:div style="margin-left:10px;">Random random = new Random(SEED);<xhtml:br/>return random.nextInt();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the program uses the same seed value for every invocation of the PRNG, its values are predictable, making the system vulnerable to attack.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Same Seed in PRNG</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-267"/>
         </References>
         
      </Weakness>
      <Weakness ID="337" Name="Predictable Seed in Pseudo-Random Number Generator (PRNG)" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.</Description>
         <Extended_Description>The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numnbers will be generated by the PRNG.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="335" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="335" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Description>Use non-predictable inputs for seed generation.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-50">
               <Phase>Implementation</Phase>
               <Description>Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-102">
               <Intro_Text>Both of these examples use a statistical PRNG seeded with the current value of the system clock to generate a random number:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Random random = new Random(System.currentTimeMillis());<xhtml:br/>int accountID = random.nextInt();</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>srand(time());<xhtml:br/>int randNum = rand();</xhtml:div>
               </Example_Code>
               <Body_Text>An attacker can easily predict the seed used by these PRNGs, and so also predict the stream of random numbers generated. Note these examples also exhibit CWE-338 (Use of Cryptographically Weak PRNG).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Predictable Seed in PRNG</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>MSC02-J</Entry_ID>
               <Entry_Name>Generate strong random numbers</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
         
      </Weakness>
      <Weakness ID="338" Name="Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.</Description>
         <Extended_Description>
            <xhtml:p>When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks.</xhtml:p>
            <xhtml:p>Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Note>If a PRNG is used for authentication and authorization, such as a session ID or a seed for generating a cryptographic key, then an attacker may be able to easily guess the ID or cryptographic key and gain access to restricted functionality.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-102">
               <Intro_Text>Both of these examples use a statistical PRNG to generate a random number:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>Random random = new Random(System.currentTimeMillis());<xhtml:br/>int accountID = random.nextInt();</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>srand(time());<xhtml:br/>int randNum = rand();</xhtml:div>
               </Example_Code>
               <Body_Text>The random number functions used in these examples, rand() and Random.nextInt(), are not considered cryptographically strong. An attacker may be able to predict the random numbers generated by these functions. Note that these example also exhibit CWE-337 (Predictable Seed in PRNG).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2009-3278</Reference>
               <Description>Crypto product uses rand() library function to generate a recovery key, making it easier to conduct brute force attacks.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3278</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3238</Reference>
               <Description>Random number generator can repeatedly generate the same value.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3238</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-2367</Reference>
               <Description>Web application generates predictable session IDs, allowing session hijacking.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-2367</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-0166</Reference>
               <Description>SSL library uses a weak random number generator that only generates 65,536 unique keys.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0166</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Non-cryptographic PRNG</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>MSC30-C</Entry_ID>
               <Entry_Name>Do not use the rand() function for generating pseudorandom numbers</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
         
      </Weakness>
      <Weakness ID="339" Name="Small Seed Space in PRNG" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A PRNG uses a relatively small space of seeds.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="335" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="335" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="341" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a "random enough" number.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Small Seed Space in PRNG</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-267"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry overlaps predictable from observable state (CWE-341).</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="341" Name="Predictable from Observable State" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="330" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Note>This weakness could be exploited by an attacker in a number ways depending on the context. If a predictable number is used to generate IDs or keys that are used within protection mechanisms, then an attacker could gain unauthorized access to the system. If predictable filenames are used for storing sensitive information, then an attacker might gain access to the system and may be able to gain access to the information in the file.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Increase the entropy used to seed a PRNG.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-2">
               <Phase>Architecture and Design</Phase>
               <Phase>Requirements</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C ("Approved Random Number Generators").</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-50">
               <Phase>Implementation</Phase>
               <Description>Use a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-45">
               <Intro_Text>This code generates a unique random identifier for a user's session.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>function generateSessionID($userID){<xhtml:div style="margin-left:10px;">srand($userID);<xhtml:br/>return rand();</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>Because the seed for the PRNG is always the user's ID, the session ID will always be the same. An attacker could thus predict any user's session ID and potentially hijack the session.</Body_Text>
               <Body_Text>This example also exhibits a Small Seed Space (CWE-339).</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0389</Reference>
               <Description>Mail server stores private mail messages with predictable filenames in a world-executable directory, which allows local users to read private mailing list archives.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0389</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1141</Reference>
               <Description>PRNG allows attackers to use the output of small PRNG requests to determine the internal state information, which could be used by attackers to predict future pseudo-random numbers.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1141</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0335</Reference>
               <Description>DNS resolver library uses predictable IDs, which allows a local attacker to spoof DNS query results.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0335</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1636</Reference>
               <Description>MFV. predictable filename and insecure permissions allows file modification to execute SQL queries.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1636</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Predictable from Observable State</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 20: Weak Random Numbers.&#34; Page 299"/>
         </References>
         
      </Weakness>
      <Weakness ID="345" Name="Insufficient Verification of Data Authenticity" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="693" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Insufficient Verification of Data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>12</Entry_ID>
               <Entry_Name>Content Spoofing</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="111"/>
            <Related_Attack_Pattern CAPEC_ID="141"/>
            <Related_Attack_Pattern CAPEC_ID="142"/>
            <Related_Attack_Pattern CAPEC_ID="148"/>
            <Related_Attack_Pattern CAPEC_ID="218"/>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 15: Not Updating Easily.&#34; Page 231"/>
         </References>
         <Notes>
            <Note Type="Relationship">"origin validation" could fall under this.</Note>
            <Note Type="Maintenance">The specific ways in which the origin is not properly identified should be laid out as separate weaknesses. In some sense, this is more like a category.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="346" Name="Origin Validation Error" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not properly verify that the source of data or communication is valid.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="284" View_ID="699"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Other</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Varies by Context</Impact>
               <Note>An attacker can access any functionality that is inadvertently accessible to the source.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-112">
               <Intro_Text>This Android application will remove a user account when it receives an intent to do so:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>IntentFilter filter = new IntentFilter("com.example.RemoveUser");<xhtml:br/>MyReceiver receiver = new MyReceiver();<xhtml:br/>registerReceiver(receiver, filter);<xhtml:br/>
                     <xhtml:br/>public class DeleteReceiver extends BroadcastReceiver {<xhtml:div style="margin-left:10px;">@Override<xhtml:br/>public void onReceive(Context context, Intent intent) {<xhtml:div style="margin-left:10px;">int userID = intent.getIntExtra("userID");<xhtml:br/>destroyUserData(userID);</xhtml:div>}</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create a whitelist of trusted applications using the manifest.xml file.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-109">
               <Intro_Text>These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// Android</xhtml:i>
                     <xhtml:br/>@Override<xhtml:br/>public boolean shouldOverrideUrlLoading(WebView view, String url){<xhtml:div style="margin-left:10px;">
                        <xhtml:div>if (url.substring(0,14).equalsIgnoreCase("examplescheme:")){<xhtml:div style="margin-left:10px;">if(url.substring(14,25).equalsIgnoreCase("getUserInfo")){<xhtml:div style="margin-left:10px;">writeDataToView(view, UserData);<xhtml:br/>return false;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:10px;">return true;</xhtml:div>}</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Objective-C">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// iOS</xhtml:i>
                     <xhtml:br/>-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                        <xhtml:div>NSURL *URL = [exRequest URL];<xhtml:br/>if ([[URL scheme] isEqualToString:@"exampleScheme"])<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                              <xhtml:div>NSString *functionString = [URL resourceSpecifier];<xhtml:br/>if ([functionString hasPrefix:@"specialFunction"])<xhtml:br/>{<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:i>// Make data available back in webview.</xhtml:i>
                                       <xhtml:br/>UIWebView *webView = [self writeDataToView:[URL query]];</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>return NO;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>return YES;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>A call into native code can then be initiated by passing parameters within the URL:</Body_Text>
               <Example_Code Nature="attack" Language="JavaScript">
                  <xhtml:div>window.location = examplescheme://method?parameter=value</xhtml:div>
               </Example_Code>
               <Body_Text>Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2000-1218</Reference>
               <Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1218</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0877</Reference>
               <Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0877</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1452</Reference>
               <Description>DNS server caches glue records received from non-delegated name servers</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1452</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2188</Reference>
               <Description>user ID obtained from untrusted source (URL)</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2188</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0174</Reference>
               <Description>LDAP service does not verify if a particular attribute was set by the LDAP server</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0174</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-1549</Reference>
               <Description>product does not sufficiently distinguish external HTML from internal, potentially dangerous HTML, allowing bypass using special strings in the page title. Overlaps special elements.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1549</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0981</Reference>
               <Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0981</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Origin Validation Error</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="111"/>
            <Related_Attack_Pattern CAPEC_ID="141"/>
            <Related_Attack_Pattern CAPEC_ID="142"/>
            <Related_Attack_Pattern CAPEC_ID="160"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="384"/>
            <Related_Attack_Pattern CAPEC_ID="385"/>
            <Related_Attack_Pattern CAPEC_ID="386"/>
            <Related_Attack_Pattern CAPEC_ID="387"/>
            <Related_Attack_Pattern CAPEC_ID="388"/>
            <Related_Attack_Pattern CAPEC_ID="510"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
            <Related_Attack_Pattern CAPEC_ID="76"/>
            <Related_Attack_Pattern CAPEC_ID="89"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-324"/>
         </References>
         <Notes>
            <Note Type="Maintenance">This entry has some significant overlap with other CWE entries and may need some clarification. See terminology notes.</Note>
            <Note Type="Terminology">The "Origin Validation Error" term was used by Taimur Aslam in his August 1995 thesis. Although not formally defined, an issue is considered to be an origin validation error if either (1) "an object [accepts] input from an unauthorized subject," or (2) "the system [fails] to properly or completely authenticate a subject." A later section says that an origin validation error can occur when the system (1) "does not properly authenticate a user or process" or (2) "does not properly authenticate the shared data or libraries." The only example provided in the thesis (covered by OSVDB:57615) involves a setuid program running command-line arguments without dropping privileges. So, this definition (and its examples in the thesis) effectively cover other weaknesses such as CWE-287 (Improper Authentication), CWE-285 (Improper Authorization), and CWE-250 (Execution with Unnecessary Privileges). There appears to be little usage of this term today, except in the SecurityFocus vulnerability database, where the term is used for a variety of issues, including web-browser problems that allow violation of the Same Origin Policy and improper validation of the source of an incoming message.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="347" Name="Improper Verification of Cryptographic Signature" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not verify, or incorrectly verifies, the cryptographic signature for data.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="699"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>An attacker could gain access to sensitive data and possibly execute unauthorized code.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following code, a JarFile object is created from a downloaded file.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>File f = new File(downloadedFilePath);<xhtml:br/>JarFile jf = new JarFile(f);</xhtml:div>
               </Example_Code>
               <Body_Text>The JAR file that was potentially downloaded from an untrusted source is created without verifying the signature (if present). An alternate constructor that accepts a boolean verify parameter should be used instead.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-1796</Reference>
               <Description>Does not properly verify signatures for "trusted" entities.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1796</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2181</Reference>
               <Description>Insufficient verification allows spoofing.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2181</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2182</Reference>
               <Description>Insufficient verification allows spoofing.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2182</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1706</Reference>
               <Description>Accepts a configuration file without a Message Integrity Check (MIC) signature.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1706</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Improperly Verified Signature</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="463"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="349" Name="Acceptance of Extraneous Untrusted Data With Trusted Data" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Scope>Integrity</Scope>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data.</Note>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0018</Reference>
               <Description>Does not verify that trusted entity is authoritative for all entities in its response.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0018</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Untrusted Data Appended with Trusted Data</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ENV01-J</Entry_ID>
               <Entry_Name>Place all security-sensitive code in a single JAR and sign and seal it</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="141"/>
            <Related_Attack_Pattern CAPEC_ID="142"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="352" Name="Cross-Site Request Forgery (CSRF)" Abstraction="Compound" Structure="Composite" Status="Draft">
         <Description>The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.</Description>
         <Extended_Description>When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="441" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="642" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="613" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Session Riding</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Cross Site Reference Forgery</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>XSRF</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Non-Repudiation</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual analysis can be useful for finding this weakness, and for minimizing false positives assuming an understanding of business logic. However, it might not achieve desired code coverage within limited time constraints. For black-box analysis, if credentials are not known for privileged accounts, then the most security-critical portions of the application may not receive sufficient attention.</xhtml:p>
                  <xhtml:p>Consider using OWASP CSRFTester to identify potential issues and aid in manual analysis.</xhtml:p>
               </Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>CSRF is currently difficult to detect reliably using automated techniques. This is because each application has its own implicit security policy that dictates which requests can be influenced by an outsider and automatically performed on behalf of a user, versus which requests require strong confidence that the user intends to make the request. For example, a keyword search of the public portion of a web site is typically expected to be encoded within a link that can be launched automatically when the user clicks on the link.</Description>
               <Effectiveness>Limited</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Bytecode Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                           <xhtml:li>Binary Weakness Analysis - including disassembler + source code weakness analysis</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Binary or Bytecode</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Binary / Bytecode disassembler - then use manual analysis for vulnerabilities &amp; anomalies</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>For example, use anti-CSRF packages such as the OWASP CSRFGuard. [REF-330]</xhtml:p>
                  <xhtml:p>Another example is the ESAPI Session Management control, which includes a component for CSRF. [REF-45]</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79).</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>
                  <xhtml:p>Use the "double-submitted cookie" method as described by Felten and Zeller:</xhtml:p>
                  <xhtml:p>When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as a form value and also as a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form value and the cookie value are the same.</xhtml:p>
                  <xhtml:p>Because of the same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.</xhtml:p>
                  <xhtml:p>This technique requires Javascript, so it may not work for browsers that have Javascript disabled. [REF-331]</xhtml:p>
               </Description>
               <Effectiveness_Notes>Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not use the GET method for any request that triggers a state change.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.</Description>
               <Effectiveness_Notes>Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example PHP code attempts to secure the form submission process by validating that the user submitting the form has a valid session. A CSRF attack would not be prevented by this countermeasure because the attacker forges a request through the user's web browser in which a valid session already exists.</Intro_Text>
               <Body_Text>The following HTML is intended to allow a user to update a profile.</Body_Text>
               <Example_Code Nature="bad" Language="HTML">
                  <xhtml:div>&lt;form action="/url/profile.php" method="post"&gt;<xhtml:br/>&lt;input type="text" name="firstname"/&gt;<xhtml:br/>&lt;input type="text" name="lastname"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="text" name="email"/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Update"/&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>profile.php contains the following code.</Body_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>// initiate the session in order to validate sessions<xhtml:br/>
                     <xhtml:br/>session_start();<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>//if the session is registered to a valid user then allow update</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>if (! session_is_registered("username")) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>echo "invalid session detected!";<xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// Redirect user to login page</xhtml:i>
                           <xhtml:br/>[...]<xhtml:br/>
                           <xhtml:br/>exit;</xhtml:div>
                     </xhtml:div>}<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// The user session is valid, so process the request</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// and update the information</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>update_profile();<xhtml:br/>
                     <xhtml:br/>function update_profile {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// read in the data from $POST and send an update</xhtml:i>
                           <xhtml:br/>
                           <xhtml:br/>
                           <xhtml:i>// to the database</xhtml:i>
                           <xhtml:br/>SendUpdateToDatabase($_SESSION['username'], $_POST['email']);<xhtml:br/>[...]<xhtml:br/>echo "Your profile has been successfully updated.";</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code may look protected since it checks for a valid session. However, CSRF attacks can be staged from virtually any tag or HTML construct, including image tags, links, embed or object tags, or other attributes that load background images.</Body_Text>
               <Body_Text>The attacker can then host code that will silently change the username and email address of any user that visits the page while remaining logged in to the target web application. The code might be an innocent-looking web page such as:</Body_Text>
               <Example_Code Nature="attack" Language="HTML">
                  <xhtml:div>&lt;SCRIPT&gt;<xhtml:br/>function SendAttack () {<xhtml:div style="margin-left:10px;">form.email = "attacker@example.com";<xhtml:br/>
                        <xhtml:i>// send to profile.php</xhtml:i>
                        <xhtml:br/>form.submit();</xhtml:div>}<xhtml:br/>&lt;/SCRIPT&gt;<xhtml:br/>
                     <xhtml:br/>&lt;BODY onload="javascript:SendAttack();"&gt;<xhtml:br/>
                     <xhtml:br/>&lt;form action="http://victim.example.com/profile.php" id="form" method="post"&gt;<xhtml:br/>&lt;input type="hidden" name="firstname" value="Funny"&gt;<xhtml:br/>&lt;input type="hidden" name="lastname" value="Joke"&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="hidden" name="email"&gt;<xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Notice how the form contains hidden fields, so when it is loaded into the browser, the user will not notice it. Because SendAttack() is defined in the body's onload attribute, it will be automatically called when the victim loads the web page.</Body_Text>
               <Body_Text>Assuming that the user is already logged in to victim.example.com, profile.php will see that a valid user session has been established, then update the email address to the attacker's own address. At this stage, the user's identity has been compromised, and messages sent through this profile could be sent to the attacker's address.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-1703</Reference>
               <Description>Add user accounts via a URL in an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1703</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1995</Reference>
               <Description>Add user accounts via a URL in an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1995</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1967</Reference>
               <Description>Arbitrary code execution by specifying the code in a crafted img tag or URL</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1967</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1842</Reference>
               <Description>Gain administrative privileges via a URL in an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1842</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1947</Reference>
               <Description>Delete a victim's information via a URL or an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1947</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2059</Reference>
               <Description>Change another user's settings via a URL or an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2059</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1674</Reference>
               <Description>Perform actions as administrator via a URL or an img tag</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1674</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3520</Reference>
               <Description>modify password for the administrator</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3520</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3022</Reference>
               <Description>CMS allows modification of configuration via CSRF attack against the administrator</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3022</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-3759</Reference>
               <Description>web interface allows password changes or stopping a virtual machine via CSRF</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3759</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Cross-Site Request Forgery (CSRF)</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A5</Entry_ID>
               <Entry_Name>Cross Site Request Forgery (CSRF)</Entry_Name>
               <Mapping_Fit>Exact</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>9</Entry_ID>
               <Entry_Name>Cross-site Request Forgery</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="111"/>
            <Related_Attack_Pattern CAPEC_ID="462"/>
            <Related_Attack_Pattern CAPEC_ID="467"/>
            <Related_Attack_Pattern CAPEC_ID="62"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 2: Web-Server Related Vulnerabilities (XSS, XSRF, and&#xA; Response Splitting).&#34; Page 37"/>
            <Reference External_Reference_ID="REF-329"/>
            <Reference External_Reference_ID="REF-330"/>
            <Reference External_Reference_ID="REF-331"/>
            <Reference External_Reference_ID="REF-332"/>
            <Reference External_Reference_ID="REF-333"/>
            <Reference External_Reference_ID="REF-334"/>
            <Reference External_Reference_ID="REF-335"/>
            <Reference External_Reference_ID="REF-45"/>
            <Reference External_Reference_ID="REF-956"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>There can be a close relationship between XSS and CSRF (CWE-352).  An attacker might use CSRF in order to trick the victim into submitting requests to the server in which the requests contain an XSS payload.  A well-known example of this was the Samy worm on MySpace [REF-956]. The worm used XSS to insert malicious HTML sequences into a user's profile and add the attacker as a MySpace friend.  MySpace friends of that victim would then execute the payload to modify their own profiles, causing the worm to propagate exponentially. Since the victims did not intentionally insert the malicious script themselves, CSRF was a root cause.</xhtml:p>
            </Note>
            <Note Type="Theoretical">
               <xhtml:p>The CSRF topology is multi-channel:</xhtml:p>
               <xhtml:ul>
                  <xhtml:li>1. Attacker (as outsider) to intermediary (as user). The interaction point is either an external or internal channel.</xhtml:li>
                  <xhtml:li>2. Intermediary (as user) to server (as victim). The activation point is an internal channel.</xhtml:li>
               </xhtml:ul>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="353" Name="Missing Support for Integrity Check" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.</Description>
         <Extended_Description>If integrity check values or "checksums" are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="354" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Data that is parsed and used may be corrupted.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Scope>Other</Scope>
               <Impact>Hide Activities</Impact>
               <Impact>Other</Impact>
               <Note>Without a checksum it is impossible to determine if any changes have been made to the data after it was sent.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In this example, a request packet is received, and privileged information is sent to the requester:</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>while(true) {<xhtml:div style="margin-left:10px;">DatagramPacket rp = new DatagramPacket(rData,rData.length);<xhtml:br/>outSock.receive(rp);<xhtml:br/>InetAddress IPAddress = rp.getAddress();<xhtml:br/>int port = rp.getPort();<xhtml:br/>out = secret.getBytes();<xhtml:br/>DatagramPacket sp =new DatagramPacket(out, out.length, IPAddress, port);<xhtml:br/>outSock.send(sp);</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The response containing secret data has no integrity check associated with it, allowing an attacker to alter the message without detection.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to add integrity check value</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="13"/>
            <Related_Attack_Pattern CAPEC_ID="14"/>
            <Related_Attack_Pattern CAPEC_ID="389"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="74"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 15: Not Updating Easily.&#34; Page 231"/>
         </References>
         
      </Weakness>
      <Weakness ID="354" Name="Improper Validation of Integrity Check Value" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software does not validate or incorrectly validates the integrity check values or "checksums" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.</Description>
         <Extended_Description>Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="345" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="754" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="353" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Modify Application Data</Impact>
               <Impact>Other</Impact>
               <Note>Integrity checks usually use a secret key that helps authenticate the data origin. Skipping integrity checking generally opens up the possibility that new data from an invalid source can be injected.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Other</Impact>
               <Note>Data that is parsed and used may be corrupted.</Note>
            </Consequence>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Scope>Other</Scope>
               <Impact>Hide Activities</Impact>
               <Impact>Other</Impact>
               <Note>Without a checksum check, it is impossible to determine if any changes have been made to the data after it was sent.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>sd = socket(AF_INET, SOCK_DGRAM, 0); serv.sin_family = AF_INET;<xhtml:br/>serv.sin_addr.s_addr = htonl(INADDR_ANY);<xhtml:br/>servr.sin_port = htons(1008);<xhtml:br/>bind(sd, (struct sockaddr *) &amp; serv, sizeof(serv));<xhtml:br/>while (1) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>memset(msg, 0x0, MAX_MSG);<xhtml:br/>clilen = sizeof(cli);<xhtml:br/>if (inet_ntoa(cli.sin_addr)==...) n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) &amp; cli, &amp;clilen);</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>while(true) {<xhtml:div style="margin-left:10px;">DatagramPacket packet = new DatagramPacket(data,data.length,IPAddress, port);<xhtml:br/>socket.send(sendPacket);</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Failure to check integrity check value</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="145"/>
            <Related_Attack_Pattern CAPEC_ID="463"/>
            <Related_Attack_Pattern CAPEC_ID="75"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="359" Name="Exposure of Private Information ('Privacy Violation')" Abstraction="Class" Structure="Simple" Status="Incomplete">
         <Description>The software does not properly prevent private data (such as credit card numbers) from being accessed by actors who either (1) are not explicitly authorized to access the data or (2) do not have the implicit consent of the people to which the data is related.</Description>
         <Extended_Description>
            <xhtml:p>Mishandling private information, such as customer passwords or Social Security numbers, can compromise user privacy and is often illegal. An exposure of private information does not necessarily prevent the software from working properly, and in fact it might be intended by the developer, but it can still be undesirable (or explicitly prohibited by law) for the people who are associated with this private information.</xhtml:p>
            <xhtml:p>Privacy violations may occur when:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ol>
                  <xhtml:li>Private user information enters the program.</xhtml:li>
                  <xhtml:li>The data is written to an external location, such as the console, file system, or network.</xhtml:li>
               </xhtml:ol>
            </xhtml:div>
            <xhtml:p>Private data can enter a program in a variety of ways:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ol>
                  <xhtml:li>Directly from the user in the form of a password or personal information</xhtml:li>
                  <xhtml:li>Accessed from a database or other data store by the application</xhtml:li>
                  <xhtml:li>Indirectly from a partner or other third party</xhtml:li>
               </xhtml:ol>
            </xhtml:div>
            <xhtml:p>Some types of private information include:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>Government identifiers, such as Social Security Numbers</xhtml:li>
                  <xhtml:li>Contact information, such as home addresses and telephone numbers</xhtml:li>
                  <xhtml:li>Geographic location - where the user is (or was)</xhtml:li>
                  <xhtml:li>Employment history</xhtml:li>
                  <xhtml:li>Financial data - such as credit card numbers, salary, bank accounts, and debts</xhtml:li>
                  <xhtml:li>Pictures, video, or audio</xhtml:li>
                  <xhtml:li>Behavioral patterns - such as web surfing history, when certain activities are performed, etc.</xhtml:li>
                  <xhtml:li>Relationships (and types of relationships) with others - family, friends, contacts, etc.</xhtml:li>
                  <xhtml:li>Communications - e-mail addresses, private e-mail messages, SMS text messages, chat logs, etc.</xhtml:li>
                  <xhtml:li>Health - medical conditions, insurance status, prescription records</xhtml:li>
                  <xhtml:li>Credentials, such as passwords, which can be used to access other information.</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
            <xhtml:p>Some of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry.</xhtml:p>
            <xhtml:p>Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations: - Safe Harbor Privacy Framework [REF-340] - Gramm-Leach Bliley Act (GLBA) [REF-341] - Health Insurance Portability and Accountability Act (HIPAA) [REF-342] - California SB-1386 [REF-343].</xhtml:p>
            <xhtml:p>Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.</xhtml:p>
            <xhtml:p>Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="200" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Mobile" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Privacy leak</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Privacy leakage</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In 2004, an employee at AOL sold approximately 92 million private customer e-mail addresses to a spammer marketing an offshore gambling web site [REF-338]. In response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated.</Intro_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following code contains a logging statement that tracks the contents of records added to a database by storing them in a log file. Among other values that are stored, the getPassword() function returns the user-supplied plaintext password associated with the account.</Intro_Text>
               <Example_Code Nature="bad" Language="C#">
                  <xhtml:div>pass = GetPassword();<xhtml:br/>...<xhtml:br/>dbmsLog.WriteLine(id + ":" + pass + ":" + type + ":" + tstamp);</xhtml:div>
               </Example_Code>
               <Body_Text>The code in the example above logs a plaintext password to the filesystem. Although many developers trust the filesystem as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-111">
               <Intro_Text>This code uses location to determine the user's current US State location.</Intro_Text>
               <Body_Text>First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:</Body_Text>
               <Example_Code Nature="bad" Language="XML">
                  <xhtml:div>&lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>locationClient = new LocationClient(this, this, this);<xhtml:br/>locationClient.connect();<xhtml:br/>Location userCurrLocation;<xhtml:br/>userCurrLocation = locationClient.getLastLocation();<xhtml:br/>deriveStateFromCoords(userCurrLocation);</xhtml:div>
               </Example_Code>
               <Body_Text>While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Privacy Violation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>FIO13-J</Entry_ID>
               <Entry_Name>Do not log sensitive information outside a trust boundary</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="464"/>
            <Related_Attack_Pattern CAPEC_ID="467"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-338"/>
            <Reference External_Reference_ID="REF-339"/>
            <Reference External_Reference_ID="REF-340"/>
            <Reference External_Reference_ID="REF-341"/>
            <Reference External_Reference_ID="REF-342"/>
            <Reference External_Reference_ID="REF-343"/>
            <Reference External_Reference_ID="REF-267"/>
            <Reference External_Reference_ID="REF-172"/>
         </References>
         
      </Weakness>
      <Weakness ID="370" Name="Missing Check for Certificate Revocation after Initial Check" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The software does not check the revocation status of a certificate after its initial revocation check, which can cause the software to perform privileged actions even after the certificate is revoked at a later time.</Description>
         <Extended_Description>If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="299" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="299" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="296" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="297" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="298" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>Trust may be assigned to an entity who is not who it claims to be.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Data from an untrusted (and possibly malicious) source may be integrated.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>Data may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code checks a certificate before performing an action.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>if (cert = SSL_get_peer_certificate(ssl)) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>foo=SSL_get_verify_result(ssl);<xhtml:br/>if (X509_V_OK==foo)<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>
                                 <xhtml:i>//do stuff</xhtml:i>
                                 <xhtml:br/>foo=SSL_get_verify_result(ssl);<xhtml:br/>
                                 <xhtml:i>//do more stuff without the check.</xhtml:i>
                                 <xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>
                        </xhtml:div>
                     </xhtml:div>
                  </xhtml:div>
               </Example_Code>
               <Body_Text>While the code performs the certificate verification before each action, it does not check the result of the verification after the initial attempt. The certificate may have been revoked in the time between the privileged actions.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Race condition in checking for certificate revocation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP20</Entry_ID>
               <Entry_Name>Race Condition Window</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="26"/>
            <Related_Attack_Pattern CAPEC_ID="29"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 13: Race Conditions.&#34; Page 205"/>
         </References>
         
      </Weakness>
      <Weakness ID="384" Name="Session Fixation" Abstraction="Compound" Structure="Composite" Status="Incomplete">
         <Description>Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.</Description>
         <Extended_Description>
            <xhtml:p>Such a scenario is commonly observed when:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:div>1. A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.</xhtml:div>
               <xhtml:div>2. An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.</xhtml:div>
               <xhtml:div>3. The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.</xhtml:div>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="699"/>
            <Related_Weakness Nature="Requires" CWE_ID="346" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="472" View_ID="1000"/>
            <Related_Weakness Nature="Requires" CWE_ID="441" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Invalidate any existing session identifiers prior to authorizing a new user session.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a snippet of code from a J2EE web application where the application authenticates users with LoginContext.login() without first calling HttpSession.invalidate().</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>private void auth(LoginContext lc, HttpSession session) throws LoginException {<xhtml:div style="margin-left:10px;">...<xhtml:br/>lc.login();<xhtml:br/>...</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>In order to exploit the code above, an attacker could first create a session (perhaps by logging into the application) from a public terminal, record the session identifier assigned by the application, and reset the browser to the login page. Next, a victim sits down at the same public terminal, notices the browser open to the login page of the site, and enters credentials to authenticate against the application. The code responsible for authenticating the victim continues to use the pre-existing session identifier, now the attacker simply uses the session identifier recorded earlier to access the victim's active session, providing nearly unrestricted access to the victim's account for the lifetime of the session. Even given a vulnerable application, the success of the specific attack described here is dependent on several factors working in the favor of the attacker: access to an unmonitored public terminal, the ability to keep the compromised session active and a victim interested in logging into the vulnerable application on the public terminal.</Body_Text>
               <Body_Text>In most circumstances, the first two challenges are surmountable given a sufficient investment of time. Finding a victim who is both using a public terminal and interested in logging into the vulnerable application is possible as well, so long as the site is reasonably popular. The less well known the site is, the lower the odds of an interested victim using the public terminal and the lower the chance of success for the attack vector described above. The biggest challenge an attacker faces in exploiting session fixation vulnerabilities is inducing victims to authenticate against the vulnerable application using a session identifier known to the attacker.</Body_Text>
               <Body_Text>In the example above, the attacker did this through a direct method that is not subtle and does not scale suitably for attacks involving less well-known web sites. However, do not be lulled into complacency; attackers have many tools in their belts that help bypass the limitations of this attack vector. The most common technique employed by attackers involves taking advantage of cross-site scripting or HTTP response splitting vulnerabilities in the target site [12]. By tricking the victim into submitting a malicious request to a vulnerable application that reflects JavaScript or other code back to the victim's browser, an attacker can create a cookie that will cause the victim to reuse a session identifier controlled by the attacker. It is worth noting that cookies are often tied to the top level domain associated with a given URL. If multiple applications reside on the same top level domain, such as bank.example.com and recipes.example.com, a vulnerability in one application can allow an attacker to set a cookie with a fixed session identifier that will be used in all interactions with any application on the domain example.com [29].</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following example shows a snippet of code from a J2EE web application where the application authenticates users with a direct post to the &lt;code&gt;j_security_check&lt;/code&gt;, which typically does not invalidate the existing session before processing the login request.</Intro_Text>
               <Example_Code Nature="bad" Language="HTML">
                  <xhtml:div>&lt;form method="POST" action="j_security_check"&gt;<xhtml:div style="margin-left:10px;">&lt;input type="text" name="j_username"&gt;<xhtml:br/>&lt;input type="text" name="j_password"&gt;</xhtml:div>&lt;/form&gt;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Session Fixation</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Broken Authentication and Session Management</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>37</Entry_ID>
               <Entry_Name>Session Fixation</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="196"/>
            <Related_Attack_Pattern CAPEC_ID="21"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
            <Related_Attack_Pattern CAPEC_ID="61"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Other">Other attack vectors include DNS poisoning and related network based attacks where an attacker causes the user to visit a malicious site by redirecting a request for a valid site. Network based attacks typically involve a physical presence on the victim's network or control of a compromised machine on the network, which makes them harder to exploit remotely, but their significance should not be overlooked. Less secure session management mechanisms, such as the default implementation in Apache Tomcat, allow session identifiers normally expected in a cookie to be specified on the URL as well, which enables an attacker to cause a victim to use a fixed session identifier simply by emailing a malicious URL.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="390" Name="Detection of Error Condition Without Action" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software detects a specific error, but takes no actions to handle the error.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="401" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Unexpected State</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Note>An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Subject the software to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example attempts to allocate memory for a character. After the call to malloc, an if statement is used to check whether the malloc function failed.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>foo=malloc(sizeof(char)); //the next line checks to see if malloc failed<xhtml:br/>if (foo==NULL) {<xhtml:div style="margin-left:10px;">//We do nothing so we just ignore the error.</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The conditional successfully detects a NULL return value from malloc indicating a failure, however it does not do anything to handle the problem. Unhandled errors may have unexpected results and may cause the program to crash or terminate.</Body_Text>
               <Body_Text>Instead, the if block should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following example notifies the user that the malloc function did not allocate the required memory resources and returns an error code.</Body_Text>
               <Example_Code Nature="good" Language="C">
                  <xhtml:div>foo=malloc(sizeof(char)); //the next line checks to see if malloc failed<xhtml:br/>if (foo==NULL) {<xhtml:div style="margin-left:10px;">printf("Malloc failed to allocate memory resources");<xhtml:br/>return -1;</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following C++ example the method readFile() will read the file whose name is provided in the input parameter and will return the contents of the file in char string. The method calls open() and read() may result in errors if the file does not exist or does not contain any data to read. These errors will be thrown when the is_open() method and good() method indicate errors opening or reading the file. However, these errors are not handled within the catch statement. Catch statements that do not perform any processing will have unexpected results. In this case an empty char string will be returned, and the file will not be properly closed.</Intro_Text>
               <Example_Code Nature="bad" Language="C++">
                  <xhtml:div>char* readfile (char *filename) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>try {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>// open input file<xhtml:br/>ifstream infile;<xhtml:br/>infile.open(filename);<xhtml:br/>
                                 <xhtml:br/>if (!infile.is_open()) {<xhtml:div style="margin-left:10px;">throw "Unable to open file " + filename;</xhtml:div>}<xhtml:br/>
                                 <xhtml:br/>// get length of file<xhtml:br/>infile.seekg (0, ios::end);<xhtml:br/>int length = infile.tellg();<xhtml:br/>infile.seekg (0, ios::beg);<xhtml:br/>
                                 <xhtml:br/>// allocate memory<xhtml:br/>char *buffer = new char [length];<xhtml:br/>
                                 <xhtml:br/>// read data from file<xhtml:br/>infile.read (buffer,length);<xhtml:br/>
                                 <xhtml:br/>if (!infile.good()) {<xhtml:div style="margin-left:10px;">throw "Unable to read from file " + filename;</xhtml:div>}<xhtml:br/>
                                 <xhtml:br/>infile.close();<xhtml:br/>
                                 <xhtml:br/>return buffer;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>catch (...) {<xhtml:div style="margin-left:10px;">/* bug: insert code to handle this later */</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The catch statement should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following C++ example contains two catch statements. The first of these will catch a specific error thrown within the try block, and the second catch statement will catch all other errors from within the catch block. Both catch statements will notify the user that an error has occurred, close the file, and rethrow to the block that called the readFile() method for further handling or possible termination of the program.</Body_Text>
               <Example_Code Nature="good" Language="C++">
                  <xhtml:div>char* readFile (char *filename) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>try {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>// open input file<xhtml:br/>ifstream infile;<xhtml:br/>infile.open(filename);<xhtml:br/>
                                 <xhtml:br/>if (!infile.is_open()) {<xhtml:div style="margin-left:10px;">throw "Unable to open file " + filename;</xhtml:div>}<xhtml:br/>
                                 <xhtml:br/>// get length of file<xhtml:br/>infile.seekg (0, ios::end);<xhtml:br/>int length = infile.tellg();<xhtml:br/>infile.seekg (0, ios::beg);<xhtml:br/>
                                 <xhtml:br/>// allocate memory<xhtml:br/>char *buffer = new char [length];<xhtml:br/>
                                 <xhtml:br/>// read data from file<xhtml:br/>infile.read (buffer,length);<xhtml:br/>
                                 <xhtml:br/>if (!infile.good()) {<xhtml:div style="margin-left:10px;">throw "Unable to read from file " + filename;</xhtml:div>}<xhtml:br/>infile.close();<xhtml:br/>
                                 <xhtml:br/>return buffer;</xhtml:div>
                           </xhtml:div>}<xhtml:br/>catch (char *str) {<xhtml:div style="margin-left:10px;">printf("Error: %s \n", str);<xhtml:br/>infile.close();<xhtml:br/>throw str;</xhtml:div>}<xhtml:br/>catch (...) {<xhtml:div style="margin-left:10px;">printf("Error occurred trying to read from file \n");<xhtml:br/>infile.close();<xhtml:br/>throw;</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>In the following Java example the method readFile will read the file whose name is provided in the input parameter and will return the contents of the file in a String object. The constructor of the FileReader object and the read method call may throw exceptions and therefore must be within a try/catch block. While the catch statement in this example will catch thrown exceptions in order for the method to compile, no processing is performed to handle the thrown exceptions. Catch statements that do not perform any processing will have unexpected results. In this case, this will result in the return of a null String.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public String readFile(String filename) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>String retString = null;<xhtml:br/>try {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>// initialize File and FileReader objects<xhtml:br/>File file = new File(filename);<xhtml:br/>FileReader fr = new FileReader(file);<xhtml:br/>
                                 <xhtml:br/>// initialize character buffer<xhtml:br/>long fLen = file.length();<xhtml:br/>char[] cBuf = new char[(int) fLen];<xhtml:br/>
                                 <xhtml:br/>// read data from file<xhtml:br/>int iRead = fr.read(cBuf, 0, (int) fLen);<xhtml:br/>
                                 <xhtml:br/>// close file<xhtml:br/>fr.close();<xhtml:br/>
                                 <xhtml:br/>retString = new String(cBuf);<xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>} catch (Exception ex) {<xhtml:div style="margin-left:10px;">/* do nothing, but catch so it'll compile... */</xhtml:div>}<xhtml:br/>return retString;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The catch statement should contain statements that either attempt to fix the problem, notify the user that an exception has been raised and continue processing, or perform some cleanup and gracefully terminate the program. The following Java example contains three catch statements. The first of these will catch the FileNotFoundException that may be thrown by the FileReader constructor called within the try/catch block. The second catch statement will catch the IOException that may be thrown by the read method called within the try/catch block. The third catch statement will catch all other exceptions thrown within the try block. For all catch statements the user is notified that the exception has been thrown and the exception is rethrown to the block that called the readFile() method for further processing or possible termination of the program. Note that with Java it is usually good practice to use the getMessage() method of the exception class to provide more information to the user about the exception raised.</Body_Text>
               <Example_Code Nature="good" Language="Java">
                  <xhtml:div>public String readFile(String filename) throws FileNotFoundException, IOException, Exception {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>String retString = null;<xhtml:br/>try {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>// initialize File and FileReader objects<xhtml:br/>File file = new File(filename);<xhtml:br/>FileReader fr = new FileReader(file);<xhtml:br/>
                                 <xhtml:br/>// initialize character buffer<xhtml:br/>long fLen = file.length();<xhtml:br/>char [] cBuf = new char[(int) fLen];<xhtml:br/>
                                 <xhtml:br/>// read data from file<xhtml:br/>int iRead = fr.read(cBuf, 0, (int) fLen);<xhtml:br/>
                                 <xhtml:br/>// close file<xhtml:br/>fr.close();<xhtml:br/>
                                 <xhtml:br/>retString = new String(cBuf);<xhtml:br/>
                              </xhtml:div>
                           </xhtml:div>} catch (FileNotFoundException ex) {<xhtml:div style="margin-left:10px;">System.err.println ("Error: FileNotFoundException opening the input file: " + filename );<xhtml:br/>System.err.println ("" + ex.getMessage() );<xhtml:br/>throw new FileNotFoundException(ex.getMessage());</xhtml:div>} catch (IOException ex) {<xhtml:div style="margin-left:10px;">System.err.println("Error: IOException reading the input file.\n" + ex.getMessage() );<xhtml:br/>throw new IOException(ex);</xhtml:div>} catch (Exception ex) {<xhtml:div style="margin-left:10px;">System.err.println("Error: Exception reading the input file.\n" + ex.getMessage() );<xhtml:br/>throw new Exception(ex);</xhtml:div>}<xhtml:br/>return retString;</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Improper error handling</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR00-J</Entry_ID>
               <Entry_Name>Do not suppress or ignore checked exceptions</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP4</Entry_ID>
               <Entry_Name>Unchecked Status Condition</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 11: Failure to Handle Errors Correctly.&#34; Page 183"/>
         </References>
         
      </Weakness>
      <Weakness ID="391" Name="Unchecked Error Condition" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Unexpected State</Impact>
               <Impact>Alter Execution Logic</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Description>A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code excerpt ignores a rarely-thrown exception from doExchange().</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">doExchange();</xhtml:div>}<xhtml:br/>catch (RareException e) {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// this can never happen</xhtml:i>
                           <xhtml:br/>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>If a RareException were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unchecked Return Value</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Empty Catch Block</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Uncaught exception</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A7</Entry_ID>
               <Entry_Name>Improper Error Handling</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ERR00-C</Entry_ID>
               <Entry_Name>Adopt and implement a consistent and comprehensive error-handling policy</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ERR33-C</Entry_ID>
               <Entry_Name>Detect and handle standard library errors</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ERR34-C</Entry_ID>
               <Entry_Name>Detect errors when converting a string to a number</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FLP32-C</Entry_ID>
               <Entry_Name>Prevent or detect domain and range errors in math functions</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>POS54-C</Entry_ID>
               <Entry_Name>Detect and handle POSIX library errors</Entry_Name>
               <Mapping_Fit>CWE More Abstract</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>EXP31-PL</Entry_ID>
               <Entry_Name>Do not suppress or ignore exceptions</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP4</Entry_ID>
               <Entry_Name>Unchecked Status Condition</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Maintenance">This entry is slated for deprecation; it has multiple widespread interpretations by CWE analysts.  It currently combines information from three different taxonomies, but each taxonomy is talking about a slightly different issue.  CWE analysts might map to this entry based on any of these issues.  7PK has "Empty Catch Block" which has an association with empty exception block (CWE-1069); in this case, the exception has performed the check, but does not handle.  In PLOVER there is "Unchecked Return Value" which is CWE-252, but unlike "Empty Catch Block" there isn't even a check of the issue - and "Unchecked Error Condition" implies lack of a check.  For CLASP, "Uncaught Exception" (CWE-248) is associated with incorrect error propagation - uncovered in CWE 3.2 and earlier, at least.  There are other issues related to error handling and checks.</Note>
            <Note Type="Other">
               <xhtml:p>When a programmer ignores an exception, they implicitly state that they are operating under one of two assumptions:</xhtml:p>
               <xhtml:div style="margin-left:10px;">
                  <xhtml:ul>
                     <xhtml:li>This method call can never fail.</xhtml:li>
                     <xhtml:li>It doesn't matter if this call fails.</xhtml:li>
                  </xhtml:ul>
               </xhtml:div>
            </Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="392" Name="Missing Report of Error Condition" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software encounters an error but does not provide a status code or return value to indicate that an error has occurred.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="684" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="703" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Impact>Unexpected State</Impact>
               <Note>Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors.</Note>
            </Consequence>
         </Common_Consequences>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In the following snippet from a doPost() servlet method, the server returns "200 OK" (default) even if an error occurs.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>try {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>
                           <xhtml:br/>
                           <xhtml:i>// Something that may throw an exception.</xhtml:i>
                           <xhtml:br/>...</xhtml:div>
                     </xhtml:div>} catch (Throwable t) {<xhtml:div style="margin-left:10px;">logger.error("Caught: " + t.toString());<xhtml:br/>return;</xhtml:div>}</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-0063</Reference>
               <Description>Function returns "OK" even if another function returns a different status code than expected, leading to accepting an invalid PIN number.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-0063</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1446</Reference>
               <Description>Error checking routine in PKCS#11 library returns "OK" status even when invalid signature is detected, allowing spoofed messages.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1446</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0499</Reference>
               <Description>Kernel function truncates long pathnames without generating an error, leading to operation on wrong directory.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0499</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2459</Reference>
               <Description>Function returns non-error value when a particular erroneous condition is encountered, leading to resultant NULL dereference.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2459</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Missing Error Status Code</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>TPS03-J</Entry_ID>
               <Entry_Name>Ensure that tasks executing in a thread pool do not fail silently</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP6</Entry_ID>
               <Entry_Name>Incorrect Exception Behavior</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="403" Name="Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.</Description>
         <Extended_Description>When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="402" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="402" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Operating_System Class="Unix" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>File descriptor leak</Term>
               <Description>While this issue is frequently called a file descriptor leak, the "leak" term is often used in two different ways - exposure of a resource, or consumption of a resource. Use of this term could cause confusion.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2003-0740</Reference>
               <Description>Server leaks a privileged file descriptor, allowing the server to be hijacked.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0740</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1033</Reference>
               <Description>File descriptor leak allows read of restricted files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1033</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0094</Reference>
               <Description>Access to restricted resource using modified file descriptor for stderr.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0094</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0638</Reference>
               <Description>Open file descriptor used as alternate channel in complex race condition.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0638</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0489</Reference>
               <Description>Program does not fully drop privileges after creating a file descriptor, which allows access to the descriptor via a separate vulnerability.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0489</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0937</Reference>
               <Description>User bypasses restrictions by obtaining a file descriptor then calling setuid program, which does not close the descriptor.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0937</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2215</Reference>
               <Description>Terminal manager does not properly close file descriptors, allowing attackers to access terminals of other users.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2215</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-5397</Reference>
               <Description>Module opens a file for reading twice, allowing attackers to read files.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5397</Link>
            </Observed_Example>
         </Observed_Examples>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>UNIX file descriptor leak</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>FIO42-C</Entry_ID>
               <Entry_Name>Ensure files are properly closed when they are no longer needed</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP23</Entry_ID>
               <Entry_Name>Exposed Data</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-392"/>
            <Reference External_Reference_ID="REF-393" Section="Elevating Privileges Safely"/>
         </References>
         
      </Weakness>
      <Weakness ID="419" Name="Unprotected Primary Channel" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Do not expose administrative functionnality on the user UI.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Protect the administrative/restricted functionality with a strong authentication mechanism.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unprotected Primary Channel</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="383"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="420" Name="Unprotected Alternate Channel" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software protects a primary channel, but it does not use the same level of protection for an alternate channel.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="923" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0567</Reference>
               <Description>DB server assumes that local clients have performed authentication, allowing attacker to directly connect to a process to load libraries and execute commands; a socket interface also exists (another alternate channel), so attack can be remote.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0567</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1578</Reference>
               <Description>Product does not restrict access to underlying database, so attacker can bypass restrictions by directly querying the database.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1578</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-1035</Reference>
               <Description>User can avoid lockouts by using an API instead of the GUI to conduct brute force password guessing.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1035</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1863</Reference>
               <Description>FTP service can not be disabled even when other access controls would require it.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1863</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0066</Reference>
               <Description>Windows named pipe created without authentication/access control, allowing configuration modification.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0066</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-1461</Reference>
               <Description>Router management interface spawns a separate TCP connection after authentication, allowing hijacking by attacker coming from the same IP address.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-1461</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unprotected Alternate Channel</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Notes>
            <Note Type="Relationship">This can be primary to authentication errors, and resultant from unhandled error conditions.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="425" Name="Direct Request ('Forced Browsing')" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.</Description>
         <Extended_Description>Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="862" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="862" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="862" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="288" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="288" View_ID="699"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="424" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="424" View_ID="699"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="471" View_ID="1000"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>forced browsing</Term>
               <Description>The "forced browsing" term could be misinterpreted to include weaknesses such as CSRF or XSS, so its use is discouraged.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Operation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Gain Privileges or Assume Identity</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider using MVC based frameworks such as Struts.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>If forced browsing is possible, an attacker may be able to directly access a sensitive page by entering a URL similar to the following.</Intro_Text>
               <Example_Code Nature="attack" Language="JSP">
                  <xhtml:div>http://somesite.com/someapplication/admin.jsp</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2004-2144</Reference>
               <Description>Bypass authentication via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2144</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1892</Reference>
               <Description>Infinite loop or infoleak triggered by direct requests.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1892</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2257</Reference>
               <Description>Bypass auth/auth via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2257</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1688</Reference>
               <Description>Direct request leads to infoleak by error.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1688</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1697</Reference>
               <Description>Direct request leads to infoleak by error.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1697</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1698</Reference>
               <Description>Direct request leads to infoleak by error.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1698</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1685</Reference>
               <Description>Authentication bypass via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1685</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1827</Reference>
               <Description>Authentication bypass via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1827</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1654</Reference>
               <Description>Authorization bypass using direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1654</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1668</Reference>
               <Description>Access privileged functionality using direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1668</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1798</Reference>
               <Description>Upload arbitrary files via direct request.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1798</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Direct Request aka 'Forced Browsing'</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A10</Entry_ID>
               <Entry_Name>Failure to Restrict URL Access</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A2</Entry_ID>
               <Entry_Name>Broken Access Control</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>34</Entry_ID>
               <Entry_Name>Predictable Resource Location</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP30</Entry_ID>
               <Entry_Name>Missing endpoint authentication</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="127"/>
            <Related_Attack_Pattern CAPEC_ID="87"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection.</Note>
            <Note Type="Theoretical">"Forced browsing" is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically "authentication bypass" or "path disclosure," although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="426" Name="Untrusted Search Path" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control.</Description>
         <Extended_Description>
            <xhtml:p>This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the application uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted application would then execute. The problem extends to any type of critical resource that the application trusts.</xhtml:p>
            <xhtml:p>Some of the most common variants of untrusted search path are:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library.</xhtml:li>
                  <xhtml:li>In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order.</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="668" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="673" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="427" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="428" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Operating_System Class="OS-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Untrusted Path</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>High</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>There is the potential for arbitrary code execution with privileges of the vulnerable program.</Note>
            </Consequence>
            <Consequence>
               <Scope>Availability</Scope>
               <Impact>DoS: Crash, Exit, or Restart</Impact>
               <Note>The program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format.</Note>
            </Consequence>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Files or Directories</Impact>
               <Note>The program could send the output of unauthorized files to the attacker.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-11">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.</xhtml:p>
               </Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis</Method>
               <Description>Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.</Description>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Analysis</Method>
               <Description>Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Implementation</Phase>
               <Strategy>Attack Surface Reduction</Strategy>
               <Description>Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example Demonstrative_Example_ID="DX-67">
               <Intro_Text>This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system.</Intro_Text>
               <Example_Code Nature="bad" Language="C">
                  <xhtml:div>#define DIR "/restricted/directory"<xhtml:br/>
                     <xhtml:br/>char cmd[500];<xhtml:br/>sprintf(cmd, "ls -l %480s", DIR);<xhtml:br/>
                     <xhtml:i>/* Raise privileges to those needed for accessing DIR. */</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>RaisePrivileges(...);<xhtml:br/>system(cmd);<xhtml:br/>DropPrivileges(...);<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges.</Body_Text>
               <Body_Text>However, because the program does not modify the PATH environment variable, the following attack would work:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:ul>
                     <xhtml:li>The user sets the PATH to reference a directory under the attacker's control, such as "/my/dir/".</xhtml:li>
                     <xhtml:li>The attacker creates a malicious program called "ls", and puts that program in /my/dir</xhtml:li>
                     <xhtml:li>The user executes the program.</xhtml:li>
                     <xhtml:li>When system() is executed, the shell consults the PATH to find the ls program</xhtml:li>
                     <xhtml:li>The program finds the attacker's malicious program, "/my/dir/ls". It doesn't find "/bin/ls" because PATH does not contain "/bin/".</xhtml:li>
                     <xhtml:li>The program executes the attacker's malicious program with the raised privileges.</xhtml:li>
                  </xhtml:ul>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-68">
               <Intro_Text>This code prints all of the running processes belonging to the current user.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>//assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (CWE-78)</xhtml:i>
                     <xhtml:br/>$userName = getCurrentUser();<xhtml:br/>$command = 'ps aux | grep ' . $userName;<xhtml:br/>system($command);</xhtml:div>
               </Example_Code>
               <Body_Text>This program is also vulnerable to a PATH based attack, as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to run the system commands, the PHP interpreter may by default be running with higher privileges than users.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-29">
               <Intro_Text>The following code is from a web application that allows users access to an interface through which they can update their password on the system. In this environment, user passwords can be managed using the Network Information System (NIS), which is commonly used on UNIX systems. When performing NIS updates, part of the process for updating passwords is to run a make command in the /var/yp directory. Performing NIS updates requires extra privileges.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>...<xhtml:br/>System.Runtime.getRuntime().exec("make");<xhtml:br/>...</xhtml:div>
               </Example_Code>
               <Body_Text>The problem here is that the program does not specify an absolute path for make and does not clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-1120</Reference>
               <Description>Application relies on its PATH environment variable to find and execute program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-1120</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1810</Reference>
               <Description>Database application relies on its PATH environment variable to find and execute program.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1810</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2007-2027</Reference>
               <Description>Chain: untrusted search path enabling resultant format string by loading malicious internationalization messages.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-2027</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3485</Reference>
               <Description>Untrusted search path using malicious .EXE in Windows environment.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3485</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-2613</Reference>
               <Description>setuid program allows compromise using path that finds and loads a malicious library.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2613</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-1319</Reference>
               <Description>Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-1319</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>Program Invocation</Functional_Area>
            <Functional_Area>Code Libraries</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>System Process</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Untrusted Search Path</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Relative path library search</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="CERT C Secure Coding">
               <Entry_ID>ENV03-C</Entry_ID>
               <Entry_Name>Sanitize the environment when invoking external programs</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="38"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-62" Section="Chapter 10, Process Attributes, page 603"/>
            <Reference External_Reference_ID="REF-176" Section="Chapter 8, &#34;Canonical Representation Issues.&#34; Page 229"/>
            <Reference External_Reference_ID="REF-207" Section="Chapter 12, &#34;Trust Management and Input Validation.&#34; Pages&#xA;                  317-320."/>
            <Reference External_Reference_ID="REF-7" Section="Chapter 11, &#34;Don't Trust the PATH - Use Full Path Names&#34; Page 385"/>
         </References>
         <Notes>
            <Note Type="Research Gap">Search path issues on Windows are under-studied and possibly under-reported.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="434" Name="Unrestricted Upload of File with Dangerous Type" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="351" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="436" View_ID="1000"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="430" View_ID="1000"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
               <Description>This can be primary when there is no check at all.</Description>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>This is frequently resultant when use of double extensions (e.g. ".php.gif") bypasses a sanity check.</Description>
            </Weakness_Ordinality>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
               <Description>This can be resultant from client-side enforcement (CWE-602); some products will include web script in web clients to check the filename, without verifying on the server side.</Description>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="ASP.NET" Prevalence="Sometimes"/>
            <Language Name="PHP" Prevalence="Often"/>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
            <Paradigm Name="Web Based" Prevalence="Undetermined"/>
            <Technology Name="Web Server" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Unrestricted File Upload</Term>
               <Description>The "unrestricted file upload" term is used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Availability</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Note>Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Dynamic Analysis with Automated Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Web Application Scanner</xhtml:li>
                           <xhtml:li>Web Services Scanner</xhtml:li>
                           <xhtml:li>Database Scanners</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Dynamic Analysis with Manual Results Interpretation</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Fuzz Tester</xhtml:li>
                           <xhtml:li>Framework-based Fuzzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>SOAR Partial</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Manual Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Focused Manual Spotcheck - Focused manual analysis of source</xhtml:li>
                           <xhtml:li>Manual Source Code Review (not inspections)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Automated Static Analysis - Source Code</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Source code Weakness Analyzer</xhtml:li>
                           <xhtml:li>Context-configured Source Code Weakness Analyzer</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
            <Detection_Method>
               <Method>Architecture or Design Review</Method>
               <Description>
                  <xhtml:p>According to SOAR, the following detection techniques may be useful:</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:div>Highly cost effective:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Formal Methods / Correct-By-Construction</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                     <xhtml:div>Cost effective for partial coverage:</xhtml:div>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:ul>
                           <xhtml:li>Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)</xhtml:li>
                        </xhtml:ul>
                     </xhtml:div>
                  </xhtml:div>
               </Description>
               <Effectiveness>High</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-21">
               <Phase>Architecture and Design</Phase>
               <Strategy>Enforcement by Conversion</Strategy>
               <Description>When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
                  <xhtml:p>For example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that "filename.php.gif" is fed to the PHP interpreter.[REF-422] [REF-423]</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-15">
               <Phase>Architecture and Design</Phase>
               <Description>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following code intends to allow a user to upload a picture to the web server. The HTML code that drives the form on the user end has an input field of type "file".</Intro_Text>
               <Example_Code Nature="good" Language="HTML">
                  <xhtml:div>&lt;form action="upload_picture.php" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Once submitted, the form above sends the file to upload_picture.php on the web server. PHP stores the file in a temporary location until it is retrieved (or discarded) by the server side code. In this example, the file is moved to a more permanent pictures/ directory.</Body_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:br/>
                     <xhtml:i>// Define the target location where the picture being</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// uploaded is going to be saved.</xhtml:i>
                     <xhtml:br/>$target = "pictures/" . basename($_FILES['uploadedfile']['name']);<xhtml:br/>
                     <xhtml:br/>
                     <xhtml:i>// Move the uploaded file to the new location.</xhtml:i>
                     <xhtml:br/>if(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target))<xhtml:br/>{<xhtml:div style="margin-left:10px;">echo "The picture has been successfully uploaded.";</xhtml:div>}<xhtml:br/>else<xhtml:br/>{<xhtml:div style="margin-left:10px;">echo "There was an error uploading the picture, please try again.";</xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>The problem with the above code is that there is no check regarding type of file being uploaded. Assuming that pictures/ is available in the web document root, an attacker could upload a file with the name:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>malicious.php</xhtml:div>
               </Example_Code>
               <Body_Text>Since this filename ends in ".php" it can be executed by the web server. In the contents of this uploaded file, the attacker could use:</Body_Text>
               <Example_Code Nature="attack" Language="PHP">
                  <xhtml:div>&lt;?php<xhtml:div style="margin-left:10px;">system($_GET['cmd']);</xhtml:div>
                     <xhtml:br/>?&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>Once this file has been installed, the attacker can enter arbitrary commands to execute using a URL such as:</Body_Text>
               <Example_Code Nature="attack">
                  <xhtml:div>http://server.example.com/upload_dir/malicious.php?cmd=ls%20-l</xhtml:div>
               </Example_Code>
               <Body_Text>which runs the "ls -l" command - or any other type of command that the attacker wants to specify.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example Demonstrative_Example_ID="DX-22">
               <Intro_Text>The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The HTML code is the same as in the previous example with the action attribute of the form sending the upload file request to the Java servlet instead of the PHP code.</Intro_Text>
               <Example_Code Nature="good" Language="HTML">
                  <xhtml:div>&lt;form action="FileUploadServlet" method="post" enctype="multipart/form-data"&gt;<xhtml:br/>
                     <xhtml:br/>Choose a file to upload:<xhtml:br/>&lt;input type="file" name="filename"/&gt;<xhtml:br/>&lt;br/&gt;<xhtml:br/>&lt;input type="submit" name="submit" value="Submit"/&gt;<xhtml:br/>
                     <xhtml:br/>&lt;/form&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory.</Body_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public class FileUploadServlet extends HttpServlet {<xhtml:br/>
                     <xhtml:div style="margin-left:10px;">
                        <xhtml:div>...<xhtml:br/>
                           <xhtml:br/>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {<xhtml:br/>
                           <xhtml:div style="margin-left:10px;">
                              <xhtml:div>response.setContentType("text/html");<xhtml:br/>PrintWriter out = response.getWriter();<xhtml:br/>String contentType = request.getContentType();<xhtml:br/>
                                 <xhtml:br/>// the starting position of the boundary header<xhtml:br/>int ind = contentType.indexOf("boundary=");<xhtml:br/>String boundary = contentType.substring(ind+9);<xhtml:br/>
                                 <xhtml:br/>String pLine = new String();<xhtml:br/>String uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value<xhtml:br/>
                                 <xhtml:br/>// verify that content type is multipart form data<xhtml:br/>if (contentType != null &amp;&amp; contentType.indexOf("multipart/form-data") != -1) {<xhtml:br/>
                                 <xhtml:div style="margin-left:10px;">
                                    <xhtml:div>// extract the filename from the Http header<xhtml:br/>BufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));<xhtml:br/>...<xhtml:br/>pLine = br.readLine();<xhtml:br/>String filename = pLine.substring(pLine.lastIndexOf("\\"), pLine.lastIndexOf("\""));<xhtml:br/>...<xhtml:br/>
                                       <xhtml:br/>// output the file to the local upload directory<xhtml:br/>try {<xhtml:div style="margin-left:10px;">
                                          <xhtml:div>BufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));<xhtml:br/>for (String line; (line=br.readLine())!=null; ) {<xhtml:div style="margin-left:10px;">if (line.indexOf(boundary) == -1) {<xhtml:div style="margin-left:10px;">bw.write(line);<xhtml:br/>bw.newLine();<xhtml:br/>bw.flush();</xhtml:div>}</xhtml:div>} //end of for loop<xhtml:br/>bw.close();</xhtml:div>
                                       </xhtml:div>
                                       <xhtml:br/>
                                       <xhtml:br/>} catch (IOException ex) {...}<xhtml:br/>// output successful upload response HTML page</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>// output unsuccessful upload response HTML page<xhtml:br/>else<xhtml:br/>{...}</xhtml:div>
                           </xhtml:div>}<xhtml:div style="margin-left:10px;">...</xhtml:div>
                        </xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>As with the previous example this code does not perform a check on the type of the file being uploaded. This could allow an attacker to upload any executable file or other file with malicious code.</Body_Text>
               <Body_Text>Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-22, CWE-23). Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2001-0901</Reference>
               <Description>Web-based mail product stores ".shtml" attachments that could contain SSI</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0901</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1841</Reference>
               <Description>PHP upload does not restrict file types</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1841</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1868</Reference>
               <Description>upload and execution of .php file</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1868</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1881</Reference>
               <Description>upload file with dangerous extension</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1881</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0254</Reference>
               <Description>program does not restrict file types</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0254</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2262</Reference>
               <Description>improper type checking of uploaded files</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2262</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-4558</Reference>
               <Description>Double "php" extension leaves an active php extension in the generated filename.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-4558</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-6994</Reference>
               <Description>ASP program allows upload of .asp files by bypassing client-side checks</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=CVE-2006-6994</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-3288</Reference>
               <Description>ASP file upload</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=CVE-2005-3288</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2006-2428</Reference>
               <Description>ASP file upload</Description>
               <Link>http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=CVE-2006-2428</Link>
            </Observed_Example>
         </Observed_Examples>
         <Functional_Areas>
            <Functional_Area>File Processing</Functional_Area>
         </Functional_Areas>
         <Affected_Resources>
            <Affected_Resource>File or Directory</Affected_Resource>
         </Affected_Resources>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unrestricted File Upload</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A3</Entry_ID>
               <Entry_Name>Malicious File Execution</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OMG ASCSM">
                <Entry_ID>ASCSM-CWE-434</Entry_ID>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="1"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-422"/>
            <Reference External_Reference_ID="REF-423"/>
            <Reference External_Reference_ID="REF-424"/>
            <Reference External_Reference_ID="REF-76"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;File Uploading&#34;, Page 1068"/>
            <Reference External_Reference_ID="REF-962" Section="ASCSM-CWE-434"/>
         </References>
         <Notes>
            <Note Type="Relationship">
               <xhtml:p>This can have a chaining relationship with incomplete blacklist / permissive whitelist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).</xhtml:p>
               <xhtml:p>This can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.</xhtml:p>
            </Note>
            <Note Type="Research Gap">PHP applications are most targeted, but this likely applies to other languages that support file upload, as well as non-web technologies. ASP applications have also demonstrated this problem.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="441" Name="Unintended Proxy or Intermediary ('Confused Deputy')" Abstraction="Class" Structure="Simple" Status="Draft">
         <Description>The software receives a request, message, or directive from an upstream component, but the software does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the software's control sphere. This causes the software to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.</Description>
         <Extended_Description>
            <xhtml:p>If an attacker cannot directly contact a target, but the software has access to the target, then the attacker can send a request to the software and have it be forwarded from the target. The request would appear to be coming from the software's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker.</xhtml:p>
            <xhtml:p>Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when:</xhtml:p>
            <xhtml:div style="margin-left:10px;">
               <xhtml:ul>
                  <xhtml:li>The software runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component;</xhtml:li>
                  <xhtml:li>The attacker is prevented from making the request directly to the target; and</xhtml:li>
                  <xhtml:li>The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources.</xhtml:li>
               </xhtml:ul>
            </xhtml:div>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="668" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Confused Deputy</Term>
               <Description>This weakness is sometimes referred to as the "Confused deputy" problem, in which an attacker misused the authority of one victim (the "confused deputy") when targeting another victim.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Non-Repudiation</Scope>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Hide Activities</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Enforce the use of strong mutual authentication mechanism between the two parties.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-1999-0017</Reference>
               <Description>FTP bounce attack. The design of the protocol allows an attacker to modify the PORT command to cause the FTP server to connect to other machines besides the attacker's.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0017</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-1999-0168</Reference>
               <Description>RPC portmapper could redirect service requests from an attacker to another entity, which thinks the requests came from the portmapper.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0168</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0315</Reference>
               <Description>FTP server does not ensure that the IP address in a PORT command is the same as the FTP user's session, allowing port scanning by proxy.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-0315</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1484</Reference>
               <Description>Web server allows attackers to request a URL from another server, including other ports, which allows proxied scanning.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1484</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2004-2061</Reference>
               <Description>CGI script accepts and retrieves incoming URLs.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2061</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1484</Reference>
               <Description>Bounce attack allows access to TFTP from trusted side.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1484</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2010-1637</Reference>
               <Description>Web-based mail program allows internal network scanning using a modified POP3 port number.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-1637</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0037</Reference>
               <Description>URL-downloading library automatically follows redirects to file:// and scp:// URLs</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-0037</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Unintended proxy/intermediary</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Proxied Trusted Channel</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="WASC">
               <Entry_ID>32</Entry_ID>
               <Entry_Name>Routing Detour</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="141"/>
            <Related_Attack_Pattern CAPEC_ID="142"/>
            <Related_Attack_Pattern CAPEC_ID="219"/>
            <Related_Attack_Pattern CAPEC_ID="465"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-432"/>
         </References>
         <Notes>
            <Note Type="Relationship">This weakness has a chaining relationship with CWE-668 (Exposure of Resource to Wrong Sphere) because the proxy effectively provides the attacker with access to the target's resources that the attacker cannot directly obtain.</Note>
            <Note Type="Maintenance">This could possibly be considered as an emergent resource.</Note>
            <Note Type="Theoretical">It could be argued that the "confused deputy" is a fundamental aspect of most vulnerabilities that require an active attacker. Even for common implementation issues such as buffer overflows, SQL injection, OS command injection, and path traversal, the vulnerable program already has the authorization to run code or access files. The vulnerability arises when the attacker causes the program to run unexpected code or access unexpected files.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="460" Name="Improper Cleanup on Thrown Exception" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.</Description>
         <Extended_Description>Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="459" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="755" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="C" Prevalence="Undetermined"/>
            <Language Name="C++" Prevalence="Undetermined"/>
            <Language Name="Java" Prevalence="Undetermined"/>
            <Language Name="C#" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Other</Scope>
               <Impact>Varies by Context</Impact>
               <Note>The code could be left in a bad state.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following example demonstrates the weakness.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public class foo {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>public static final void main( String args[] ) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>boolean returnValue;<xhtml:br/>returnValue=doStuff();</xhtml:div>
                           </xhtml:div>}<xhtml:br/>public static final boolean doStuff( ) {<xhtml:div style="margin-left:10px;">
                              <xhtml:div>
                                 <xhtml:br/>boolean threadLock;<xhtml:br/>boolean truthvalue=true;<xhtml:br/>try {<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>
                                       <xhtml:br/>while(<xhtml:br/>
                                       <xhtml:i>//check some condition</xhtml:i>
                                       <xhtml:br/>) {<xhtml:div style="margin-left:10px;">
                                          <xhtml:div>
                                             <xhtml:br/>threadLock=true; //do some stuff to truthvalue<xhtml:br/>threadLock=false;</xhtml:div>
                                       </xhtml:div>}</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>catch (Exception e){<xhtml:div style="margin-left:10px;">
                                    <xhtml:div>
                                       <xhtml:br/>System.err.println("You did something bad");<xhtml:br/>if (something) return truthvalue;</xhtml:div>
                                 </xhtml:div>}<xhtml:br/>return truthvalue;</xhtml:div>
                           </xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>In this case, you may leave a thread locked accidentally.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Improper cleanup on thrown exception</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR03-J</Entry_ID>
               <Entry_Name>Restore prior object state on method failure</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>ERR05-J</Entry_ID>
               <Entry_Name>Do not let checked exceptions escape from a finally block</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="SEI CERT Perl Coding Standard">
               <Entry_ID>EXP31-PL</Entry_ID>
               <Entry_Name>Do not suppress or ignore exceptions</Entry_Name>
               <Mapping_Fit>Imprecise</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         
      </Weakness>
      <Weakness ID="472" Name="External Control of Assumed-Immutable Web Parameter" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.</Description>
         <Extended_Description>
            <xhtml:p>If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input.</xhtml:p>
            <xhtml:p>For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="642" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="471" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="471" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Assumed-Immutable Parameter Tampering</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
               <Note>Without appropriate protection mechanisms, the client can easily tamper with cookies and similar web data. Reliance on the cookies without detailed validation can lead to problems such as SQL injection. If you use cookie values for security related decisions on the server side, manipulating the cookies might lead to violations of security policies such as authentication bypassing, user impersonation and privilege escalation. In addition, storing sensitive data in the cookie without appropriate protection can also lead to disclosure of sensitive user data, especially data stored in persistent cookies.</Note>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-5">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>
                  <xhtml:p>Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.</xhtml:p>
                  <xhtml:p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue."</xhtml:p>
                  <xhtml:p>Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). A blacklist is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-20">
               <Phase>Implementation</Phase>
               <Strategy>Input Validation</Strategy>
               <Description>Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass whitelist validation schemes by introducing dangerous inputs after they have been checked.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In this example, a web application uses the value of a hidden form field (accountID) without having done any input validation because it was assumed to be immutable.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>String accountID = request.getParameter("accountID");<xhtml:br/>User user = getUserFromID(Long.parseLong(accountID));</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>Hidden fields should not be trusted as secure parameters.</Intro_Text>
               <Body_Text>An attacker can intercept and alter hidden fields in a post to the server as easily as user input fields. An attacker can simply parse the HTML for the substring:</Body_Text>
               <Example_Code Nature="bad" Language="HTML">
                  <xhtml:div>&lt;input type="hidden"</xhtml:div>
               </Example_Code>
               <Body_Text>or even just "hidden". Hidden field values displayed later in the session, such as on the following page, can open a site up to cross-site scripting attacks.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2002-0108</Reference>
               <Description>Forum product allows spoofed messages of other users via hidden form fields for name and e-mail address.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0108</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0253</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0253</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0254</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0254</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0926</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0926</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0101</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0101</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0102</Reference>
               <Description>Shopping cart allows price modification via hidden form field.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0102</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-0758</Reference>
               <Description>Allows admin access by modifying value of form field.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0758</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-1880</Reference>
               <Description>Read messages by modifying message ID parameter.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1880</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2000-1234</Reference>
               <Description>Send email to arbitrary users by modifying email parameter.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1234</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1652</Reference>
               <Description>Authentication bypass by setting a parameter.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1652</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1784</Reference>
               <Description>Product does not check authorization for configuration change admin script, leading to password theft via modified e-mail address field.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1784</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-2314</Reference>
               <Description>Logic error leads to password disclosure.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2314</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-1682</Reference>
               <Description>Modification of message number parameter allows attackers to read other people's messages.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-1682</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>Web Parameter Tampering</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2007">
               <Entry_ID>A4</Entry_ID>
               <Entry_Name>Insecure Direct Object Reference</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="OWASP Top Ten 2004">
               <Entry_ID>A1</Entry_ID>
               <Entry_Name>Unvalidated Input</Entry_Name>
               <Mapping_Fit>CWE More Specific</Mapping_Fit>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="146"/>
            <Related_Attack_Pattern CAPEC_ID="226"/>
            <Related_Attack_Pattern CAPEC_ID="31"/>
            <Related_Attack_Pattern CAPEC_ID="39"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 4: Use of Magic URLs, Predictable Cookies, and Hidden Form&#xA;                  Fields.&#34; Page 75"/>
            <Reference External_Reference_ID="REF-62" Section="Chapter 17, &#34;Embedding State in HTML and URLs&#34;, Page 1032"/>
         </References>
         <Notes>
            <Note Type="Relationship">This is a primary weakness for many other weaknesses and functional consequences, including XSS, SQL injection, path disclosure, and file inclusion.</Note>
            <Note Type="Theoretical">This is a technology-specific MAID problem.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="473" Name="PHP External Variable Modification" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.</Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="471" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="471" View_ID="699" Ordinal="Primary"/>
            <Related_Weakness Nature="CanPrecede" CWE_ID="98" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="PHP" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Modify Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Requirements</Phase>
               <Phase>Implementation</Phase>
               <Description>Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2000-0860</Reference>
               <Description>File upload allows arbitrary file read by setting hidden form variables to match internal variable names.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0860</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-0854</Reference>
               <Description>Mistakenly trusts $PHP_SELF variable to determine if include script was called by its parent.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0854</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0764</Reference>
               <Description>PHP remote file inclusion by modified assumed-immutable variable.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0764</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1025</Reference>
               <Description>Modify key variable when calling scripts that don't load a library that initializes it.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1025</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2003-0754</Reference>
               <Description>Authentication bypass by modifying array used for authentication.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0754</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="PLOVER">
               <Entry_Name>PHP External Variable Modification</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="77"/>
         </Related_Attack_Patterns>
         <Notes>
            <Note Type="Relationship">This is a language-specific instance of Modification of Assumed-Immutable Data (MAID). This can be resultant from direct request (alternate path) issues. It can be primary to weaknesses such as PHP file inclusion, SQL injection, XSS, authentication bypass, and others.</Note>
         </Notes>
         
      </Weakness>
      <Weakness ID="488" Name="Exposure of Data Element to Wrong Session" Abstraction="Variant" Structure="Simple" Status="Draft">
         <Description>The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.</Description>
         <Extended_Description>
            <xhtml:p>Data can "bleed" from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool.</xhtml:p>
            <xhtml:p>In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="664" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="269" View_ID="699" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>REALIZATION: This weakness is caused during implementation of an architectural security tactic.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Testing</Phase>
               <Description>Use a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>In a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following Servlet stores the value of a request parameter in a member field and then later echoes the parameter value to the response output stream.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>public class GuestBook extends HttpServlet {<xhtml:div style="margin-left:10px;">
                        <xhtml:div>String name;<xhtml:br/>
                           <xhtml:br/>protected void doPost (HttpServletRequest req, HttpServletResponse res) {<xhtml:div style="margin-left:10px;">name = req.getParameter("name");<xhtml:br/>...<xhtml:br/>out.println(name + ", thanks for visiting!");</xhtml:div>}</xhtml:div>
                     </xhtml:div>}</xhtml:div>
               </Example_Code>
               <Body_Text>While this code will work perfectly in a single-user environment, if two users access the Servlet at approximately the same time, it is possible for the two request handler threads to interleave in the following way: Thread 1: assign "Dick" to name Thread 2: assign "Jane" to name Thread 1: print "Jane, thanks for visiting!" Thread 2: print "Jane, thanks for visiting!" Thereby showing the first user the second user's name.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Data Leaking Between Users</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="59"/>
            <Related_Attack_Pattern CAPEC_ID="60"/>
         </Related_Attack_Patterns>
         
      </Weakness>
      <Weakness ID="494" Name="Download of Code Without Integrity Check" Abstraction="Base" Structure="Simple" Status="Draft">
         <Description>The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.</Description>
         <Extended_Description>An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="669" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="PeerOf" CWE_ID="79" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Language-Independent" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Availability</Scope>
               <Scope>Confidentiality</Scope>
               <Scope>Other</Scope>
               <Impact>Execute Unauthorized Code or Commands</Impact>
               <Impact>Alter Execution Logic</Impact>
               <Impact>Other</Impact>
               <Note>Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method Detection_Method_ID="DM-7.4">
               <Method>Manual Analysis</Method>
               <Description>
                  <xhtml:p>This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.</xhtml:p>
                  <xhtml:p>Specifically, manual static analysis is typically required to find the behavior that triggers the download of code, and to determine whether integrity-checking methods are in use.</xhtml:p>
               </Description>
               <Effectiveness_Notes>These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.</Effectiveness_Notes>
            </Detection_Method>
            <Detection_Method Detection_Method_ID="DM-11">
               <Method>Black Box</Method>
               <Description>
                  <xhtml:p>Use monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.</xhtml:p>
                  <xhtml:p>Attach the monitor to the process and also sniff the network connection. Trigger features related to product updates or plugin installation, which is likely to force a code download. Monitor when files are downloaded and separately executed, or if they are otherwise read back into the process. Look for evidence of cryptographic library calls that use integrity checking.</xhtml:p>
               </Description>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation Mitigation_ID="MIT-42">
               <Phase>Implementation</Phase>
               <Description>Perform proper forward and reverse DNS lookups to detect DNS spoofing.</Description>
               <Effectiveness_Notes>This is only a partial solution since it will not prevent your code from being modified on the hosting site or in transit.</Effectiveness_Notes>
            </Mitigation>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Description>
                  <xhtml:p>Encrypt the code with a reliable encryption scheme before transmitting.</xhtml:p>
                  <xhtml:p>This will only be a partial solution, since it will not detect DNS spoofing and it will not prevent your code from being modified on the hosting site.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-4">
               <Phase>Architecture and Design</Phase>
               <Strategy>Libraries or Frameworks</Strategy>
               <Description>
                  <xhtml:p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.</xhtml:p>
                  <xhtml:p>Speficially, it may be helpful to use tools or frameworks to perform integrity checking on the transmitted code.</xhtml:p>
                  <xhtml:div style="margin-left:10px;">
                     <xhtml:ul>
                        <xhtml:li>When providing the code that is to be downloaded, such as for automatic updates of the software, then use cryptographic signatures for the code and modify the download clients to verify the signatures. Ensure that the implementation does not contain CWE-295, CWE-320, CWE-347, and related weaknesses.</xhtml:li>
                        <xhtml:li>Use code signing technologies such as Authenticode. See references [REF-454] [REF-455] [REF-456].</xhtml:li>
                     </xhtml:ul>
                  </xhtml:div>
               </Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-17">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Environment Hardening</Strategy>
               <Description>Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.</Description>
            </Mitigation>
            <Mitigation Mitigation_ID="MIT-22">
               <Phase>Architecture and Design</Phase>
               <Phase>Operation</Phase>
               <Strategy>Sandbox or Jail</Strategy>
               <Description>
                  <xhtml:p>Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.</xhtml:p>
                  <xhtml:p>OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.</xhtml:p>
                  <xhtml:p>This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.</xhtml:p>
                  <xhtml:p>Be careful to avoid CWE-243 and other weaknesses related to jails.</xhtml:p>
               </Description>
               <Effectiveness>Limited</Effectiveness>
               <Effectiveness_Notes>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>This example loads an external class from a local subdirectory.</Intro_Text>
               <Example_Code Nature="bad" Language="Java">
                  <xhtml:div>URL[] classURLs= new URL[]{<xhtml:div style="margin-left:10px;">new URL("file:subdir/")</xhtml:div>};<xhtml:br/>URLClassLoader loader = new URLClassLoader(classURLs);<xhtml:br/>Class loadedClass = Class.forName("loadMe", true, loader);</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not ensure that the class loaded is the intended one, for example by verifying the class's checksum. An attacker may be able to modify the class file to execute malicious code.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>This code includes an external script to get database credentials, then authenticates a user against the database, allowing access to the application.</Intro_Text>
               <Example_Code Nature="bad" Language="PHP">
                  <xhtml:div>
                     <xhtml:i>//assume the password is already encrypted, avoiding CWE-312</xhtml:i>
                     <xhtml:br/>
                     <xhtml:br/>function authenticate($username,$password){<xhtml:div style="margin-left:10px;">
                        <xhtml:br/>include("http://external.example.com/dbInfo.php");<xhtml:br/>
                        <xhtml:br/>
                        <xhtml:i>//dbInfo.php makes $dbhost, $dbuser, $dbpass, $dbname available</xhtml:i>
                        <xhtml:br/>mysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql');<xhtml:br/>mysql_select_db($dbname);<xhtml:br/>$query = 'Select * from users where username='.$username.' And password='.$password;<xhtml:br/>$result = mysql_query($query);<xhtml:br/>
                        <xhtml:br/>if(mysql_numrows($result) == 1){<xhtml:div style="margin-left:10px;">mysql_close();<xhtml:br/>return true;</xhtml:div>}<xhtml:br/>else{<xhtml:div style="margin-left:10px;">mysql_close();<xhtml:br/>return false;</xhtml:div>}</xhtml:div>
                     <xhtml:br/>}</xhtml:div>
               </Example_Code>
               <Body_Text>This code does not verify that the external domain accessed is the intended one. An attacker may somehow cause the external domain name to resolve to an attack server, which would provide the information for a false database. The attacker may then steal the usernames and encrypted passwords from real user login attempts, or simply allow himself to access the application without a real user account.</Body_Text>
               <Body_Text>This example is also vulnerable to a Man in the Middle (CWE-300) attack.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2008-3438</Reference>
               <Description>OS does not verify authenticity of its own updates.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3438</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2008-3324</Reference>
               <Description>online poker client does not verify authenticity of its own updates.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-3324</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2001-1125</Reference>
               <Description>anti-virus product does not verify automatic updates for itself.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1125</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2002-0671</Reference>
               <Description>VOIP phone downloads applications from web sites without verifying integrity.</Description>
               <Link>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0671</Link>
            </Observed_Example>
         </Observed_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="CLASP">
               <Entry_Name>Invoking untrusted mobile code</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="The CERT Oracle Secure Coding Standard for Java (2011)">
               <Entry_ID>SEC06-J</Entry_ID>
               <Entry_Name>Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP27</Entry_ID>
               <Entry_Name>Tainted input to environment</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="184"/>
            <Related_Attack_Pattern CAPEC_ID="185"/>
            <Related_Attack_Pattern CAPEC_ID="186"/>
            <Related_Attack_Pattern CAPEC_ID="187"/>
            <Related_Attack_Pattern CAPEC_ID="533"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-454"/>
            <Reference External_Reference_ID="REF-455"/>
            <Reference External_Reference_ID="REF-456"/>
            <Reference External_Reference_ID="REF-457"/>
            <Reference External_Reference_ID="REF-44" Section="&#34;Sin 18: The Sins of Mobile Code.&#34; Page 267"/>
            <Reference External_Reference_ID="REF-459"/>
            <Reference External_Reference_ID="REF-76"/>
         </References>
         <Notes>
            <Note Type="Research Gap">This is critical for mobile code, but it is likely to become more and more common as developers continue to adopt automated, network-based product distributions and upgrades. Software-as-a-Service (SaaS) might introduce additional subtleties. Common exploitation scenarios may include ad server compromises and bad upgrades.</Note>
         </Notes>
         
      </Weakness>
      
   </Weaknesses>
   <Categories>
      <Category ID="1009" Name="Audit" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of audit-based components of the system. Frequently these deal with logging user activities in order to identify attackers and modifications to the system. The weaknesses in this category could lead to a degradation of the quality of the audit capability if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="117" View_ID="1008"/>
            <Has_Member CWE_ID="223" View_ID="1008"/>
            <Has_Member CWE_ID="224" View_ID="1008"/>
            <Has_Member CWE_ID="532" View_ID="1008"/>
            <Has_Member CWE_ID="778" View_ID="1008"/>
            <Has_Member CWE_ID="779" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1010" Name="Authenticate Actors" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of authentication components of the system. Frequently these deal with verifying the entity is indeed who it claims to be. The weaknesses in this category could lead to a degradation of the quality of authentication if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="258" View_ID="1008"/>
            <Has_Member CWE_ID="259" View_ID="1008"/>
            <Has_Member CWE_ID="262" View_ID="1008"/>
            <Has_Member CWE_ID="263" View_ID="1008"/>
            <Has_Member CWE_ID="287" View_ID="1008"/>
            <Has_Member CWE_ID="288" View_ID="1008"/>
            <Has_Member CWE_ID="289" View_ID="1008"/>
            <Has_Member CWE_ID="290" View_ID="1008"/>
            <Has_Member CWE_ID="291" View_ID="1008"/>
            <Has_Member CWE_ID="293" View_ID="1008"/>
            <Has_Member CWE_ID="294" View_ID="1008"/>
            <Has_Member CWE_ID="301" View_ID="1008"/>
            <Has_Member CWE_ID="302" View_ID="1008"/>
            <Has_Member CWE_ID="303" View_ID="1008"/>
            <Has_Member CWE_ID="304" View_ID="1008"/>
            <Has_Member CWE_ID="305" View_ID="1008"/>
            <Has_Member CWE_ID="306" View_ID="1008"/>
            <Has_Member CWE_ID="307" View_ID="1008"/>
            <Has_Member CWE_ID="308" View_ID="1008"/>
            <Has_Member CWE_ID="322" View_ID="1008"/>
            <Has_Member CWE_ID="521" View_ID="1008"/>
            <Has_Member CWE_ID="593" View_ID="1008"/>
            <Has_Member CWE_ID="603" View_ID="1008"/>
            <Has_Member CWE_ID="620" View_ID="1008"/>
            <Has_Member CWE_ID="640" View_ID="1008"/>
            <Has_Member CWE_ID="798" View_ID="1008"/>
            <Has_Member CWE_ID="836" View_ID="1008"/>
            <Has_Member CWE_ID="916" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1011" Name="Authorize Actors" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of a system's authorization components. Frequently these deal with enforcing that agents have the required permissions before performing certain operations, such as modifying data. The weaknesses in this category could lead to a degredation of quality of the authorization capability if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="114" View_ID="1008"/>
            <Has_Member CWE_ID="15" View_ID="1008"/>
            <Has_Member CWE_ID="219" View_ID="1008"/>
            <Has_Member CWE_ID="220" View_ID="1008"/>
            <Has_Member CWE_ID="266" View_ID="1008"/>
            <Has_Member CWE_ID="267" View_ID="1008"/>
            <Has_Member CWE_ID="268" View_ID="1008"/>
            <Has_Member CWE_ID="269" View_ID="1008"/>
            <Has_Member CWE_ID="270" View_ID="1008"/>
            <Has_Member CWE_ID="271" View_ID="1008"/>
            <Has_Member CWE_ID="272" View_ID="1008"/>
            <Has_Member CWE_ID="273" View_ID="1008"/>
            <Has_Member CWE_ID="274" View_ID="1008"/>
            <Has_Member CWE_ID="276" View_ID="1008"/>
            <Has_Member CWE_ID="277" View_ID="1008"/>
            <Has_Member CWE_ID="279" View_ID="1008"/>
            <Has_Member CWE_ID="280" View_ID="1008"/>
            <Has_Member CWE_ID="281" View_ID="1008"/>
            <Has_Member CWE_ID="282" View_ID="1008"/>
            <Has_Member CWE_ID="283" View_ID="1008"/>
            <Has_Member CWE_ID="284" View_ID="1008"/>
            <Has_Member CWE_ID="285" View_ID="1008"/>
            <Has_Member CWE_ID="286" View_ID="1008"/>
            <Has_Member CWE_ID="300" View_ID="1008"/>
            <Has_Member CWE_ID="341" View_ID="1008"/>
            <Has_Member CWE_ID="359" View_ID="1008"/>
            <Has_Member CWE_ID="403" View_ID="1008"/>
            <Has_Member CWE_ID="419" View_ID="1008"/>
            <Has_Member CWE_ID="420" View_ID="1008"/>
            <Has_Member CWE_ID="425" View_ID="1008"/>
            <Has_Member CWE_ID="426" View_ID="1008"/>
            <Has_Member CWE_ID="434" View_ID="1008"/>
            <Has_Member CWE_ID="527" View_ID="1008"/>
            <Has_Member CWE_ID="528" View_ID="1008"/>
            <Has_Member CWE_ID="529" View_ID="1008"/>
            <Has_Member CWE_ID="530" View_ID="1008"/>
            <Has_Member CWE_ID="538" View_ID="1008"/>
            <Has_Member CWE_ID="551" View_ID="1008"/>
            <Has_Member CWE_ID="552" View_ID="1008"/>
            <Has_Member CWE_ID="566" View_ID="1008"/>
            <Has_Member CWE_ID="639" View_ID="1008"/>
            <Has_Member CWE_ID="642" View_ID="1008"/>
            <Has_Member CWE_ID="647" View_ID="1008"/>
            <Has_Member CWE_ID="653" View_ID="1008"/>
            <Has_Member CWE_ID="656" View_ID="1008"/>
            <Has_Member CWE_ID="668" View_ID="1008"/>
            <Has_Member CWE_ID="669" View_ID="1008"/>
            <Has_Member CWE_ID="671" View_ID="1008"/>
            <Has_Member CWE_ID="673" View_ID="1008"/>
            <Has_Member CWE_ID="708" View_ID="1008"/>
            <Has_Member CWE_ID="732" View_ID="1008"/>
            <Has_Member CWE_ID="770" View_ID="1008"/>
            <Has_Member CWE_ID="782" View_ID="1008"/>
            <Has_Member CWE_ID="827" View_ID="1008"/>
            <Has_Member CWE_ID="862" View_ID="1008"/>
            <Has_Member CWE_ID="863" View_ID="1008"/>
            <Has_Member CWE_ID="921" View_ID="1008"/>
            <Has_Member CWE_ID="923" View_ID="1008"/>
            <Has_Member CWE_ID="939" View_ID="1008"/>
            <Has_Member CWE_ID="942" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1012" Name="Cross Cutting" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of multiple security tactics and how they affect a system. For example, information exposure can impact the Limit Access and Limit Exposure security tactics. The weaknesses in this category could lead to a degradation of the quality of many capabilities if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="208" View_ID="1008"/>
            <Has_Member CWE_ID="392" View_ID="1008"/>
            <Has_Member CWE_ID="460" View_ID="1008"/>
            <Has_Member CWE_ID="544" View_ID="1008"/>
            <Has_Member CWE_ID="602" View_ID="1008"/>
            <Has_Member CWE_ID="703" View_ID="1008"/>
            <Has_Member CWE_ID="754" View_ID="1008"/>
            <Has_Member CWE_ID="784" View_ID="1008"/>
            <Has_Member CWE_ID="807" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1013" Name="Encrypt Data" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of data confidentiality in a system. Frequently these deal with the use of encryption libraries. The weaknesses in this category could lead to a degradation of the quality data encyprtion if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="256" View_ID="1008"/>
            <Has_Member CWE_ID="257" View_ID="1008"/>
            <Has_Member CWE_ID="260" View_ID="1008"/>
            <Has_Member CWE_ID="261" View_ID="1008"/>
            <Has_Member CWE_ID="311" View_ID="1008"/>
            <Has_Member CWE_ID="312" View_ID="1008"/>
            <Has_Member CWE_ID="313" View_ID="1008"/>
            <Has_Member CWE_ID="314" View_ID="1008"/>
            <Has_Member CWE_ID="315" View_ID="1008"/>
            <Has_Member CWE_ID="316" View_ID="1008"/>
            <Has_Member CWE_ID="317" View_ID="1008"/>
            <Has_Member CWE_ID="318" View_ID="1008"/>
            <Has_Member CWE_ID="319" View_ID="1008"/>
            <Has_Member CWE_ID="321" View_ID="1008"/>
            <Has_Member CWE_ID="323" View_ID="1008"/>
            <Has_Member CWE_ID="324" View_ID="1008"/>
            <Has_Member CWE_ID="325" View_ID="1008"/>
            <Has_Member CWE_ID="326" View_ID="1008"/>
            <Has_Member CWE_ID="327" View_ID="1008"/>
            <Has_Member CWE_ID="328" View_ID="1008"/>
            <Has_Member CWE_ID="330" View_ID="1008"/>
            <Has_Member CWE_ID="331" View_ID="1008"/>
            <Has_Member CWE_ID="332" View_ID="1008"/>
            <Has_Member CWE_ID="333" View_ID="1008"/>
            <Has_Member CWE_ID="334" View_ID="1008"/>
            <Has_Member CWE_ID="335" View_ID="1008"/>
            <Has_Member CWE_ID="336" View_ID="1008"/>
            <Has_Member CWE_ID="337" View_ID="1008"/>
            <Has_Member CWE_ID="338" View_ID="1008"/>
            <Has_Member CWE_ID="339" View_ID="1008"/>
            <Has_Member CWE_ID="347" View_ID="1008"/>
            <Has_Member CWE_ID="522" View_ID="1008"/>
            <Has_Member CWE_ID="523" View_ID="1008"/>
            <Has_Member CWE_ID="757" View_ID="1008"/>
            <Has_Member CWE_ID="759" View_ID="1008"/>
            <Has_Member CWE_ID="760" View_ID="1008"/>
            <Has_Member CWE_ID="780" View_ID="1008"/>
            <Has_Member CWE_ID="922" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1014" Name="Identify Actors" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of a system's identification management components. Frequently these deal with verifying that external agents provide inputs into the system. The weaknesses in this category could lead to a degradation of the quality of identification maangment if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="295" View_ID="1008"/>
            <Has_Member CWE_ID="296" View_ID="1008"/>
            <Has_Member CWE_ID="297" View_ID="1008"/>
            <Has_Member CWE_ID="298" View_ID="1008"/>
            <Has_Member CWE_ID="299" View_ID="1008"/>
            <Has_Member CWE_ID="345" View_ID="1008"/>
            <Has_Member CWE_ID="346" View_ID="1008"/>
            <Has_Member CWE_ID="370" View_ID="1008"/>
            <Has_Member CWE_ID="441" View_ID="1008"/>
            <Has_Member CWE_ID="599" View_ID="1008"/>
            <Has_Member CWE_ID="940" View_ID="1008"/>
            <Has_Member CWE_ID="941" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1015" Name="Limit Access" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of system resources. Frequently these deal with restricting the amount of resources that are accessed by actors, such as memory, network connections, CPU or access points. The weaknesses in this category could lead to a degradation of the quality of authentication if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="201" View_ID="1008"/>
            <Has_Member CWE_ID="209" View_ID="1008"/>
            <Has_Member CWE_ID="212" View_ID="1008"/>
            <Has_Member CWE_ID="243" View_ID="1008"/>
            <Has_Member CWE_ID="250" View_ID="1008"/>
            <Has_Member CWE_ID="610" View_ID="1008"/>
            <Has_Member CWE_ID="611" View_ID="1008"/>
            <Has_Member CWE_ID="73" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1016" Name="Limit Exposure" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of the entry points to a system. Frequently these deal with minimizing the attack surface through designing the system with the least needed amount of entry points. The weaknesses in this category could lead to a degradation of a system's defenses if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="210" View_ID="1008"/>
            <Has_Member CWE_ID="211" View_ID="1008"/>
            <Has_Member CWE_ID="214" View_ID="1008"/>
            <Has_Member CWE_ID="550" View_ID="1008"/>
            <Has_Member CWE_ID="829" View_ID="1008"/>
            <Has_Member CWE_ID="830" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1017" Name="Lock Computer" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of a system's lockout mechanism. Frequently these deal with scenarios that take effect in case of multiple failed attempts to access a given resource. The weaknesses in this category could lead to a degradation of access to system assets if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="645" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1018" Name="Manage User Sessions" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of session managment. Frequently these deal with the information or status about each user and their access rights for the duration of multiple requests. The weaknesses in this category could lead to a degradation of the quality of session managment if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="384" View_ID="1008"/>
            <Has_Member CWE_ID="488" View_ID="1008"/>
            <Has_Member CWE_ID="579" View_ID="1008"/>
            <Has_Member CWE_ID="6" View_ID="1008"/>
            <Has_Member CWE_ID="613" View_ID="1008"/>
            <Has_Member CWE_ID="841" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1019" Name="Validate Inputs" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of a system's input validation components. Frequently these deal with sanitizing, neutralizing and validating any externally provided inputs to minimize malformed data from entering the system and preventing code injection in the input data. The weaknesses in this category could lead to a degradation of the quality of data flow in a system if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="138" View_ID="1008"/>
            <Has_Member CWE_ID="150" View_ID="1008"/>
            <Has_Member CWE_ID="20" View_ID="1008"/>
            <Has_Member CWE_ID="349" View_ID="1008"/>
            <Has_Member CWE_ID="352" View_ID="1008"/>
            <Has_Member CWE_ID="472" View_ID="1008"/>
            <Has_Member CWE_ID="473" View_ID="1008"/>
            <Has_Member CWE_ID="502" View_ID="1008"/>
            <Has_Member CWE_ID="59" View_ID="1008"/>
            <Has_Member CWE_ID="601" View_ID="1008"/>
            <Has_Member CWE_ID="641" View_ID="1008"/>
            <Has_Member CWE_ID="643" View_ID="1008"/>
            <Has_Member CWE_ID="652" View_ID="1008"/>
            <Has_Member CWE_ID="74" View_ID="1008"/>
            <Has_Member CWE_ID="75" View_ID="1008"/>
            <Has_Member CWE_ID="76" View_ID="1008"/>
            <Has_Member CWE_ID="77" View_ID="1008"/>
            <Has_Member CWE_ID="78" View_ID="1008"/>
            <Has_Member CWE_ID="79" View_ID="1008"/>
            <Has_Member CWE_ID="790" View_ID="1008"/>
            <Has_Member CWE_ID="791" View_ID="1008"/>
            <Has_Member CWE_ID="792" View_ID="1008"/>
            <Has_Member CWE_ID="793" View_ID="1008"/>
            <Has_Member CWE_ID="794" View_ID="1008"/>
            <Has_Member CWE_ID="795" View_ID="1008"/>
            <Has_Member CWE_ID="796" View_ID="1008"/>
            <Has_Member CWE_ID="797" View_ID="1008"/>
            <Has_Member CWE_ID="88" View_ID="1008"/>
            <Has_Member CWE_ID="89" View_ID="1008"/>
            <Has_Member CWE_ID="90" View_ID="1008"/>
            <Has_Member CWE_ID="91" View_ID="1008"/>
            <Has_Member CWE_ID="93" View_ID="1008"/>
            <Has_Member CWE_ID="94" View_ID="1008"/>
            <Has_Member CWE_ID="943" View_ID="1008"/>
            <Has_Member CWE_ID="95" View_ID="1008"/>
            <Has_Member CWE_ID="96" View_ID="1008"/>
            <Has_Member CWE_ID="97" View_ID="1008"/>
            <Has_Member CWE_ID="98" View_ID="1008"/>
            <Has_Member CWE_ID="99" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
      <Category ID="1020" Name="Verify Message Integrity" Status="Draft">
         <Summary>Weaknesses in this category are related to the design and architecture of a system's data integrity components. Frequently these deal with ensuring integrity of data, such as messages, resource files, deployment files, and configuration files. The weaknesses in this category could lead to a degradation of data integrity quality if they are not addressed when designing or implementing a secure architecture.</Summary>
         <Relationships>
            <Has_Member CWE_ID="353" View_ID="1008"/>
            <Has_Member CWE_ID="354" View_ID="1008"/>
            <Has_Member CWE_ID="390" View_ID="1008"/>
            <Has_Member CWE_ID="391" View_ID="1008"/>
            <Has_Member CWE_ID="494" View_ID="1008"/>
            <Has_Member CWE_ID="565" View_ID="1008"/>
            <Has_Member CWE_ID="649" View_ID="1008"/>
            <Has_Member CWE_ID="707" View_ID="1008"/>
            <Has_Member CWE_ID="755" View_ID="1008"/>
            <Has_Member CWE_ID="924" View_ID="1008"/>
         </Relationships>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         
      </Category>
   </Categories>
   <Views>
      <View ID="1008" Name="Architectural Concepts" Type="Graph" Status="Incomplete">
         <Objective>This view organizes weaknesses according to common architectural security tactics. It is intended to assist architects in identifying potential mistakes that can be made when designing software.</Objective>
         <Audience>
            <Stakeholder>
               <Type>Software Designers</Type>
               <Description>Software designers may find this view useful as the weaknesses are organized by known security tactics, aiding the designer in embedding security throughout the design process instead of discovering weaknesses after the software has been built.</Description>
            </Stakeholder>
            <Stakeholder>
               <Type>Educators</Type>
               <Description>Educators may use this view as reference material when discussing security by design or architectural weaknesses, and the types of mistakes that can be made.</Description>
            </Stakeholder>
         </Audience>
         <Members>
            <Has_Member CWE_ID="1009" View_ID="1008"/>
            <Has_Member CWE_ID="1010" View_ID="1008"/>
            <Has_Member CWE_ID="1011" View_ID="1008"/>
            <Has_Member CWE_ID="1012" View_ID="1008"/>
            <Has_Member CWE_ID="1013" View_ID="1008"/>
            <Has_Member CWE_ID="1014" View_ID="1008"/>
            <Has_Member CWE_ID="1015" View_ID="1008"/>
            <Has_Member CWE_ID="1016" View_ID="1008"/>
            <Has_Member CWE_ID="1017" View_ID="1008"/>
            <Has_Member CWE_ID="1018" View_ID="1008"/>
            <Has_Member CWE_ID="1019" View_ID="1008"/>
            <Has_Member CWE_ID="1020" View_ID="1008"/>
         </Members>
         <References>
            <Reference External_Reference_ID="REF-9"/>
            <Reference External_Reference_ID="REF-10" Section="pages 69 - 78"/>
         </References>
         <Notes>
            <Note Type="Other">The top level categories in this view represent the individual tactics that are part of a secure-by-design approach to software development. The weaknesses that are members of each category contain information about how each is introduced relative to the software's architecture. Three different modes of introduction are used: Omission - caused by missing a security tactic when it is necessary. Commission - refers to incorrect choice of tactics which could result in undesirable consequences. Realization - appropriate security tactics are adopted but are incorrectly implemented.</Note>
            <Note Type="Maintenance">This view is under development, and subsequent releases will focus on reviewing the individual weaknesses to verify their inclusion in this view and adding any applicable ChildOf relationships. Comments about revisions are welcome.</Note>
         </Notes>
         
      </View>
   </Views>
   <External_References>
      <External_Reference Reference_ID="REF-10">
		  <Author>Santos, J. C. S.</Author>
		  <Author>Peruma, A.</Author>
		  <Author>Mirakhorli, M.</Author>
		  <Author>Galster, M.</Author>
		  <Author>Sejfia, A.</Author>
		  <Title>Understanding Software Vulnerabilities Related to Architectural Security Tactics: An Empirical Investigation of Chromium, PHP and Thunderbird.</Title>
		  <Publication>2017 IEEE International Conference on Software Architecture (ICSA)</Publication>
		  <Publication_Year>2017</Publication_Year>
		  <URL>https://design.se.rit.edu/papers/TacticalVulnerabilities.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-140">
		  <Author>Greg Hoglund</Author>
		  <Author>Gary McGraw</Author>
		  <Title>Exploiting Software: How to Break Code</Title>
		  <Publication_Year>2004</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---27</Publication_Day>
		  <Publisher>Addison-Wesley</Publisher>
		  <URL>https://www.amazon.com/Exploiting-Software-How-Break-Code/dp/0201786958</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-166">
		  <Author>Jim Manico</Author>
		  <Title>Input Validation with ESAPI - Very Important</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <URL>http://manicode.blogspot.com/2008/08/input-validation-with-esapi.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-168">
		  <Author>Joel Scambray</Author>
		  <Author>Mike Shema</Author>
		  <Author>Caleb Sima</Author>
		  <Title>Hacking Exposed Web Applications, Second Edition</Title>
		  <Publication_Year>2006</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <Publication_Day>---05</Publication_Day>
		  <Publisher>McGraw-Hill</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-170">
		  <Author>Kevin Beaver</Author>
		  <Title>The importance of input validation</Title>
		  <Publication_Year>2006</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---06</Publication_Day>
		  <URL>http://searchsoftwarequality.techtarget.com/tip/0,289483,sid92_gci1214373,00.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-172">
		  <Author>Chris Wysopal</Author>
		  <Title>Mobile App Top 10 List</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---13</Publication_Day>
		  <URL>http://www.veracode.com/blog/2010/12/mobile-app-top-10-list/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-174">
		  <Author>Web Application Security Consortium</Author>
		  <Title>Information Leakage</Title>
		  <URL>http://www.webappsec.org/projects/threat/classes/information_leakage.shtml</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-175">
		  <Author>Brian Chess</Author>
		  <Author>Jacob West</Author>
		  <Title>Secure Programming with Static Analysis</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publisher>Addison-Wesley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-176">
		  <Author>Michael Howard</Author>
		  <Author>David LeBlanc</Author>
		  <Title>Writing Secure Code</Title>
		  <Edition>1st Edition</Edition>
		  <Publication_Year>2001</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <Publication_Day>---13</Publication_Day>
		  <Publisher>Microsoft Press</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-179">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 16 - Information Exposure Through an Error Message</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---17</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://software-security.sans.org/blog/2010/03/17/top-25-series-rank-16-information-exposure-through-an-error-message</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-185">
		  <Author>OWASP</Author>
		  <Title>Testing for Path Traversal (OWASP-AZ-001)</Title>
		  <URL>http://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-196">
		  <Author>Jerome H. Saltzer</Author>
		  <Author>Michael D. Schroeder</Author>
		  <Title>The Protection of Information in Computer Systems</Title>
		  <Publication>Proceedings of the IEEE 63</Publication>
		  <Publication_Year>1975</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <URL>http://web.mit.edu/Saltzer/www/publications/protection/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-199">
		  <Author>NIST</Author>
		  <Title>Federal Desktop Core Configuration</Title>
		  <URL>http://nvd.nist.gov/fdcc/index.cfm</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-207">
		  <Author>John Viega</Author>
		  <Author>Gary McGraw</Author>
		  <Title>Building Secure Software: How to Avoid Security Problems the Right Way</Title>
		  <Edition>1st Edition</Edition>
		  <Publication_Year>2002</Publication_Year>
		  <Publisher>Addison-Wesley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-229">
		  <Author>NIST</Author>
		  <Title>Role Based Access Control and Role Based Security</Title>
		  <URL>http://csrc.nist.gov/groups/SNS/rbac/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-231">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 5 - Improper Access Control (Authorization)</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---04</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/04/top-25-series-rank-5-improper-access-control-authorization/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-233">
		  <Author>Rahul Bhattacharjee</Author>
		  <Title>Authentication using JAAS</Title>
		  <URL>http://www.javaranch.com/journal/2008/04/authentication-using-JAAS.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-236">
		  <Author>Kim Zetter</Author>
		  <Title>Weak Password Brings 'Happiness' to Twitter Hacker</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---09</Publication_Day>
		  <URL>http://www.wired.com/threatlevel/2009/01/professed-twitt/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-237">
		  <Author>OWASP</Author>
		  <Title>Top 10 2007-Broken Authentication and Session Management</Title>
		  <Publication_Year>2007</Publication_Year>
		  <URL>http://www.owasp.org/index.php/Top_10_2007-A7</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-238">
		  <Author>OWASP</Author>
		  <Title>Guide to Authentication</Title>
		  <URL>http://www.owasp.org/index.php/Guide_to_Authentication</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-239">
		  <Author>Microsoft</Author>
		  <Title>Authentication</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/aa374735(VS.85).aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-243">
		  <Author>Sascha Fahl, Marian Harbach, Thomas Muders, Matthew Smith</Author>
		  <Author>Lars Baumgärtner, Bernd Freisleben</Author>
		  <Title>Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---16</Publication_Day>
		  <URL>http://www2.dcsec.uni-hannover.de/files/android/p50-fahl.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-244">
		  <Author>M. Bishop</Author>
		  <Title>Computer Security: Art and Science</Title>
		  <Publication_Year>2003</Publication_Year>
		  <Publisher>Addison-Wesley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-245">
		  <Author>Martin Georgiev</Author>
		  <Author>Subodh Iyengar</Author>
		  <Author>Suman Jana</Author>
		  <Author>Rishita Anubhai</Author>
		  <Author>Dan Boneh</Author>
		  <Author>Vitaly Shmatikov</Author>
		  <Title>The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <URL>http://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-249">
		  <Author>Kenneth Ballard</Author>
		  <Title>Secure programming with the OpenSSL API, Part 2: Secure handshake</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---03</Publication_Day>
		  <URL>http://www.ibm.com/developerworks/library/l-openssl2/index.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-250">
		  <Author>Eric Rescorla</Author>
		  <Title>An Introduction to OpenSSL Programming (Part I)</Title>
		  <Publication_Year>2001</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---05</Publication_Day>
		  <URL>http://www.rtfm.com/openssl-examples/part1.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-257">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 19 - Missing Authentication for Critical Function</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---23</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/23/top-25-series-rank-19-missing-authentication-for-critical-function/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-265">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 10 - Missing Encryption of Sensitive Data</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---26</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/26/top-25-series-rank-10-missing-encryption-of-sensitive-data/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-267">
		  <Author>Information Technology Laboratory, National Institute of Standards and Technology</Author>
		  <Title>SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES</Title>
		  <Publication_Year>2001</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <URL>http://csrc.nist.gov/publications/fips/fips140-2/fips1402.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-271">
		  <Author>OWASP</Author>
		  <Title>Top 10 2007-Insecure Communications</Title>
		  <Publication_Year>2007</Publication_Year>
		  <URL>http://www.owasp.org/index.php/Top_10_2007-A9</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-280">
		  <Author>Bruce Schneier</Author>
		  <Title>Applied Cryptography</Title>
		  <Publication_Year>1996</Publication_Year>
		  <Publisher>John Wiley &amp; Sons</Publisher>
		  <URL>http://www.schneier.com/book-applied.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-281">
		  <Author>Alfred J. Menezes</Author>
		  <Author>Paul C. van Oorschot</Author>
		  <Author>Scott A. Vanstone</Author>
		  <Title>Handbook of Applied Cryptography</Title>
		  <Publication_Year>1996</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <URL>http://www.cacr.math.uwaterloo.ca/hac/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-282">
		  <Author>C Matthew Curtin</Author>
		  <Title>Avoiding bogus encryption products: Snake Oil FAQ</Title>
		  <Publication_Year>1998</Publication_Year>
		  <Publication_Month>--04</Publication_Month>
		  <Publication_Day>---10</Publication_Day>
		  <URL>http://www.faqs.org/faqs/cryptography-faq/snake-oil/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-284">
		  <Author>Paul F. Roberts</Author>
		  <Title>Microsoft Scraps Old Encryption in New Code</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <URL>http://www.eweek.com/c/a/Security/Microsoft-Scraps-Old-Encryption-in-New-Code/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-287">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 24 - Use of a Broken or Risky Cryptographic Algorithm</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/25/top-25-series-rank-24-use-of-a-broken-or-risky-cryptographic-algorithm/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-289">
		  <Author>Alexander Sotirov et al.</Author>
		  <Title>MD5 considered harmful today</Title>
		  <URL>http://www.phreedom.org/research/rogue-ca/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-291">
		  <Author>Johnny Shelley</Author>
		  <Title>bcrypt</Title>
		  <URL>http://bcrypt.sourceforge.net/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-292">
		  <Author>Colin Percival</Author>
		  <Title>Tarsnap - The scrypt key derivation function and encryption utility</Title>
		  <URL>http://www.tarsnap.com/scrypt.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-293">
		  <Author>B. Kaliski</Author>
		  <Title>RFC2898 - PKCS #5: Password-Based Cryptography Specification Version 2.0</Title>
		  <Publication_Year>2000</Publication_Year>
		  <URL>http://tools.ietf.org/html/rfc2898</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-294">
		  <Author>Coda Hale</Author>
		  <Title>How To Safely Store A Password</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---31</Publication_Day>
		  <URL>http://codahale.com/how-to-safely-store-a-password/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-295">
		  <Author>Brian Krebs</Author>
		  <Title>How Companies Can Beef Up Password Security (interview with Thomas H. Ptacek)</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <Publication_Day>---11</Publication_Day>
		  <URL>http://krebsonsecurity.com/2012/06/how-companies-can-beef-up-password-security/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-296">
		  <Author>Solar Designer</Author>
		  <Title>Password security: past, present, future</Title>
		  <Publication_Year>2012</Publication_Year>
		  <URL>http://www.openwall.com/presentations/PHDays2012-Password-Security/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-297">
		  <Author>Troy Hunt</Author>
		  <Title>Our password hashing has no clothes</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <Publication_Day>---26</Publication_Day>
		  <URL>http://www.troyhunt.com/2012/06/our-password-hashing-has-no-clothes.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-298">
		  <Author>Joshbw</Author>
		  <Title>Should we really use bcrypt/scrypt?</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <Publication_Day>---08</Publication_Day>
		  <URL>http://www.analyticalengine.net/2012/06/should-we-really-use-bcryptscrypt/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-324">
		  <Author>Taimur Aslam</Author>
		  <Title>A Taxonomy of Security Faults in the UNIX Operating System</Title>
		  <Publication_Year>1995</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---01</Publication_Day>
		  <URL>http://cwe.mitre.org/documents/sources/ATaxonomyofSecurityFaultsintheUNIXOperatingSystem%5BAslam95%5D.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-329">
		  <Author>Peter W</Author>
		  <Title>Cross-Site Request Forgeries (Re: The Dangers of Allowing Users to Post Images)</Title>
		  <Publication>Bugtraq</Publication>
		  <URL>http://marc.info/?l=bugtraq&amp;m=99263135911884&amp;w=2</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-330">
		  <Author>OWASP</Author>
		  <Title>Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet</Title>
		  <URL>http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-331">
		  <Author>Edward W. Felten</Author>
		  <Author>William Zeller</Author>
		  <Title>Cross-Site Request Forgeries: Exploitation and Prevention</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---18</Publication_Day>
		  <URL>http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.147.1445</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-332">
		  <Author>Robert Auger</Author>
		  <Title>CSRF - The Cross-Site Request Forgery (CSRF/XSRF) FAQ</Title>
		  <URL>http://www.cgisecurity.com/articles/csrf-faq.shtml</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-333">
		  <Title>Cross-site request forgery</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---22</Publication_Day>
		  <Publisher>Wikipedia</Publisher>
		  <URL>http://en.wikipedia.org/wiki/Cross-site_request_forgery</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-334">
		  <Author>Jason Lam</Author>
		  <Title>Top 25 Series - Rank 4 - Cross Site Request Forgery</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---03</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://software-security.sans.org/blog/2010/03/03/top-25-series-rank-4-cross-site-request-forgery</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-335">
		  <Author>Jeff Atwood</Author>
		  <Title>Preventing CSRF and XSRF Attacks</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---14</Publication_Day>
		  <URL>http://www.codinghorror.com/blog/2008/10/preventing-csrf-and-xsrf-attacks.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-338">
		  <Author>J. Oates</Author>
		  <Title>AOL man pleads guilty to selling 92m email addies</Title>
		  <Publication>The Register</Publication>
		  <Publication_Year>2005</Publication_Year>
		  <URL>http://www.theregister.co.uk/2005/02/07/aol_email_theft/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-339">
		  <Author>NIST</Author>
		  <Title>Guide to Protecting the Confidentiality of Personally Identifiable Information (SP 800-122)</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--04</Publication_Month>
		  <URL>http://csrc.nist.gov/publications/nistpubs/800-122/sp800-122.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-340">
		  <Author>U.S. Department of Commerce</Author>
		  <Title>Safe Harbor Privacy Framework</Title>
		  <URL>http://www.export.gov/safeharbor/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-341">
		  <Author>Federal Trade Commission</Author>
		  <Title>Financial Privacy: The Gramm-Leach Bliley Act (GLBA)</Title>
		  <URL>http://www.ftc.gov/privacy/glbact/index.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-342">
		  <Author>U.S. Department of Human Services</Author>
		  <Title>Health Insurance Portability and Accountability Act (HIPAA)</Title>
		  <URL>http://www.hhs.gov/ocr/hipaa/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-343">
		  <Author>Government of the State of California</Author>
		  <Title>California SB-1386</Title>
		  <Publication_Year>2002</Publication_Year>
		  <URL>http://info.sen.ca.gov/pub/01-02/bill/sen/sb_1351-1400/sb_1386_bill_20020926_chaptered.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-386">
		  <Author>Joao Antunes</Author>
		  <Author>Nuno Ferreira Neves</Author>
		  <Author>Paulo Verissimo</Author>
		  <Title>Detection and Prediction of Resource-Exhaustion Vulnerabilities</Title>
		  <Publication>Proceedings of the IEEE International Symposium on Software Reliability Engineering (ISSRE)</Publication>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <URL>http://homepages.di.fc.ul.pt/~nuno/PAPERS/ISSRE08.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-387">
		  <Author>D.J. Bernstein</Author>
		  <Title>Resource exhaustion</Title>
		  <URL>http://cr.yp.to/docs/resources.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-388">
		  <Author>Pascal Meunier</Author>
		  <Title>Resource exhaustion</Title>
		  <Publication>Secure Programming Educational Material</Publication>
		  <Publication_Year>2004</Publication_Year>
		  <URL>http://homes.cerias.purdue.edu/~pmeunier/secprog/sanitized/class1/6.resource%20exhaustion.ppt</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-392">
		  <Author>Paul Roberts</Author>
		  <Title>File descriptors and setuid applications</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---05</Publication_Day>
		  <URL>https://blogs.oracle.com/paulr/entry/file_descriptors_and_setuid_applications</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-393">
		  <Author>Apple</Author>
		  <Title>Introduction to Secure Coding Guide</Title>
		  <URL>https://developer.apple.com/library/mac/#documentation/security/conceptual/SecureCodingGuide/Articles/AccessControl.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-422">
		  <Author>Richard Stanway (r1CH)</Author>
		  <Title>Dynamic File Uploads, Security and You</Title>
		  <URL>http://shsc.info/FileUploadSecurity</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-423">
		  <Author>Johannes Ullrich</Author>
		  <Title>8 Basic Rules to Implement Secure File Uploads</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---28</Publication_Day>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2009/12/28/8-basic-rules-to-implement-secure-file-uploads/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-424">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 8 - Unrestricted Upload of Dangerous File Type</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/25/top-25-series-rank-8-unrestricted-upload-of-dangerous-file-type/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-43">
		  <Author>OWASP</Author>
		  <Title>OWASP TOP 10</Title>
		  <URL>http://www.owasp.org/index.php/Top_10_2007</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-432">
		  <Author>Norm Hardy</Author>
		  <Title>The Confused Deputy (or why capabilities might have been invented)</Title>
		  <Publication_Year>1988</Publication_Year>
		  <URL>http://www.cap-lore.com/CapTheory/ConfusedDeputy.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-44">
		  <Author>Michael Howard</Author>
		  <Author>David LeBlanc</Author>
		  <Author>John Viega</Author>
		  <Title>24 Deadly Sins of Software Security</Title>
		  <Publication>McGraw-Hill</Publication>
		  <Publication_Year>2010</Publication_Year>
	   </External_Reference>
      <External_Reference Reference_ID="REF-45">
		  <Author>OWASP</Author>
		  <Title>OWASP Enterprise Security API (ESAPI) Project</Title>
		  <URL>http://www.owasp.org/index.php/ESAPI</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-454">
		  <Author>Microsoft</Author>
		  <Title>Introduction to Code Signing</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/ms537361(VS.85).aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-455">
		  <Author>Microsoft</Author>
		  <Title>Authenticode</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/ms537359(v=VS.85).aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-456">
		  <Author>Apple</Author>
		  <Title>Code Signing Guide</Title>
		  <Publication>Apple Developer Connection</Publication>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <Publication_Day>---19</Publication_Day>
		  <URL>http://developer.apple.com/documentation/Security/Conceptual/CodeSigningGuide/Introduction/chapter_1_section_1.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-457">
		  <Author>Anthony Bellissimo</Author>
		  <Author>John Burgess</Author>
		  <Author>Kevin Fu</Author>
		  <Title>Secure Software Updates: Disappointments and New Challenges</Title>
		  <URL>http://prisms.cs.umass.edu/~kevinfu/papers/secureupdates-hotsec06.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-459">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 20 - Download of Code Without Integrity Check</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--04</Publication_Month>
		  <Publication_Day>---05</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/04/05/top-25-series-rank-20-download-code-integrity-check/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-461">
		  <Author>Matthias Kaiser</Author>
		  <Title>Exploiting Deserialization Vulnerabilities in Java</Title>
		  <Publication_Year>2015</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---28</Publication_Day>
		  <URL>http://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-462">
		  <Author>Sam Thomas</Author>
		  <Title>PHP unserialization vulnerabilities: What are we missing?</Title>
		  <Publication_Year>2015</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---27</Publication_Day>
		  <URL>http://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-463">
		  <Author>Gabriel Lawrence</Author>
		  <Author>Chris Frohoff</Author>
		  <Title>Marshalling Pickles: How deserializing objects can ruin your day</Title>
		  <Publication_Year>2015</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---28</Publication_Day>
		  <URL>http://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-464">
		  <Author>Heine Deelstra</Author>
		  <Title>Unserializing user-supplied data, a bad idea</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <URL>http://heine.familiedeelstra.com/security/unserialize</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-465">
		  <Author>Manish S. Saindane</Author>
		  <Title>Black Hat EU 2010 - Attacking Java Serialized Communication</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--04</Publication_Month>
		  <Publication_Day>---26</Publication_Day>
		  <URL>http://www.slideshare.net/msaindane/black-hat-eu-2010-attacking-java-serialized-communication</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-466">
		  <Author>Nadia Alramli</Author>
		  <Title>Why Python Pickle is Insecure</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---09</Publication_Day>
		  <URL>http://nadiana.com/python-pickle-insecure</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-467">
		  <Author>Nelson Elhage</Author>
		  <Title>Exploiting misuse of Python's "pickle"</Title>
		  <Publication_Year>2011</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---20</Publication_Day>
		  <URL>https://blog.nelhage.com/2011/03/exploiting-pickle/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-468">
		  <Author>Chris Frohoff</Author>
		  <Title>Deserialize My Shorts: Or How I Learned to Start Worrying and Hate Java Object Deserialization</Title>
		  <Publication_Year>2016</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---21</Publication_Day>
		  <URL>https://www.slideshare.net/frohoff1/deserialize-my-shorts-or-how-i-learned-to-start-worrying-and-hate-java-object-deserialization</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-48">
		  <Author>Jeremiah Grossman</Author>
		  <Title>Input validation or output filtering, which is better?</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---30</Publication_Day>
		  <URL>http://jeremiahgrossman.blogspot.com/2007/01/input-validation-or-output-filtering.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-482">
		  <Author>Zvi Gutterman</Author>
		  <Title>Hold Your Sessions: An Attack on Java Session-id Generation</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---13</Publication_Day>
		  <URL>http://www.securiteam.com/securityreviews/5TP0F0UEVQ.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-483">
		  <Author>Craig A. Shue</Author>
		  <Author>Andrew J. Kalafut</Author>
		  <Author>Minaxi Gupta</Author>
		  <Title>Exploitable Redirects on the Web: Identification, Prevalence, and Defense</Title>
		  <URL>http://www.cs.indiana.edu/cgi-pub/cshue/research/woot08.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-484">
		  <Author>Russ McRee</Author>
		  <Title>Open redirect vulnerabilities: definition and prevention</Title>
		  <Edition>Issue 17</Edition>
		  <Publication>(IN)SECURE</Publication>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--07</Publication_Month>
		  <URL>http://www.net-security.org/dl/insecure/INSECURE-Mag-17.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-485">
		  <Author>Jason Lam</Author>
		  <Title>Top 25 Series - Rank 23 - Open Redirect</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---25</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://software-security.sans.org/blog/2010/03/25/top-25-series-rank-23-open-redirect</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-496">
		  <Author>OWASP</Author>
		  <Title>XML External Entity (XXE) Processing</Title>
		  <URL>https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-497">
		  <Author>Sascha Herzog</Author>
		  <Title>XML External Entity Attacks (XXE)</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---20</Publication_Day>
		  <URL>https://www.owasp.org/images/5/5d/XML_Exteral_Entity_Attack.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-498">
		  <Author>Gregory Steuck</Author>
		  <Title>XXE (Xml eXternal Entity) Attack</Title>
		  <URL>http://www.securiteam.com/securitynews/6D0100A5PU.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-499">
		  <Author>WASC</Author>
		  <Title>XML External Entities (XXE) Attack</Title>
		  <URL>http://projects.webappsec.org/w/page/13247003/XML%20External%20Entities</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-500">
		  <Author>Bryan Sullivan</Author>
		  <Title>XML Denial of Service Attacks and Defenses</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <URL>http://msdn.microsoft.com/en-us/magazine/ee335713.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-501">
		  <Author>Chris Cornutt</Author>
		  <Title>Preventing XXE in PHP</Title>
		  <URL>http://websec.io/2012/08/27/Preventing-XXE-in-PHP.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-52">
		  <Author>Greg Hoglund</Author>
		  <Author>Gary McGraw</Author>
		  <Title>Exploiting Software: How to Break Code</Title>
		  <Publication_Year>2004</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---27</Publication_Day>
		  <Publisher>Addison-Wesley</Publisher>
		  <URL>http://www.exploitingsoftware.com/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-528">
		  <Author>OWASP</Author>
		  <Title>Top 10 2007-Insecure Direct Object Reference</Title>
		  <Publication_Year>2007</Publication_Year>
		  <URL>http://www.owasp.org/index.php/Top_10_2007-A4</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-529">
		  <Title>HMAC</Title>
		  <Publication_Year>2011</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---18</Publication_Day>
		  <Publisher>Wikipedia</Publisher>
		  <URL>http://en.wikipedia.org/wiki/Hmac</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-53">
		  <Author>Alec Muffet</Author>
		  <Title>The night the log was forged</Title>
		  <URL>http://doc.novsu.ac.ru/oreilly/tcpip/puis/ch10_05.htm</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-531">
		  <Author>Web Application Security Consortium</Author>
		  <Title>XPath Injection</Title>
		  <URL>http://www.webappsec.org/projects/threat/classes/xpath_injection.shtml</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-535">
		  <Author>Sean Barnum</Author>
		  <Author>Michael Gegick</Author>
		  <Title>Separation of Privilege</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---06</Publication_Day>
		  <URL>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/357.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-542">
		  <Author>Jon Postel, Editor</Author>
		  <Title>RFC: 793, TRANSMISSION CONTROL PROTOCOL</Title>
		  <Publication_Year>1981</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publisher>Information Sciences Institute</Publisher>
		  <URL>http://www.ietf.org/rfc/rfc0793.txt</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-544">
		  <Author>Sean Barnum</Author>
		  <Author>Michael Gegick</Author>
		  <Title>Never Assuming that Your Secrets Are Safe</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---14</Publication_Day>
		  <URL>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/352.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-567">
		  <Author>Taimur Aslam</Author>
		  <Title>A Taxonomy of Security Faults in the UNIX Operating System</Title>
		  <Publication_Year>1995</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---01</Publication_Day>
		  <URL>http://ftp.cerias.purdue.edu/pub/papers/taimur-aslam/aslam-taxonomy-msthesis.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-568">
		  <Author>Taimur Aslam</Author>
		  <Author>Ivan Krsul</Author>
		  <Author>Eugene H. Spafford</Author>
		  <Title>Use of A Taxonomy of Security Faults</Title>
		  <Publication_Year>1995</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---01</Publication_Day>
		  <URL>http://csrc.nist.gov/nissc/1996/papers/NISSC96/paper057/PAPER.PDF</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-594">
		  <Author>Jason Lam</Author>
		  <Title>Top 25 Series - Rank 21 - Incorrect Permission Assignment for Critical Response</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---24</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://software-security.sans.org/blog/2010/03/24/top-25-series-rank-21-incorrect-permission-assignment-for-critical-response</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-62">
		  <Author>Mark Dowd</Author>
		  <Author>John McDonald</Author>
		  <Author>Justin Schuh</Author>
		  <Title>The Art of Software Security Assessment</Title>
		  <Edition>1st Edition</Edition>
		  <Publication_Year>2006</Publication_Year>
		  <Publisher>Addison Wesley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-622">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 15 - Improper Check for Unusual or Exceptional Conditions</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/15/top-25-series-rank-15-improper-check-for-unusual-or-exceptional-conditions/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-631">
		  <Author>OWASP</Author>
		  <Title>Password Storage Cheat Sheet</Title>
		  <URL>https://www.owasp.org/index.php/Password_Storage_Cheat_Sheet</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-632">
		  <Author>Thomas Ptacek</Author>
		  <Title>Enough With The Rainbow Tables: What You Need To Know About Secure Password Schemes</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---10</Publication_Day>
		  <URL>http://www.securityfocus.com/blogs/262</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-633">
		  <Author>Robert Graham</Author>
		  <Title>The Importance of Being Canonical</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---02</Publication_Day>
		  <URL>http://erratasec.blogspot.com/2009/02/importance-of-being-canonical.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-634">
		  <Author>James McGlinn</Author>
		  <Title>Password Hashing</Title>
		  <URL>http://phpsec.org/articles/2005/password-hashing.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-635">
		  <Author>Jeff Atwood</Author>
		  <Title>Rainbow Hash Cracking</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---08</Publication_Day>
		  <URL>http://www.codinghorror.com/blog/archives/000949.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-636">
		  <Author>Jeff Atwood</Author>
		  <Title>Speed Hashing</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--04</Publication_Month>
		  <Publication_Day>---06</Publication_Day>
		  <URL>http://www.codinghorror.com/blog/2012/04/speed-hashing.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-637">
		  <Title>Rainbow table</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---03</Publication_Day>
		  <Publisher>Wikipedia</Publisher>
		  <URL>http://en.wikipedia.org/wiki/Rainbow_table</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-667">
		  <Author>Rafal Los</Author>
		  <Title>Real-Life Example of a 'Business Logic Defect' (Screen Shots!)</Title>
		  <Publication_Year>2011</Publication_Year>
		  <URL>http://h30501.www3.hp.com/t5/Following-the-White-Rabbit-A/Real-Life-Example-of-a-Business-Logic-Defect-Screen-Shots/ba-p/22581</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-672">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 22 - Allocation of Resources Without Limits or Throttling</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---23</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/23/top-25-series-rank-22-allocation-of-resources-without-limits-or-throttling/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-685">
		  <Author>Pascal Meunier</Author>
		  <Title>Meta-Character Vulnerabilities</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---20</Publication_Day>
		  <URL>http://www.cs.purdue.edu/homes/cs390s/slides/week09.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-686">
		  <Author>Robert Auger</Author>
		  <Title>OS Commanding</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <URL>http://projects.webappsec.org/OS-Commanding</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-687">
		  <Author>Lincoln Stein</Author>
		  <Author>John Stewart</Author>
		  <Title>The World Wide Web Security FAQ</Title>
		  <Publication_Year>2002</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---04</Publication_Day>
		  <URL>http://www.w3.org/Security/Faq/wwwsf4.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-688">
		  <Author>Jordan Dimov, Cigital</Author>
		  <Title>Security Issues in Perl Scripts</Title>
		  <URL>http://www.cgisecurity.com/lib/sips.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-690">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 9 - OS Command Injection</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---24</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/24/top-25-series-rank-9-os-command-injection/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-694">
		  <Author>Ronald L. Rivest</Author>
		  <Author>Burt Kaliski</Author>
		  <Title>RSA Problem</Title>
		  <Publication_Year>2003</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---10</Publication_Day>
		  <URL>http://people.csail.mit.edu/rivest/RivestKaliski-RSAProblem.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-695">
		  <Title>Optimal Asymmetric Encryption Padding</Title>
		  <Publication_Year>2009</Publication_Year>
		  <Publication_Month>--07</Publication_Month>
		  <Publication_Day>---08</Publication_Day>
		  <Publisher>Wikipedia</Publisher>
		  <URL>http://en.wikipedia.org/wiki/Optimal_Asymmetric_Encryption_Padding</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-7">
		  <Author>Michael Howard</Author>
		  <Author>David LeBlanc</Author>
		  <Title>Writing Secure Code</Title>
		  <Edition>2nd Edition</Edition>
		  <Publication_Year>2002</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---04</Publication_Day>
		  <Publisher>Microsoft Press</Publisher>
		  <URL>https://www.microsoftpressstore.com/store/writing-secure-code-9780735617223</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-701">
		  <Author>Microsoft</Author>
		  <Title>Securing Device Objects</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/ms794722.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-706">
		  <Author>Steve Christey</Author>
		  <Title>Unforgivable Vulnerabilities</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---02</Publication_Day>
		  <URL>http://cve.mitre.org/docs/docs-2007/unforgivable.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-709">
		  <Author>Jeremiah Grossman</Author>
		  <Author>Robert "RSnake" Hansen</Author>
		  <Author>Petko "pdp" D. Petkov</Author>
		  <Author>Anton Rager</Author>
		  <Author>Seth Fogie</Author>
		  <Title>XSS Attacks</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publisher>Syngress</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-712">
		  <Title>Cross-site scripting</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <Publication_Day>---26</Publication_Day>
		  <Publisher>Wikipedia</Publisher>
		  <URL>http://en.wikipedia.org/wiki/Cross-site_scripting</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-714">
		  <Author>RSnake</Author>
		  <Title>XSS (Cross Site Scripting) Cheat Sheet</Title>
		  <URL>http://ha.ckers.org/xss.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-715">
		  <Author>Microsoft</Author>
		  <Title>Mitigating Cross-site Scripting With HTTP-only Cookies</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/ms533046.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-716">
		  <Author>Mark Curphey, Microsoft</Author>
		  <Title>Anti-XSS 3.0 Beta and CAT.NET Community Technology Preview now Live!</Title>
		  <URL>http://blogs.msdn.com/cisg/archive/2008/12/15/anti-xss-3-0-beta-and-cat-net-community-technology-preview-now-live.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-718">
		  <Author>Ivan Ristic</Author>
		  <Title>XSS Defense HOWTO</Title>
		  <URL>http://blog.modsecurity.org/2008/07/do-you-know-how.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-719">
		  <Author>OWASP</Author>
		  <Title>Web Application Firewall</Title>
		  <URL>http://www.owasp.org/index.php/Web_Application_Firewall</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-720">
		  <Author>Web Application Security Consortium</Author>
		  <Title>Web Application Firewall Evaluation Criteria</Title>
		  <URL>http://www.webappsec.org/projects/wafec/v1/wasc-wafec-v1.0.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-721">
		  <Author>RSnake</Author>
		  <Title>Firefox Implements httpOnly And is Vulnerable to XMLHTTPRequest</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--07</Publication_Month>
		  <Publication_Day>---19</Publication_Day>
	   </External_Reference>
      <External_Reference Reference_ID="REF-722">
		  <Title>XMLHttpRequest allows reading HTTPOnly cookies</Title>
		  <Publisher>Mozilla</Publisher>
		  <URL>https://bugzilla.mozilla.org/show_bug.cgi?id=380418</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-723">
		  <Title>Apache Wicket</Title>
		  <URL>http://wicket.apache.org/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-724">
		  <Author>OWASP</Author>
		  <Title>XSS (Cross Site Scripting) Prevention Cheat Sheet</Title>
		  <URL>http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-725">
		  <Author>OWASP</Author>
		  <Title>DOM based XSS Prevention Cheat Sheet</Title>
		  <URL>http://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-726">
		  <Author>Jason Lam</Author>
		  <Title>Top 25 series - Rank 1 - Cross Site Scripting</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--02</Publication_Month>
		  <Publication_Day>---22</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/02/22/top-25-series-rank-1-cross-site-scripting/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-729">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 11 - Hardcoded Credentials</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---10</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/10/top-25-series-rank-11-hardcoded-credentials/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-754">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 6 - Reliance on Untrusted Inputs in a Security Decision</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---05</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/05/top-25-series-rank-6-reliance-on-untrusted-inputs-in-a-security-decision/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-756">
		  <Author>Scott Mitchell</Author>
		  <Title>Understanding ASP.NET View State</Title>
		  <Publication_Year>2004</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <Publisher>Microsoft</Publisher>
		  <URL>http://msdn.microsoft.com/en-us/library/ms972976.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-76">
		  <Author>Sean Barnum</Author>
		  <Author>Michael Gegick</Author>
		  <Title>Least Privilege</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--09</Publication_Month>
		  <Publication_Day>---14</Publication_Day>
		  <URL>https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-773">
		  <Author>Daniel Kulp</Author>
		  <Title>Apache CXF Security Advisory (CVE-2010-2076)</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--06</Publication_Month>
		  <Publication_Day>---16</Publication_Day>
		  <URL>http://svn.apache.org/repos/asf/cxf/trunk/security/CVE-2010-2076.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-778">
		  <Author>Jeremiah Grossman</Author>
		  <Title>Third-Party Web Widget Security FAQ</Title>
		  <URL>http://jeremiahgrossman.blogspot.com/2010/07/third-party-web-widget-security-faq.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-795">
		  <Author>Jeremiah Grossman</Author>
		  <Title>Business Logic Flaws and Yahoo Games</Title>
		  <Publication_Year>2006</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <Publication_Day>---08</Publication_Day>
		  <URL>http://jeremiahgrossman.blogspot.com/2006/12/business-logic-flaws.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-796">
		  <Author>Jeremiah Grossman</Author>
		  <Title>Seven Business Logic Flaws That Put Your Website At Risk</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <URL>http://www.whitehatsec.com/home/assets/WP_bizlogic092407.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-797">
		  <Author>WhiteHat Security</Author>
		  <Title>Business Logic Flaws</Title>
		  <URL>http://www.whitehatsec.com/home/solutions/BL_auction.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-799">
		  <Author>Rafal Los</Author>
		  <Author>Prajakta Jagdale</Author>
		  <Title>Defying Logic: Theory, Design, and Implementation of Complex Systems for Testing Application Logic</Title>
		  <Publication_Year>2011</Publication_Year>
		  <URL>http://www.slideshare.net/RafalLos/defying-logic-business-logic-testing-with-automation</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-801">
		  <Author>Viktoria Felmetsger</Author>
		  <Author>Ludovico Cavedon</Author>
		  <Author>Christopher Kruegel</Author>
		  <Author>Giovanni Vigna</Author>
		  <Title>Toward Automated Detection of Logic Vulnerabilities in Web Applications</Title>
		  <Publication>USENIX Security Symposium 2010</Publication>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--08</Publication_Month>
		  <URL>http://www.usenix.org/events/sec10/tech/full_papers/Felmetsger.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-802">
		  <Author>Faisal Nabi</Author>
		  <Title>Designing a Framework Method for Secure Business Application Logic Integrity in e-Commerce Systems</Title>
		  <Publication>International Journal of Network Security, Vol.12, No.1</Publication>
		  <Publication_Year>2011</Publication_Year>
		  <URL>http://ijns.femto.com.tw/contents/ijns-v12-n1/ijns-2011-v12-n1-p29-41.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-806">
		  <Author>WASC</Author>
		  <Title>Insufficient Process Validation</Title>
		  <URL>http://projects.webappsec.org/w/page/13246943/Insufficient-Process-Validation</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-859">
		  <Author>Steven Christey</Author>
		  <Title>Argument injection issues</Title>
		  <URL>http://www.securityfocus.com/archive/1/archive/1/460089/100/100/threaded</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-867">
		  <Author>OWASP</Author>
		  <Title>SQL Injection Prevention Cheat Sheet</Title>
		  <URL>http://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-868">
		  <Author>Steven Friedl</Author>
		  <Title>SQL Injection Attacks by Example</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---10</Publication_Day>
		  <URL>http://www.unixwiz.net/techtips/sql-injection.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-869">
		  <Author>Ferruh Mavituna</Author>
		  <Title>SQL Injection Cheat Sheet</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <URL>http://ferruh.mavituna.com/sql-injection-cheatsheet-oku/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-870">
		  <Author>David Litchfield</Author>
		  <Author>Chris Anley</Author>
		  <Author>John Heasman</Author>
		  <Author>Bill Grindlay</Author>
		  <Title>The Database Hacker's Handbook: Defending Database Servers</Title>
		  <Publication_Year>2005</Publication_Year>
		  <Publication_Month>--07</Publication_Month>
		  <Publication_Day>---14</Publication_Day>
		  <Publisher>Wiley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-871">
		  <Author>David Litchfield</Author>
		  <Title>The Oracle Hacker's Handbook: Hacking and Defending Oracle</Title>
		  <Publication_Year>2007</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---30</Publication_Day>
		  <Publisher>Wiley</Publisher>
	   </External_Reference>
      <External_Reference Reference_ID="REF-872">
		  <Author>Microsoft</Author>
		  <Title>SQL Injection</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--12</Publication_Month>
		  <URL>http://msdn.microsoft.com/en-us/library/ms161953.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-873">
		  <Author>Microsoft Security Vulnerability Research &amp; Defense</Author>
		  <Title>SQL Injection Attack</Title>
		  <URL>http://blogs.technet.com/swi/archive/2008/05/29/sql-injection-attack.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-874">
		  <Author>Michael Howard</Author>
		  <Title>Giving SQL Injection the Respect it Deserves</Title>
		  <Publication_Year>2008</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---15</Publication_Day>
		  <URL>http://blogs.msdn.com/sdl/archive/2008/05/15/giving-sql-injection-the-respect-it-deserves.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-875">
		  <Author>Frank Kim</Author>
		  <Title>Top 25 Series - Rank 2 - SQL Injection</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---01</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/01/top-25-series-rank-2-sql-injection/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-879">
		  <Author>SPI Dynamics</Author>
		  <Title>Web Applications and LDAP Injection</Title>
	   </External_Reference>
      <External_Reference Reference_ID="REF-882">
		  <Author>Amit Klein</Author>
		  <Title>Blind XPath Injection</Title>
		  <Publication_Year>2004</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---19</Publication_Day>
		  <URL>http://www.modsecurity.org/archive/amit/blind-xpath-injection.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-9">
		  <Author>Santos, J. C. S.</Author>
		  <Author>Tarrit, K.</Author>
		  <Author>Mirakhorli, M.</Author>
		  <Title>A Catalog of Security Architecture Weaknesses.</Title>
		  <Publication>2017 IEEE International Conference on Software Architecture (ICSA)</Publication>
		  <Publication_Year>2017</Publication_Year>
		  <URL>https://design.se.rit.edu/papers/cawe-paper.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-908">
		  <Author>Solar Designer</Author>
		  <Title>Password hashing at scale</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--10</Publication_Month>
		  <Publication_Day>---01</Publication_Day>
		  <URL>http://www.openwall.com/presentations/YaC2012-Password-Hashing-At-Scale/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-909">
		  <Author>Solar Designer</Author>
		  <Title>New developments in password hashing: ROM-port-hard functions</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <URL>http://www.openwall.com/presentations/ZeroNights2012-New-In-Password-Hashing/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-921">
		  <Author>Android Open Source Project</Author>
		  <Title>Security Tips</Title>
		  <Publication_Year>2013</Publication_Year>
		  <Publication_Month>--07</Publication_Month>
		  <Publication_Day>---16</Publication_Day>
		  <URL>http://developer.android.com/training/articles/security-tips.html#StoringData</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-928">
		  <Author>Ulf Harnhammar</Author>
		  <Title>CRLF Injection</Title>
		  <Publication>Bugtraq</Publication>
		  <Publication_Year>2002</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <Publication_Day>---07</Publication_Day>
		  <URL>http://marc.info/?l=bugtraq&amp;m=102088154213630&amp;w=2</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-938">
		  <Author>Guillaume Ross</Author>
		  <Title>Scheming for Privacy and Security</Title>
		  <Publication_Year>2013</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <Publication_Day>---11</Publication_Day>
		  <URL>http://brooksreview.net/2013/11/guest-post_scheming-for-privacy-and-security/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-941">
		  <Author>US-CERT</Author>
		  <Title>UDP-based Amplification Attacks</Title>
		  <Publication_Year>2014</Publication_Year>
		  <Publication_Month>--01</Publication_Month>
		  <Publication_Day>---17</Publication_Day>
		  <URL>https://www.us-cert.gov/ncas/alerts/TA14-017A</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-942">
		  <Author>Fortify</Author>
		  <Title>Android Bad Practices: Sticky Broadcast</Title>
		  <URL>http://www.hpenterprisesecurity.com/vulncat/en/vulncat/java/android_bad_practices_sticky_broadcast.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-943">
		  <Author>Apurva Udaykumar</Author>
		  <Title>Setting a crossdomain.xml file for HTTP streaming</Title>
		  <Publication_Year>2012</Publication_Year>
		  <Publication_Month>--11</Publication_Month>
		  <Publication_Day>---19</Publication_Day>
		  <Publisher>Adobe</Publisher>
		  <URL>http://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-944">
		  <Author>Adobe</Author>
		  <Title>Cross-domain policy for Flash movies</Title>
		  <Publisher>Adobe</Publisher>
		  <URL>http://kb2.adobe.com/cps/142/tn_14213.html</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-945">
		  <Author>Microsoft Corporation</Author>
		  <Title>HTTP Communication and Security with Silverlight</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/cc838250.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-946">
		  <Author>Microsoft Corporation</Author>
		  <Title>Network Security Access Restrictions in Silverlight</Title>
		  <URL>http://msdn.microsoft.com/en-us/library/cc645032.aspx</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-947">
		  <Author>Dongseok Jang</Author>
		  <Author>Aishwarya Venkataraman</Author>
		  <Author>G. Michael Sawka</Author>
		  <Author>Hovav Shacham</Author>
		  <Title>Analyzing the Crossdomain Policies of Flash Applications</Title>
		  <Publication_Year>2011</Publication_Year>
		  <Publication_Month>--05</Publication_Month>
		  <URL>http://cseweb.ucsd.edu/~hovav/dist/crossdomain.pdf</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-951">
		  <Author>Shaun Clowes</Author>
		  <Title>A Study in Scarlet</Title>
		  <URL>http://www.cgisecurity.com/lib/studyinscarlet.txt</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-952">
		  <Author>Stefan Esser</Author>
		  <Title>Suhosin</Title>
		  <URL>http://www.hardened-php.net/suhosin/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-953">
		  <Author>Johannes Ullrich</Author>
		  <Title>Top 25 Series - Rank 13 - PHP File Inclusion</Title>
		  <Publication_Year>2010</Publication_Year>
		  <Publication_Month>--03</Publication_Month>
		  <Publication_Day>---11</Publication_Day>
		  <Publisher>SANS Software Security Institute</Publisher>
		  <URL>http://blogs.sans.org/appsecstreetfighter/2010/03/11/top-25-series-rank-13-php-file-inclusion/</URL>
	   </External_Reference>
      <External_Reference Reference_ID="REF-955">
			<Author>Chris McMahon Stone</Author>
			<Author>Tom Chothia</Author>
			<Author>Flavio D. Garcia</Author>
			<Title>Spinner: Semi-Automatic Detection of Pinning without Hostname Verification</Title>
			<URL>http://www.cs.bham.ac.uk/~garciaf/publications/spinner.pdf</URL>
			<URL_Date>2018-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-956">
			<Author>Wikipedia</Author>
			<Title>Samy (computer worm)</Title>
			<URL>https://en.wikipedia.org/wiki/Samy_(computer_worm)</URL>
			<URL_Date>2018-01-16</URL_Date>
		</External_Reference>
      <External_Reference Reference_ID="REF-962">
			<Author>Object Management Group (OMG)</Author>
			<Title>Automated Source Code Security Measure (ASCSM)</Title>
			<Publication_Year>2016</Publication_Year>
			<Publication_Month>--01</Publication_Month>
			<URL>http://www.omg.org/spec/ASCSM/1.0/</URL>
		</External_Reference>
   </External_References>
</Weakness_Catalog>